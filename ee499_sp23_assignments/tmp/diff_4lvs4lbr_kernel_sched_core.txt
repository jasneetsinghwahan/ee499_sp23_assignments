31a32,33
> #include <linux/perf_event.h>
> 
3380a3383
> 
5760a5764,5812
> // JC lb perf
> static inline void __init rq_perf_init(struct rq *rq) {
>     struct perf_event *event;
>     struct perf_event_attr attr = {
>         /* .type		= PERF_TYPE_SOFTWARE, */
>         .size = sizeof(struct perf_event_attr),
>         .enable_on_exec = 1,
>         .exclude_host = 0,
>     };
> 
>     /* attr.config = PERF_COUNT_SW_CONTEXT_SWITCHES; */
>     attr.type = PERF_TYPE_HARDWARE;
>     attr.config = PERF_COUNT_HW_CPU_CYCLES;
>     event = perf_event_create_kernel_counter(&attr, rq->cpu, NULL, NULL, NULL);
>     if (IS_ERR(event)) {
>         printk("JC create rq perf_event 00 on cpu %d failed with %ld", rq->cpu, (long)event);
>     } else {
>         /* printk("JC rq perf_event 00 create on cpu %d success %lx", rq->cpu, (long)event); */
>         perf_event_enable(event);
>         rq->pe_0 = event;
>     }
> 
>     attr.type = PERF_TYPE_HARDWARE;
>     attr.config = PERF_COUNT_HW_BRANCH_INSTRUCTIONS;
>     event = perf_event_create_kernel_counter(&attr, rq->cpu, NULL, NULL, NULL);
>     if (IS_ERR(event)) {
>         printk("JC create rq perf_event 01 on cpu %d failed with %ld", rq->cpu, (long)event);
>     } else {
>         /* printk("JC rq perf_event 01 create on cpu %d success %lx", rq->cpu, (long)event); */
>         perf_event_enable(event);
>         rq->pe_1 = event;
>     }
> 
> }
> 
> static void jc_rq_perf_init(void)
> {
>     int i;
> 	for_each_possible_cpu(i) {
> 		struct rq *rq;
>         unsigned long flags;
> 
> 		rq = cpu_rq(i);
>         /* raw_spin_lock_irqsave(&rq->lock, flags); */
>         rq_perf_init(rq);
>         /* raw_spin_unlock_irqrestore(&rq->lock, flags); */
>     }
> }
> 
5783a5836,5838
>     // JC
>     jc_rq_perf_init();
> 
5931a5987,5990
> 
>         // JC
>         rq->pe_0 = NULL;
>         rq->pe_1 = NULL;
