2,5d1
< /*
<  * Scheduler internal types and methods:
<  */
< #include <linux/sched.h>
6a3
> #include <linux/sched.h>
7a5,8
> #include <linux/sched/sysctl.h>
> #include <linux/sched/topology.h>
> #include <linux/sched/rt.h>
> #include <linux/sched/deadline.h>
9c10,13
< #include <linux/sched/coredump.h>
---
> #include <linux/sched/wake_q.h>
> #include <linux/sched/signal.h>
> #include <linux/sched/numa_balancing.h>
> #include <linux/sched/mm.h>
11,12c15,16
< #include <linux/sched/cputime.h>
< #include <linux/sched/deadline.h>
---
> #include <linux/sched/stat.h>
> #include <linux/sched/nohz.h>
15,28d18
< #include <linux/sched/idle.h>
< #include <linux/sched/init.h>
< #include <linux/sched/isolation.h>
< #include <linux/sched/jobctl.h>
< #include <linux/sched/loadavg.h>
< #include <linux/sched/mm.h>
< #include <linux/sched/nohz.h>
< #include <linux/sched/numa_balancing.h>
< #include <linux/sched/prio.h>
< #include <linux/sched/rt.h>
< #include <linux/sched/signal.h>
< #include <linux/sched/smt.h>
< #include <linux/sched/stat.h>
< #include <linux/sched/sysctl.h>
31,36c21,22
< #include <linux/sched/topology.h>
< #include <linux/sched/user.h>
< #include <linux/sched/wake_q.h>
< #include <linux/sched/xacct.h>
< 
< #include <uapi/linux/sched/types.h>
---
> #include <linux/sched/cputime.h>
> #include <linux/sched/init.h>
37a24,25
> #include <linux/u64_stats_sync.h>
> #include <linux/kernel_stat.h>
39,63c27,28
< #include <linux/bitops.h>
< #include <linux/blkdev.h>
< #include <linux/compat.h>
< #include <linux/context_tracking.h>
< #include <linux/cpufreq.h>
< #include <linux/cpuidle.h>
< #include <linux/cpuset.h>
< #include <linux/ctype.h>
< #include <linux/debugfs.h>
< #include <linux/delayacct.h>
< #include <linux/energy_model.h>
< #include <linux/init_task.h>
< #include <linux/kprobes.h>
< #include <linux/kthread.h>
< #include <linux/membarrier.h>
< #include <linux/migrate.h>
< #include <linux/mmu_context.h>
< #include <linux/nmi.h>
< #include <linux/proc_fs.h>
< #include <linux/prefetch.h>
< #include <linux/profile.h>
< #include <linux/psi.h>
< #include <linux/ratelimit.h>
< #include <linux/rcupdate_wait.h>
< #include <linux/security.h>
---
> #include <linux/mutex.h>
> #include <linux/spinlock.h>
65,71c30,33
< #include <linux/suspend.h>
< #include <linux/swait.h>
< #include <linux/syscalls.h>
< #include <linux/task_work.h>
< #include <linux/tsacct_kern.h>
< 
< #include <asm/tlb.h>
---
> #include <linux/irq_work.h>
> #include <linux/tick.h>
> #include <linux/slab.h>
> #include <linux/cgroup.h>
74c36
< # include <asm/paravirt.h>
---
> #include <asm/paravirt.h>
80,81d41
< #include <trace/events/sched.h>
< 
103c63,68
< extern void call_trace_sched_update_nr_running(struct rq *rq, int count);
---
> #ifdef CONFIG_SMP
> extern void cpu_load_update_active(struct rq *this_rq);
> #else
> static inline void cpu_load_update_active(struct rq *this_rq) { }
> #endif
> 
117,118c82,83
<  * resolution (i.e. 64-bit). The costs for increasing resolution when 32-bit
<  * are pretty high and the returns do not justify the increased costs.
---
>  * resolution (i.e. 64bit). The costs for increasing resolution when 32bit are
>  * pretty high and the returns do not justify the increased costs.
120,121c85,86
<  * Really only required when CONFIG_FAIR_GROUP_SCHED=y is also set, but to
<  * increase coverage and consistency always enable it on 64-bit platforms.
---
>  * Really only required when CONFIG_FAIR_GROUP_SCHED is also set, but to
>  * increase coverage and consistency always enable it on 64bit platforms.
126,132c91
< # define scale_load_down(w) \
< ({ \
< 	unsigned long __w = (w); \
< 	if (__w) \
< 		__w = max(2UL, __w >> SCHED_FIXEDPOINT_SHIFT); \
< 	__w; \
< })
---
> # define scale_load_down(w)	((w) >> SCHED_FIXEDPOINT_SHIFT)
145c104
<  *  scale_load(sched_prio_to_weight[NICE_TO_PRIO(0)-MAX_RT_PRIO]) == NICE_0_LOAD
---
>  *  scale_load(sched_prio_to_weight[USER_PRIO(NICE_TO_PRIO(0))]) == NICE_0_LOAD
155c114
< #define DL_SCALE		10
---
> #define DL_SCALE (10)
158c117
<  * Single value that denotes runtime == period, ie unlimited time.
---
>  * These are the 'tuning knobs' of the scheduler:
160c119,123
< #define RUNTIME_INF		((u64)~0ULL)
---
> 
> /*
>  * single value that denotes runtime == period, ie unlimited time.
>  */
> #define RUNTIME_INF	((u64)~0ULL)
186,190d148
< static inline int task_has_idle_policy(struct task_struct *p)
< {
< 	return idle_policy(p->policy);
< }
< 
201,240d158
< #define cap_scale(v, s) ((v)*(s) >> SCHED_CAPACITY_SHIFT)
< 
< static inline void update_avg(u64 *avg, u64 sample)
< {
< 	s64 diff = sample - *avg;
< 	*avg += diff / 8;
< }
< 
< /*
<  * Shifting a value by an exponent greater *or equal* to the size of said value
<  * is UB; cap at size-1.
<  */
< #define shr_bound(val, shift)							\
< 	(val >> min_t(typeof(shift), shift, BITS_PER_TYPE(typeof(val)) - 1))
< 
< /*
<  * !! For sched_setattr_nocheck() (kernel) only !!
<  *
<  * This is actually gross. :(
<  *
<  * It is used to make schedutil kworker(s) higher priority than SCHED_DEADLINE
<  * tasks, but still be able to sleep. We need this on platforms that cannot
<  * atomically change clock frequency. Remove once fast switching will be
<  * available on such platforms.
<  *
<  * SUGOV stands for SchedUtil GOVernor.
<  */
< #define SCHED_FLAG_SUGOV	0x10000000
< 
< #define SCHED_DL_FLAGS (SCHED_FLAG_RECLAIM | SCHED_FLAG_DL_OVERRUN | SCHED_FLAG_SUGOV)
< 
< static inline bool dl_entity_is_special(struct sched_dl_entity *dl_se)
< {
< #ifdef CONFIG_CPU_FREQ_GOV_SCHEDUTIL
< 	return unlikely(dl_se->flags & SCHED_FLAG_SUGOV);
< #else
< 	return false;
< #endif
< }
< 
247,248c165
< 	return dl_entity_is_special(a) ||
< 	       dl_time_before(a->deadline, b->deadline);
---
> 	return dl_time_before(a->deadline, b->deadline);
270,280d186
< struct dl_bandwidth {
< 	raw_spinlock_t		dl_runtime_lock;
< 	u64			dl_runtime;
< 	u64			dl_period;
< };
< 
< static inline int dl_bandwidth_enabled(void)
< {
< 	return sysctl_sched_rt_runtime >= 0;
< }
< 
282c188
<  * To keep the bandwidth of -deadline tasks under control
---
>  * To keep the bandwidth of -deadline tasks and groups under control
284,286c190,191
<  *  - store the maximum -deadline bandwidth of each cpu;
<  *  - cache the fraction of bandwidth that is currently allocated in
<  *    each root domain;
---
>  *  - store the maximum -deadline bandwidth of the system (the group);
>  *  - cache the fraction of that bandwidth that is currently allocated.
294c199
<  * With respect to SMP, bandwidth is given on a per root domain basis,
---
>  * With respect to SMP, the bandwidth is given on a per-CPU basis,
296,297c201,209
<  *  - bw (< 100%) is the deadline bandwidth of each CPU;
<  *  - total_bw is the currently allocated bandwidth in each root domain;
---
>  *  - dl_bw (< 100%) is the bandwidth of the system (group) on each CPU;
>  *  - dl_total_bw array contains, in the i-eth element, the currently
>  *    allocated bandwidth on the i-eth CPU.
>  * Moreover, groups consume bandwidth on each CPU, while tasks only
>  * consume bandwidth on the CPU they're running on.
>  * Finally, dl_total_bw_cpu is used to cache the index of dl_total_bw
>  * that will be shown the next time the proc or cgroup controls will
>  * be red. It on its turn can be changed by writing on its own
>  * control.
298a211,221
> struct dl_bandwidth {
> 	raw_spinlock_t dl_runtime_lock;
> 	u64 dl_runtime;
> 	u64 dl_period;
> };
> 
> static inline int dl_bandwidth_enabled(void)
> {
> 	return sysctl_sched_rt_runtime >= 0;
> }
> 
300,302c223,224
< 	raw_spinlock_t		lock;
< 	u64			bw;
< 	u64			total_bw;
---
> 	raw_spinlock_t lock;
> 	u64 bw, total_bw;
321,322c243,244
< static inline bool __dl_overflow(struct dl_bw *dl_b, unsigned long cap,
< 				 u64 old_bw, u64 new_bw)
---
> static inline
> bool __dl_overflow(struct dl_bw *dl_b, int cpus, u64 old_bw, u64 new_bw)
325,340c247
< 	       cap_scale(dl_b->bw, cap) < dl_b->total_bw - old_bw + new_bw;
< }
< 
< /*
<  * Verify the fitness of task @p to run on @cpu taking into account the
<  * CPU original capacity and the runtime/deadline ratio of the task.
<  *
<  * The function will return true if the CPU original capacity of the
<  * @cpu scaled by SCHED_CAPACITY_SCALE >= runtime/deadline ratio of the
<  * task and false otherwise.
<  */
< static inline bool dl_task_fits_capacity(struct task_struct *p, int cpu)
< {
< 	unsigned long cap = arch_scale_cpu_capacity(cpu);
< 
< 	return cap_scale(p->dl.dl_deadline, cap) >= p->dl.dl_runtime;
---
> 	       dl_b->bw * cpus < dl_b->total_bw - old_bw + new_bw;
342a250
> void dl_change_utilization(struct task_struct *p, u64 new_bw);
344c252
< extern int  sched_dl_global_validate(void);
---
> extern int sched_dl_global_validate(void);
346c254,255
< extern int  sched_dl_overflow(struct task_struct *p, int policy, const struct sched_attr *attr);
---
> extern int sched_dl_overflow(struct task_struct *p, int policy,
> 			     const struct sched_attr *attr);
351,352c260,263
< extern int  dl_task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);
< extern int  dl_cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
---
> extern int dl_task_can_attach(struct task_struct *p,
> 			      const struct cpumask *cs_cpus_allowed);
> extern int dl_cpuset_cpumask_can_shrink(const struct cpumask *cur,
> 					const struct cpumask *trial);
358d268
< #include <linux/psi.h>
367,384c277,289
< 	raw_spinlock_t		lock;
< 	ktime_t			period;
< 	u64			quota;
< 	u64			runtime;
< 	u64			burst;
< 	s64			hierarchical_quota;
< 
< 	u8			idle;
< 	u8			period_active;
< 	u8			slack_started;
< 	struct hrtimer		period_timer;
< 	struct hrtimer		slack_timer;
< 	struct list_head	throttled_cfs_rq;
< 
< 	/* Statistics: */
< 	int			nr_periods;
< 	int			nr_throttled;
< 	u64			throttled_time;
---
> 	raw_spinlock_t lock;
> 	ktime_t period;
> 	u64 quota, runtime;
> 	s64 hierarchical_quota;
> 	u64 runtime_expires;
> 
> 	int idle, period_active;
> 	struct hrtimer period_timer, slack_timer;
> 	struct list_head throttled_cfs_rq;
> 
> 	/* statistics */
> 	int nr_periods, nr_throttled;
> 	u64 throttled_time;
388c293
< /* Task group related information */
---
> /* task group related information */
393,400c298,302
< 	/* schedulable entities of this group on each CPU */
< 	struct sched_entity	**se;
< 	/* runqueue "owned" by this group on each CPU */
< 	struct cfs_rq		**cfs_rq;
< 	unsigned long		shares;
< 
< 	/* A positive value indicates that this is a SCHED_IDLE group. */
< 	int			idle;
---
> 	/* schedulable entities of this group on each cpu */
> 	struct sched_entity **se;
> 	/* runqueue "owned" by this group on each cpu */
> 	struct cfs_rq **cfs_rq;
> 	unsigned long shares;
408c310
< 	atomic_long_t		load_avg ____cacheline_aligned;
---
> 	atomic_long_t load_avg ____cacheline_aligned;
413,414c315,316
< 	struct sched_rt_entity	**rt_se;
< 	struct rt_rq		**rt_rq;
---
> 	struct sched_rt_entity **rt_se;
> 	struct rt_rq **rt_rq;
416c318
< 	struct rt_bandwidth	rt_bandwidth;
---
> 	struct rt_bandwidth rt_bandwidth;
419,420c321,322
< 	struct rcu_head		rcu;
< 	struct list_head	list;
---
> 	struct rcu_head rcu;
> 	struct list_head list;
422,424c324,326
< 	struct task_group	*parent;
< 	struct list_head	siblings;
< 	struct list_head	children;
---
> 	struct task_group *parent;
> 	struct list_head siblings;
> 	struct list_head children;
427,438c329
< 	struct autogroup	*autogroup;
< #endif
< 
< 	struct cfs_bandwidth	cfs_bandwidth;
< 
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	/* The two decimal precision [%] value requested from user-space */
< 	unsigned int		uclamp_pct[UCLAMP_CNT];
< 	/* Clamp values requested for a task group */
< 	struct uclamp_se	uclamp_req[UCLAMP_CNT];
< 	/* Effective clamp values used for a task group */
< 	struct uclamp_se	uclamp[UCLAMP_CNT];
---
> 	struct autogroup *autogroup;
440a332
> 	struct cfs_bandwidth cfs_bandwidth;
454,455c346,347
< #define MIN_SHARES		(1UL <<  1)
< #define MAX_SHARES		(1UL << 18)
---
> #define MIN_SHARES	(1UL <<  1)
> #define MAX_SHARES	(1UL << 18)
511,512d402
< extern int sched_group_set_idle(struct task_group *tg, long idle);
< 
530,540c420,422
< 	struct load_weight	load;
< 	unsigned int		nr_running;
< 	unsigned int		h_nr_running;      /* SCHED_{NORMAL,BATCH,IDLE} */
< 	unsigned int		idle_h_nr_running; /* SCHED_IDLE */
< 
< 	u64			exec_clock;
< 	u64			min_vruntime;
< #ifdef CONFIG_SCHED_CORE
< 	unsigned int		forceidle_seq;
< 	u64			min_vruntime_fi;
< #endif
---
> 	struct load_weight load;
> 	unsigned long runnable_weight;
> 	unsigned int nr_running, h_nr_running;
541a424,425
> 	u64 exec_clock;
> 	u64 min_vruntime;
543c427
< 	u64			min_vruntime_copy;
---
> 	u64 min_vruntime_copy;
546c430
< 	struct rb_root_cached	tasks_timeline;
---
> 	struct rb_root_cached tasks_timeline;
552,555c436
< 	struct sched_entity	*curr;
< 	struct sched_entity	*next;
< 	struct sched_entity	*last;
< 	struct sched_entity	*skip;
---
> 	struct sched_entity *curr, *next, *last, *skip;
558c439
< 	unsigned int		nr_spread_over;
---
> 	unsigned int nr_spread_over;
565c446
< 	struct sched_avg	avg;
---
> 	struct sched_avg avg;
567c448
< 	u64			load_last_update_time_copy;
---
> 	u64 load_last_update_time_copy;
574c455
< 		unsigned long	runnable_avg;
---
> 		unsigned long	runnable_sum;
578,580c459,461
< 	unsigned long		tg_load_avg_contrib;
< 	long			propagate;
< 	long			prop_runnable_sum;
---
> 	unsigned long tg_load_avg_contrib;
> 	long propagate;
> 	long prop_runnable_sum;
588,590c469,471
< 	unsigned long		h_load;
< 	u64			last_h_load_update;
< 	struct sched_entity	*h_load_next;
---
> 	unsigned long h_load;
> 	u64 last_h_load_update;
> 	struct sched_entity *h_load_next;
595c476
< 	struct rq		*rq;	/* CPU runqueue to which this cfs_rq is attached */
---
> 	struct rq *rq;	/* cpu runqueue to which this cfs_rq is attached */
602,603c483,484
< 	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a CPU.
< 	 * This list is used during load balance.
---
> 	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a cpu. This
> 	 * list is used during load balance.
605,610c486,488
< 	int			on_list;
< 	struct list_head	leaf_cfs_rq_list;
< 	struct task_group	*tg;	/* group that "owns" this runqueue */
< 
< 	/* Locally cached copy of our task_group's idle value */
< 	int			idle;
---
> 	int on_list;
> 	struct list_head leaf_cfs_rq_list;
> 	struct task_group *tg;	/* group that "owns" this runqueue */
613,621c491,498
< 	int			runtime_enabled;
< 	s64			runtime_remaining;
< 
< 	u64			throttled_clock;
< 	u64			throttled_clock_task;
< 	u64			throttled_clock_task_time;
< 	int			throttled;
< 	int			throttle_count;
< 	struct list_head	throttled_list;
---
> 	int runtime_enabled;
> 	u64 runtime_expires;
> 	s64 runtime_remaining;
> 
> 	u64 throttled_clock, throttled_clock_task;
> 	u64 throttled_clock_task_time;
> 	int throttled, throttle_count;
> 	struct list_head throttled_list;
638,640c515,517
< 	struct rt_prio_array	active;
< 	unsigned int		rt_nr_running;
< 	unsigned int		rr_nr_running;
---
> 	struct rt_prio_array active;
> 	unsigned int rt_nr_running;
> 	unsigned int rr_nr_running;
643c520
< 		int		curr; /* highest queued rt task prio */
---
> 		int curr; /* highest queued rt task prio */
645c522
< 		int		next; /* next highest */
---
> 		int next; /* next highest */
650,654c527,530
< 	unsigned int		rt_nr_migratory;
< 	unsigned int		rt_nr_total;
< 	int			overloaded;
< 	struct plist_head	pushable_tasks;
< 
---
> 	unsigned long rt_nr_migratory;
> 	unsigned long rt_nr_total;
> 	int overloaded;
> 	struct plist_head pushable_tasks;
656c532
< 	int			rt_queued;
---
> 	int rt_queued;
658,660c534,536
< 	int			rt_throttled;
< 	u64			rt_time;
< 	u64			rt_runtime;
---
> 	int rt_throttled;
> 	u64 rt_time;
> 	u64 rt_runtime;
662c538
< 	raw_spinlock_t		rt_runtime_lock;
---
> 	raw_spinlock_t rt_runtime_lock;
665c541
< 	unsigned int		rt_nr_boosted;
---
> 	unsigned long rt_nr_boosted;
667,668c543,544
< 	struct rq		*rq;
< 	struct task_group	*tg;
---
> 	struct rq *rq;
> 	struct task_group *tg;
672,676d547
< static inline bool rt_rq_is_runnable(struct rt_rq *rt_rq)
< {
< 	return rt_rq->rt_queued && rt_rq->rt_nr_running;
< }
< 
680c551
< 	struct rb_root_cached	root;
---
> 	struct rb_root_cached root;
682c553
< 	unsigned int		dl_nr_running;
---
> 	unsigned long dl_nr_running;
688c559
< 	 * the decision whether or not a ready but not running task
---
> 	 * the decision wether or not a ready but not running task
692,693c563,564
< 		u64		curr;
< 		u64		next;
---
> 		u64 curr;
> 		u64 next;
696,697c567,568
< 	unsigned int		dl_nr_migratory;
< 	int			overloaded;
---
> 	unsigned long dl_nr_migratory;
> 	int overloaded;
704c575
< 	struct rb_root_cached	pushable_dl_tasks_root;
---
> 	struct rb_root_cached pushable_dl_tasks_root;
706c577
< 	struct dl_bw		dl_bw;
---
> 	struct dl_bw dl_bw;
713c584
< 	u64			running_bw;
---
> 	u64 running_bw;
724,725c595,596
< 	u64			this_bw;
< 	u64			extra_bw;
---
> 	u64 this_bw;
> 	u64 extra_bw;
731c602
< 	u64			bw_ratio;
---
> 	u64 bw_ratio;
734,762d604
< #ifdef CONFIG_FAIR_GROUP_SCHED
< /* An entity is a task if it doesn't "own" a runqueue */
< #define entity_is_task(se)	(!se->my_q)
< 
< static inline void se_update_runnable(struct sched_entity *se)
< {
< 	if (!entity_is_task(se))
< 		se->runnable_weight = se->my_q->h_nr_running;
< }
< 
< static inline long se_runnable(struct sched_entity *se)
< {
< 	if (entity_is_task(se))
< 		return !!se->on_rq;
< 	else
< 		return se->runnable_weight;
< }
< 
< #else
< #define entity_is_task(se)	1
< 
< static inline void se_update_runnable(struct sched_entity *se) {}
< 
< static inline long se_runnable(struct sched_entity *se)
< {
< 	return !!se->on_rq;
< }
< #endif
< 
764,771d605
< /*
<  * XXX we want to get rid of these helpers and use the full load resolution.
<  */
< static inline long se_weight(struct sched_entity *se)
< {
< 	return scale_load_down(se->load.weight);
< }
< 
778,787d611
< struct perf_domain {
< 	struct em_perf_domain *em_pd;
< 	struct perf_domain *next;
< 	struct rcu_head rcu;
< };
< 
< /* Scheduling group status flags */
< #define SG_OVERLOAD		0x1 /* More than one runnable task on a CPU. */
< #define SG_OVERUTILIZED		0x2 /* One or more CPUs are over-utilized. */
< 
791c615
<  * fully partitioning the member CPUs from any other cpuset. Whenever a new
---
>  * fully partitioning the member cpus from any other cpuset. Whenever a new
797,808c621,625
< 	atomic_t		refcount;
< 	atomic_t		rto_count;
< 	struct rcu_head		rcu;
< 	cpumask_var_t		span;
< 	cpumask_var_t		online;
< 
< 	/*
< 	 * Indicate pullable load on at least one CPU, e.g:
< 	 * - More than one runnable task
< 	 * - Running task is misfit
< 	 */
< 	int			overload;
---
> 	atomic_t refcount;
> 	atomic_t rto_count;
> 	struct rcu_head rcu;
> 	cpumask_var_t span;
> 	cpumask_var_t online;
810,811c627,628
< 	/* Indicate one or more cpus over-utilized (tipping point) */
< 	int			overutilized;
---
> 	/* Indicate more than one runnable task for any CPU */
> 	bool overload;
817,829c634,637
< 	cpumask_var_t		dlo_mask;
< 	atomic_t		dlo_count;
< 	struct dl_bw		dl_bw;
< 	struct cpudl		cpudl;
< 
< 	/*
< 	 * Indicate whether a root_domain's dl_bw has been checked or
< 	 * updated. It's monotonously increasing value.
< 	 *
< 	 * Also, some corner cases, like 'wrap around' is dangerous, but given
< 	 * that u64 is 'big enough'. So that shouldn't be a concern.
< 	 */
< 	u64 visit_gen;
---
> 	cpumask_var_t dlo_mask;
> 	atomic_t dlo_count;
> 	struct dl_bw dl_bw;
> 	struct cpudl cpudl;
835,836c643,644
< 	struct irq_work		rto_push_work;
< 	raw_spinlock_t		rto_lock;
---
> 	struct irq_work rto_push_work;
> 	raw_spinlock_t rto_lock;
838,839c646,647
< 	int			rto_loop;
< 	int			rto_cpu;
---
> 	int rto_loop;
> 	int rto_cpu;
841,842c649,650
< 	atomic_t		rto_loop_next;
< 	atomic_t		rto_loop_start;
---
> 	atomic_t rto_loop_next;
> 	atomic_t rto_loop_start;
848,851c656,657
< 	cpumask_var_t		rto_mask;
< 	struct cpupri		cpupri;
< 
< 	unsigned long		max_cpu_capacity;
---
> 	cpumask_var_t rto_mask;
> 	struct cpupri cpupri;
853,857c659
< 	/*
< 	 * NULL-terminated list of performance domains intersecting with the
< 	 * CPUs of the rd. Protected by RCU.
< 	 */
< 	struct perf_domain __rcu *pd;
---
> 	unsigned long max_cpu_capacity;
859a662,664
> extern struct root_domain def_root_domain;
> extern struct mutex sched_domains_mutex;
> 
863,864d667
< extern void sched_get_rd(struct root_domain *rd);
< extern void sched_put_rd(struct root_domain *rd);
871,914d673
< #ifdef CONFIG_UCLAMP_TASK
< /*
<  * struct uclamp_bucket - Utilization clamp bucket
<  * @value: utilization clamp value for tasks on this clamp bucket
<  * @tasks: number of RUNNABLE tasks on this clamp bucket
<  *
<  * Keep track of how many tasks are RUNNABLE for a given utilization
<  * clamp value.
<  */
< struct uclamp_bucket {
< 	unsigned long value : bits_per(SCHED_CAPACITY_SCALE);
< 	unsigned long tasks : BITS_PER_LONG - bits_per(SCHED_CAPACITY_SCALE);
< };
< 
< /*
<  * struct uclamp_rq - rq's utilization clamp
<  * @value: currently active clamp values for a rq
<  * @bucket: utilization clamp buckets affecting a rq
<  *
<  * Keep track of RUNNABLE tasks on a rq to aggregate their clamp values.
<  * A clamp value is affecting a rq when there is at least one task RUNNABLE
<  * (or actually running) with that value.
<  *
<  * There are up to UCLAMP_CNT possible different clamp values, currently there
<  * are only two: minimum utilization and maximum utilization.
<  *
<  * All utilization clamping values are MAX aggregated, since:
<  * - for util_min: we want to run the CPU at least at the max of the minimum
<  *   utilization required by its currently RUNNABLE tasks.
<  * - for util_max: we want to allow the CPU to run up to the max of the
<  *   maximum utilization allowed by its currently RUNNABLE tasks.
<  *
<  * Since on each system we expect only a limited number of different
<  * utilization clamp values (UCLAMP_BUCKETS), use a simple array to track
<  * the metrics required to compute all the per-rq utilization clamp values.
<  */
< struct uclamp_rq {
< 	unsigned int value;
< 	struct uclamp_bucket bucket[UCLAMP_BUCKETS];
< };
< 
< DECLARE_STATIC_KEY_FALSE(sched_uclamp_used);
< #endif /* CONFIG_UCLAMP_TASK */
< 
924c683
< 	raw_spinlock_t		__lock;
---
> 	raw_spinlock_t lock;
930c689
< 	unsigned int		nr_running;
---
> 	unsigned int nr_running;
932,934c691,692
< 	unsigned int		nr_numa_running;
< 	unsigned int		nr_preferred_running;
< 	unsigned int		numa_migrate_on;
---
> 	unsigned int nr_numa_running;
> 	unsigned int nr_preferred_running;
935a694,695
> 	#define CPU_LOAD_IDX_MAX 5
> 	unsigned long cpu_load[CPU_LOAD_IDX_MAX];
938,940c698
< 	unsigned long		last_blocked_load_update_tick;
< 	unsigned int		has_blocked_load;
< 	call_single_data_t	nohz_csd;
---
> 	unsigned long last_load_update_tick;
942,943c700
< 	unsigned int		nohz_tick_stopped;
< 	atomic_t		nohz_flags;
---
> 	unsigned long nohz_flags;
945,955c702,703
< 
< #ifdef CONFIG_SMP
< 	unsigned int		ttwu_pending;
< #endif
< 	u64			nr_switches;
< 
< #ifdef CONFIG_UCLAMP_TASK
< 	/* Utilization clamp values based on CPU's RUNNABLE tasks */
< 	struct uclamp_rq	uclamp[UCLAMP_CNT] ____cacheline_aligned;
< 	unsigned int		uclamp_flags;
< #define UCLAMP_FLAG_IDLE 0x01
---
> #ifdef CONFIG_NO_HZ_FULL
> 	unsigned long last_sched_tick;
957,960c705,712
< 
< 	struct cfs_rq		cfs;
< 	struct rt_rq		rt;
< 	struct dl_rq		dl;
---
> 	/* capture load from *all* tasks on this cpu: */
> 	struct load_weight load;
> 	unsigned long nr_load_updates;
> 	u64 nr_switches;
> 
> 	struct cfs_rq cfs;
> 	struct rt_rq rt;
> 	struct dl_rq dl;
963,965c715,717
< 	/* list of leaf cfs_rq on this CPU: */
< 	struct list_head	leaf_cfs_rq_list;
< 	struct list_head	*tmp_alone_branch;
---
> 	/* list of leaf cfs_rq on this cpu: */
> 	struct list_head leaf_cfs_rq_list;
> 	struct list_head *tmp_alone_branch;
974c726
< 	unsigned int		nr_uninterruptible;
---
> 	unsigned long nr_uninterruptible;
976,987c728,730
< 	struct task_struct __rcu	*curr;
< 	struct task_struct	*idle;
< 	struct task_struct	*stop;
< 	unsigned long		next_balance;
< 	struct mm_struct	*prev_mm;
< 
< 	unsigned int		clock_update_flags;
< 	u64			clock;
< 	/* Ensure that all clocks are in the same cache line */
< 	u64			clock_task ____cacheline_aligned;
< 	u64			clock_pelt;
< 	unsigned long		lost_idle_time;
---
> 	struct task_struct *curr, *idle, *stop;
> 	unsigned long next_balance;
> 	struct mm_struct *prev_mm;
989,994c732,734
< 	atomic_t		nr_iowait;
< 
< #ifdef CONFIG_SCHED_DEBUG
< 	u64 last_seen_need_resched_ns;
< 	int ticks_without_resched;
< #endif
---
> 	unsigned int clock_update_flags;
> 	u64 clock;
> 	u64 clock_task;
996,998c736
< #ifdef CONFIG_MEMBARRIER
< 	int membarrier_state;
< #endif
---
> 	atomic_t nr_iowait;
1001,1007c739,740
< 	struct root_domain		*rd;
< 	struct sched_domain __rcu	*sd;
< 
< 	unsigned long		cpu_capacity;
< 	unsigned long		cpu_capacity_orig;
< 
< 	struct callback_head	*balance_callback;
---
> 	struct root_domain *rd;
> 	struct sched_domain *sd;
1009,1010c742,743
< 	unsigned char		nohz_idle_balance;
< 	unsigned char		idle_balance;
---
> 	unsigned long cpu_capacity;
> 	unsigned long cpu_capacity_orig;
1012c745
< 	unsigned long		misfit_task_load;
---
> 	struct callback_head *balance_callback;
1013a747
> 	unsigned char idle_balance;
1015,1021c749,754
< 	int			active_balance;
< 	int			push_cpu;
< 	struct cpu_stop_work	active_balance_work;
< 
< 	/* CPU of this runqueue: */
< 	int			cpu;
< 	int			online;
---
> 	int active_balance;
> 	int push_cpu;
> 	struct cpu_stop_work active_balance_work;
> 	/* cpu of this runqueue: */
> 	int cpu;
> 	int online;
1025,1037c758,761
< 	struct sched_avg	avg_rt;
< 	struct sched_avg	avg_dl;
< #ifdef CONFIG_HAVE_SCHED_AVG_IRQ
< 	struct sched_avg	avg_irq;
< #endif
< #ifdef CONFIG_SCHED_THERMAL_PRESSURE
< 	struct sched_avg	avg_thermal;
< #endif
< 	u64			idle_stamp;
< 	u64			avg_idle;
< 
< 	unsigned long		wake_stamp;
< 	u64			wake_avg_idle;
---
> 	u64 rt_avg;
> 	u64 age_stamp;
> 	u64 idle_stamp;
> 	u64 avg_idle;
1040,1043c764
< 	u64			max_idle_balance_cost;
< 
< #ifdef CONFIG_HOTPLUG_CPU
< 	struct rcuwait		hotplug_wait;
---
> 	u64 max_idle_balance_cost;
1045d765
< #endif /* CONFIG_SMP */
1048c768
< 	u64			prev_irq_time;
---
> 	u64 prev_irq_time;
1051c771
< 	u64			prev_steal_time;
---
> 	u64 prev_steal_time;
1054c774
< 	u64			prev_steal_time_rq;
---
> 	u64 prev_steal_time_rq;
1058,1059c778,779
< 	unsigned long		calc_load_update;
< 	long			calc_load_active;
---
> 	unsigned long calc_load_update;
> 	long calc_load_active;
1063c783,784
< 	call_single_data_t	hrtick_csd;
---
> 	int hrtick_csd_pending;
> 	call_single_data_t hrtick_csd;
1065,1066c786
< 	struct hrtimer		hrtick_timer;
< 	ktime_t 		hrtick_time;
---
> 	struct hrtimer hrtick_timer;
1071,1072c791,792
< 	struct sched_info	rq_sched_info;
< 	unsigned long long	rq_cpu_time;
---
> 	struct sched_info rq_sched_info;
> 	unsigned long long rq_cpu_time;
1076c796
< 	unsigned int		yld_count;
---
> 	unsigned int yld_count;
1079,1080c799,800
< 	unsigned int		sched_count;
< 	unsigned int		sched_goidle;
---
> 	unsigned int sched_count;
> 	unsigned int sched_goidle;
1083,1089c803,804
< 	unsigned int		ttwu_count;
< 	unsigned int		ttwu_local;
< #endif
< 
< #ifdef CONFIG_CPU_IDLE
< 	/* Must be inspected within a rcu lock section */
< 	struct cpuidle_state	*idle_state;
---
> 	unsigned int ttwu_count;
> 	unsigned int ttwu_local;
1093c808
< 	unsigned int		nr_pinned;
---
> 	struct llist_head wake_list;
1095,1096d809
< 	unsigned int		push_busy;
< 	struct cpu_stop_work	push_work;
1098,1111c811,813
< #ifdef CONFIG_SCHED_CORE
< 	/* per rq */
< 	struct rq		*core;
< 	struct task_struct	*core_pick;
< 	unsigned int		core_enabled;
< 	unsigned int		core_sched_seq;
< 	struct rb_root		core_tree;
< 
< 	/* shared state -- careful with sched_core_cpu_deactivate() */
< 	unsigned int		core_task_seq;
< 	unsigned int		core_pick_seq;
< 	unsigned long		core_cookie;
< 	unsigned char		core_forceidle;
< 	unsigned int		core_forceidle_seq;
---
> #ifdef CONFIG_CPU_IDLE
> 	/* Must be inspected within a rcu lock section */
> 	struct cpuidle_state *idle_state;
1115,1130d816
< #ifdef CONFIG_FAIR_GROUP_SCHED
< 
< /* CPU runqueue to which this cfs_rq is attached */
< static inline struct rq *rq_of(struct cfs_rq *cfs_rq)
< {
< 	return cfs_rq->rq;
< }
< 
< #else
< 
< static inline struct rq *rq_of(struct cfs_rq *cfs_rq)
< {
< 	return container_of(cfs_rq, struct rq, cfs);
< }
< #endif
< 
1140,1149d825
< #define MDF_PUSH	0x01
< 
< static inline bool is_migration_disabled(struct task_struct *p)
< {
< #ifdef CONFIG_SMP
< 	return p->migration_disabled;
< #else
< 	return false;
< #endif
< }
1151,1344c827
< struct sched_group;
< #ifdef CONFIG_SCHED_CORE
< static inline struct cpumask *sched_group_span(struct sched_group *sg);
< 
< DECLARE_STATIC_KEY_FALSE(__sched_core_enabled);
< 
< static inline bool sched_core_enabled(struct rq *rq)
< {
< 	return static_branch_unlikely(&__sched_core_enabled) && rq->core_enabled;
< }
< 
< static inline bool sched_core_disabled(void)
< {
< 	return !static_branch_unlikely(&__sched_core_enabled);
< }
< 
< /*
<  * Be careful with this function; not for general use. The return value isn't
<  * stable unless you actually hold a relevant rq->__lock.
<  */
< static inline raw_spinlock_t *rq_lockp(struct rq *rq)
< {
< 	if (sched_core_enabled(rq))
< 		return &rq->core->__lock;
< 
< 	return &rq->__lock;
< }
< 
< static inline raw_spinlock_t *__rq_lockp(struct rq *rq)
< {
< 	if (rq->core_enabled)
< 		return &rq->core->__lock;
< 
< 	return &rq->__lock;
< }
< 
< bool cfs_prio_less(struct task_struct *a, struct task_struct *b, bool fi);
< 
< /*
<  * Helpers to check if the CPU's core cookie matches with the task's cookie
<  * when core scheduling is enabled.
<  * A special case is that the task's cookie always matches with CPU's core
<  * cookie if the CPU is in an idle core.
<  */
< static inline bool sched_cpu_cookie_match(struct rq *rq, struct task_struct *p)
< {
< 	/* Ignore cookie match if core scheduler is not enabled on the CPU. */
< 	if (!sched_core_enabled(rq))
< 		return true;
< 
< 	return rq->core->core_cookie == p->core_cookie;
< }
< 
< static inline bool sched_core_cookie_match(struct rq *rq, struct task_struct *p)
< {
< 	bool idle_core = true;
< 	int cpu;
< 
< 	/* Ignore cookie match if core scheduler is not enabled on the CPU. */
< 	if (!sched_core_enabled(rq))
< 		return true;
< 
< 	for_each_cpu(cpu, cpu_smt_mask(cpu_of(rq))) {
< 		if (!available_idle_cpu(cpu)) {
< 			idle_core = false;
< 			break;
< 		}
< 	}
< 
< 	/*
< 	 * A CPU in an idle core is always the best choice for tasks with
< 	 * cookies.
< 	 */
< 	return idle_core || rq->core->core_cookie == p->core_cookie;
< }
< 
< static inline bool sched_group_cookie_match(struct rq *rq,
< 					    struct task_struct *p,
< 					    struct sched_group *group)
< {
< 	int cpu;
< 
< 	/* Ignore cookie match if core scheduler is not enabled on the CPU. */
< 	if (!sched_core_enabled(rq))
< 		return true;
< 
< 	for_each_cpu_and(cpu, sched_group_span(group), p->cpus_ptr) {
< 		if (sched_core_cookie_match(rq, p))
< 			return true;
< 	}
< 	return false;
< }
< 
< extern void queue_core_balance(struct rq *rq);
< 
< static inline bool sched_core_enqueued(struct task_struct *p)
< {
< 	return !RB_EMPTY_NODE(&p->core_node);
< }
< 
< extern void sched_core_enqueue(struct rq *rq, struct task_struct *p);
< extern void sched_core_dequeue(struct rq *rq, struct task_struct *p);
< 
< extern void sched_core_get(void);
< extern void sched_core_put(void);
< 
< extern unsigned long sched_core_alloc_cookie(void);
< extern void sched_core_put_cookie(unsigned long cookie);
< extern unsigned long sched_core_get_cookie(unsigned long cookie);
< extern unsigned long sched_core_update_cookie(struct task_struct *p, unsigned long cookie);
< 
< #else /* !CONFIG_SCHED_CORE */
< 
< static inline bool sched_core_enabled(struct rq *rq)
< {
< 	return false;
< }
< 
< static inline bool sched_core_disabled(void)
< {
< 	return true;
< }
< 
< static inline raw_spinlock_t *rq_lockp(struct rq *rq)
< {
< 	return &rq->__lock;
< }
< 
< static inline raw_spinlock_t *__rq_lockp(struct rq *rq)
< {
< 	return &rq->__lock;
< }
< 
< static inline void queue_core_balance(struct rq *rq)
< {
< }
< 
< static inline bool sched_cpu_cookie_match(struct rq *rq, struct task_struct *p)
< {
< 	return true;
< }
< 
< static inline bool sched_core_cookie_match(struct rq *rq, struct task_struct *p)
< {
< 	return true;
< }
< 
< static inline bool sched_group_cookie_match(struct rq *rq,
< 					    struct task_struct *p,
< 					    struct sched_group *group)
< {
< 	return true;
< }
< #endif /* CONFIG_SCHED_CORE */
< 
< static inline void lockdep_assert_rq_held(struct rq *rq)
< {
< 	lockdep_assert_held(__rq_lockp(rq));
< }
< 
< extern void raw_spin_rq_lock_nested(struct rq *rq, int subclass);
< extern bool raw_spin_rq_trylock(struct rq *rq);
< extern void raw_spin_rq_unlock(struct rq *rq);
< 
< static inline void raw_spin_rq_lock(struct rq *rq)
< {
< 	raw_spin_rq_lock_nested(rq, 0);
< }
< 
< static inline void raw_spin_rq_lock_irq(struct rq *rq)
< {
< 	local_irq_disable();
< 	raw_spin_rq_lock(rq);
< }
< 
< static inline void raw_spin_rq_unlock_irq(struct rq *rq)
< {
< 	raw_spin_rq_unlock(rq);
< 	local_irq_enable();
< }
< 
< static inline unsigned long _raw_spin_rq_lock_irqsave(struct rq *rq)
< {
< 	unsigned long flags;
< 	local_irq_save(flags);
< 	raw_spin_rq_lock(rq);
< 	return flags;
< }
< 
< static inline void raw_spin_rq_unlock_irqrestore(struct rq *rq, unsigned long flags)
< {
< 	raw_spin_rq_unlock(rq);
< 	local_irq_restore(flags);
< }
---
> #ifdef CONFIG_SCHED_SMT
1346,1349c829
< #define raw_spin_rq_lock_irqsave(rq, flags)	\
< do {						\
< 	flags = _raw_spin_rq_lock_irqsave(rq);	\
< } while (0)
---
> extern struct static_key_false sched_smt_present;
1351d830
< #ifdef CONFIG_SCHED_SMT
1372,1424d850
< #ifdef CONFIG_FAIR_GROUP_SCHED
< static inline struct task_struct *task_of(struct sched_entity *se)
< {
< 	SCHED_WARN_ON(!entity_is_task(se));
< 	return container_of(se, struct task_struct, se);
< }
< 
< static inline struct cfs_rq *task_cfs_rq(struct task_struct *p)
< {
< 	return p->se.cfs_rq;
< }
< 
< /* runqueue on which this entity is (to be) queued */
< static inline struct cfs_rq *cfs_rq_of(struct sched_entity *se)
< {
< 	return se->cfs_rq;
< }
< 
< /* runqueue "owned" by this group */
< static inline struct cfs_rq *group_cfs_rq(struct sched_entity *grp)
< {
< 	return grp->my_q;
< }
< 
< #else
< 
< static inline struct task_struct *task_of(struct sched_entity *se)
< {
< 	return container_of(se, struct task_struct, se);
< }
< 
< static inline struct cfs_rq *task_cfs_rq(struct task_struct *p)
< {
< 	return &task_rq(p)->cfs;
< }
< 
< static inline struct cfs_rq *cfs_rq_of(struct sched_entity *se)
< {
< 	struct task_struct *p = task_of(se);
< 	struct rq *rq = task_rq(p);
< 
< 	return &rq->cfs;
< }
< 
< /* runqueue "owned" by this group */
< static inline struct cfs_rq *group_cfs_rq(struct sched_entity *grp)
< {
< 	return NULL;
< }
< #endif
< 
< extern void update_rq_clock(struct rq *rq);
< 
1449c875
<  * to check if %RQCF_UPDATED is set. It'll never be shifted more than
---
>  * to check if %RQCF_UPADTED is set. It'll never be shifted more than
1453,1455c879,881
< #define RQCF_REQ_SKIP		0x01
< #define RQCF_ACT_SKIP		0x02
< #define RQCF_UPDATED		0x04
---
> #define RQCF_REQ_SKIP	0x01
> #define RQCF_ACT_SKIP	0x02
> #define RQCF_UPDATED	0x04
1468c894
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
1476c902
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
1482,1510c908
< /**
<  * By default the decay is the default pelt decay period.
<  * The decay shift can change the decay period in
<  * multiples of 32.
<  *  Decay shift		Decay period(ms)
<  *	0			32
<  *	1			64
<  *	2			128
<  *	3			256
<  *	4			512
<  */
< extern int sched_thermal_decay_shift;
< 
< static inline u64 rq_clock_thermal(struct rq *rq)
< {
< 	return rq_clock_task(rq) >> sched_thermal_decay_shift;
< }
< 
< static inline void rq_clock_skip_update(struct rq *rq)
< {
< 	lockdep_assert_rq_held(rq);
< 	rq->clock_update_flags |= RQCF_REQ_SKIP;
< }
< 
< /*
<  * See rt task throttling, which is the only time a skip
<  * request is canceled.
<  */
< static inline void rq_clock_cancel_skipupdate(struct rq *rq)
---
> static inline void rq_clock_skip_update(struct rq *rq, bool skip)
1512,1513c910,914
< 	lockdep_assert_rq_held(rq);
< 	rq->clock_update_flags &= ~RQCF_REQ_SKIP;
---
> 	lockdep_assert_held(&rq->lock);
> 	if (skip)
> 		rq->clock_update_flags |= RQCF_REQ_SKIP;
> 	else
> 		rq->clock_update_flags &= ~RQCF_REQ_SKIP;
1529,1540d929
< extern struct callback_head balance_push_callback;
< 
< /*
<  * Lockdep annotation that avoids accidental unlocks; it's like a
<  * sticky/continuous lockdep_assert_held().
<  *
<  * This avoids code that has access to 'struct rq *rq' (basically everything in
<  * the scheduler) from accidentally unlocking the rq if they do not also have a
<  * copy of the (on-stack) 'struct rq_flags rf'.
<  *
<  * Also see Documentation/locking/lockdep-design.rst.
<  */
1543c932
< 	rf->cookie = lockdep_pin_lock(__rq_lockp(rq));
---
> 	rf->cookie = lockdep_pin_lock(&rq->lock);
1548,1550d936
< #ifdef CONFIG_SMP
< 	SCHED_WARN_ON(rq->balance_callback && rq->balance_callback != &balance_push_callback);
< #endif
1561c947
< 	lockdep_unpin_lock(__rq_lockp(rq), rf->cookie);
---
> 	lockdep_unpin_lock(&rq->lock, rf->cookie);
1566c952
< 	lockdep_repin_lock(__rq_lockp(rq), rf->cookie);
---
> 	lockdep_repin_lock(&rq->lock, rf->cookie);
1576,1667d961
< struct rq *__task_rq_lock(struct task_struct *p, struct rq_flags *rf)
< 	__acquires(rq->lock);
< 
< struct rq *task_rq_lock(struct task_struct *p, struct rq_flags *rf)
< 	__acquires(p->pi_lock)
< 	__acquires(rq->lock);
< 
< static inline void __task_rq_unlock(struct rq *rq, struct rq_flags *rf)
< 	__releases(rq->lock)
< {
< 	rq_unpin_lock(rq, rf);
< 	raw_spin_rq_unlock(rq);
< }
< 
< static inline void
< task_rq_unlock(struct rq *rq, struct task_struct *p, struct rq_flags *rf)
< 	__releases(rq->lock)
< 	__releases(p->pi_lock)
< {
< 	rq_unpin_lock(rq, rf);
< 	raw_spin_rq_unlock(rq);
< 	raw_spin_unlock_irqrestore(&p->pi_lock, rf->flags);
< }
< 
< static inline void
< rq_lock_irqsave(struct rq *rq, struct rq_flags *rf)
< 	__acquires(rq->lock)
< {
< 	raw_spin_rq_lock_irqsave(rq, rf->flags);
< 	rq_pin_lock(rq, rf);
< }
< 
< static inline void
< rq_lock_irq(struct rq *rq, struct rq_flags *rf)
< 	__acquires(rq->lock)
< {
< 	raw_spin_rq_lock_irq(rq);
< 	rq_pin_lock(rq, rf);
< }
< 
< static inline void
< rq_lock(struct rq *rq, struct rq_flags *rf)
< 	__acquires(rq->lock)
< {
< 	raw_spin_rq_lock(rq);
< 	rq_pin_lock(rq, rf);
< }
< 
< static inline void
< rq_relock(struct rq *rq, struct rq_flags *rf)
< 	__acquires(rq->lock)
< {
< 	raw_spin_rq_lock(rq);
< 	rq_repin_lock(rq, rf);
< }
< 
< static inline void
< rq_unlock_irqrestore(struct rq *rq, struct rq_flags *rf)
< 	__releases(rq->lock)
< {
< 	rq_unpin_lock(rq, rf);
< 	raw_spin_rq_unlock_irqrestore(rq, rf->flags);
< }
< 
< static inline void
< rq_unlock_irq(struct rq *rq, struct rq_flags *rf)
< 	__releases(rq->lock)
< {
< 	rq_unpin_lock(rq, rf);
< 	raw_spin_rq_unlock_irq(rq);
< }
< 
< static inline void
< rq_unlock(struct rq *rq, struct rq_flags *rf)
< 	__releases(rq->lock)
< {
< 	rq_unpin_lock(rq, rf);
< 	raw_spin_rq_unlock(rq);
< }
< 
< static inline struct rq *
< this_rq_lock_irq(struct rq_flags *rf)
< 	__acquires(rq->lock)
< {
< 	struct rq *rq;
< 
< 	local_irq_disable();
< 	rq = this_rq();
< 	rq_lock(rq, rf);
< 	return rq;
< }
< 
1676a971,973
> #endif
> 
> #ifdef CONFIG_NUMA
1680d976
< extern int sched_numa_find_closest(const struct cpumask *cpus, int cpu);
1685,1688d980
< static inline int sched_numa_find_closest(const struct cpumask *cpus, int cpu)
< {
< 	return nr_cpu_ids;
< }
1701,1708c993
< extern int migrate_swap(struct task_struct *p, struct task_struct *t,
< 			int cpu, int scpu);
< extern void init_numa_balancing(unsigned long clone_flags, struct task_struct *p);
< #else
< static inline void
< init_numa_balancing(unsigned long clone_flags, struct task_struct *p)
< {
< }
---
> extern int migrate_swap(struct task_struct *, struct task_struct *);
1718c1003
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
1720c1005
< 	if (unlikely(head->next || rq->balance_callback == &balance_push_callback))
---
> 	if (unlikely(head->next))
1727a1013,1014
> extern void sched_ttwu_pending(void);
> 
1734c1021
<  * See destroy_sched_domains: call_rcu for details.
---
>  * See detach_destroy_domains: synchronize_sched for details.
1742a1030,1031
> #define for_each_lower_domain(sd) for (; sd; sd = sd->child)
> 
1745c1034
<  * @cpu:	The CPU whose highest level of sched domain is to
---
>  * @cpu:	The cpu whose highest level of sched domain is to
1748c1037
<  *		for the given CPU.
---
>  *		for the given cpu.
1750c1039
<  * Returns the highest sched_domain of a CPU which contains the given flag.
---
>  * Returns the highest sched_domain of a cpu which contains the given flag.
1777c1066
< DECLARE_PER_CPU(struct sched_domain __rcu *, sd_llc);
---
> DECLARE_PER_CPU(struct sched_domain *, sd_llc);
1780,1784c1069,1071
< DECLARE_PER_CPU(struct sched_domain_shared __rcu *, sd_llc_shared);
< DECLARE_PER_CPU(struct sched_domain __rcu *, sd_numa);
< DECLARE_PER_CPU(struct sched_domain __rcu *, sd_asym_packing);
< DECLARE_PER_CPU(struct sched_domain __rcu *, sd_asym_cpucapacity);
< extern struct static_key_false sched_asym_cpucapacity;
---
> DECLARE_PER_CPU(struct sched_domain_shared *, sd_llc_shared);
> DECLARE_PER_CPU(struct sched_domain *, sd_numa);
> DECLARE_PER_CPU(struct sched_domain *, sd_asym);
1787c1074
< 	atomic_t		ref;
---
> 	atomic_t ref;
1792,1796c1079,1082
< 	unsigned long		capacity;
< 	unsigned long		min_capacity;		/* Min per-CPU capacity in group */
< 	unsigned long		max_capacity;		/* Max per-CPU capacity in group */
< 	unsigned long		next_update;
< 	int			imbalance;		/* XXX unrelated to capacity but shared group state */
---
> 	unsigned long capacity;
> 	unsigned long min_capacity; /* Min per-CPU capacity in group */
> 	unsigned long next_update;
> 	int imbalance; /* XXX unrelated to capacity but shared group state */
1799c1085
< 	int			id;
---
> 	int id;
1802c1088
< 	unsigned long		cpumask[];		/* Balance mask */
---
> 	unsigned long cpumask[0]; /* balance mask */
1806,1807c1092,1093
< 	struct sched_group	*next;			/* Must be a circular list */
< 	atomic_t		ref;
---
> 	struct sched_group *next;	/* Must be a circular list */
> 	atomic_t ref;
1809c1095
< 	unsigned int		group_weight;
---
> 	unsigned int group_weight;
1811c1097
< 	int			asym_prefer_cpu;	/* CPU of highest priority in group */
---
> 	int asym_prefer_cpu;		/* cpu of highest priority in group */
1820c1106
< 	unsigned long		cpumask[];
---
> 	unsigned long cpumask[0];
1837,1838c1123,1124
<  * group_first_cpu - Returns the first CPU in the cpumask of a sched_group.
<  * @group: The group whose first CPU is to be returned.
---
>  * group_first_cpu - Returns the first cpu in the cpumask of a sched_group.
>  * @group: The group whose first cpu is to be returned.
1847,1848c1133,1134
< #ifdef CONFIG_SCHED_DEBUG
< void update_sched_domain_debugfs(void);
---
> #if defined(CONFIG_SCHED_DEBUG) && defined(CONFIG_SYSCTL)
> void register_sched_domain_sysctl(void);
1849a1136
> void unregister_sched_domain_sysctl(void);
1851c1138
< static inline void update_sched_domain_debugfs(void)
---
> static inline void register_sched_domain_sysctl(void)
1856a1144,1146
> static inline void unregister_sched_domain_sysctl(void)
> {
> }
1859c1149
< extern int sched_update_scaling(void);
---
> #else
1861c1151
< extern void flush_smp_call_function_from_idle(void);
---
> static inline void sched_ttwu_pending(void) { }
1863,1865c1153
< #else /* !CONFIG_SMP: */
< static inline void flush_smp_call_function_from_idle(void) { }
< #endif
---
> #endif /* CONFIG_SMP */
1925c1213
< 	 * successfully executed on another CPU. We must ensure that updates of
---
> 	 * successfuly executed on another CPU. We must ensure that updates of
1930c1218
< 	WRITE_ONCE(p->cpu, cpu);
---
> 	p->cpu = cpu;
1932c1220
< 	WRITE_ONCE(task_thread_info(p)->cpu, cpu);
---
> 	task_thread_info(p)->cpu = cpu;
1958c1246
< #ifdef CONFIG_SCHED_DEBUG
---
> #if defined(CONFIG_SCHED_DEBUG) && defined(HAVE_JUMP_LABEL)
1966d1253
< #ifdef CONFIG_JUMP_LABEL
1979,1985c1266
< #else /* !CONFIG_JUMP_LABEL */
< 
< #define sched_feat(x) (sysctl_sched_features & (1UL << __SCHED_FEAT_##x))
< 
< #endif /* CONFIG_JUMP_LABEL */
< 
< #else /* !SCHED_DEBUG */
---
> #else /* !(SCHED_DEBUG && HAVE_JUMP_LABEL) */
1999c1280
< #define sched_feat(x) !!(sysctl_sched_features & (1UL << __SCHED_FEAT_##x))
---
> #define sched_feat(x) (sysctl_sched_features & (1UL << __SCHED_FEAT_##x))
2001c1282
< #endif /* SCHED_DEBUG */
---
> #endif /* SCHED_DEBUG && HAVE_JUMP_LABEL */
2040c1321
< 	return READ_ONCE(p->on_rq) == TASK_ON_RQ_MIGRATING;
---
> 	return p->on_rq == TASK_ON_RQ_MIGRATING;
2043,2046c1324,1329
< /* Wake flags. The first three directly map to some SD flag value */
< #define WF_EXEC     0x02 /* Wakeup after exec; maps to SD_BALANCE_EXEC */
< #define WF_FORK     0x04 /* Wakeup after fork; maps to SD_BALANCE_FORK */
< #define WF_TTWU     0x08 /* Wakeup;            maps to SD_BALANCE_WAKE */
---
> #ifndef prepare_arch_switch
> # define prepare_arch_switch(next)	do { } while (0)
> #endif
> #ifndef finish_arch_post_lock_switch
> # define finish_arch_post_lock_switch()	do { } while (0)
> #endif
2048,2050c1331,1341
< #define WF_SYNC     0x10 /* Waker goes to sleep after wakeup */
< #define WF_MIGRATED 0x20 /* Internal use, task got migrated */
< #define WF_ON_CPU   0x40 /* Wakee is on_cpu */
---
> static inline void prepare_lock_switch(struct rq *rq, struct task_struct *next)
> {
> #ifdef CONFIG_SMP
> 	/*
> 	 * We can optimise this out completely for !SMP, because the
> 	 * SMP rebalancing from interrupt is the only thing that cares
> 	 * here.
> 	 */
> 	next->on_cpu = 1;
> #endif
> }
2051a1343,1344
> static inline void finish_lock_switch(struct rq *rq, struct task_struct *prev)
> {
2053,2055c1346,1356
< static_assert(WF_EXEC == SD_BALANCE_EXEC);
< static_assert(WF_FORK == SD_BALANCE_FORK);
< static_assert(WF_TTWU == SD_BALANCE_WAKE);
---
> 	/*
> 	 * After ->on_cpu is cleared, the task can be moved to a different CPU.
> 	 * We must ensure this doesn't happen until the switch is completely
> 	 * finished.
> 	 *
> 	 * In particular, the load of prev->state in finish_task_switch() must
> 	 * happen before this.
> 	 *
> 	 * Pairs with the smp_cond_load_acquire() in try_to_wake_up().
> 	 */
> 	smp_store_release(&prev->on_cpu, 0);
2056a1358,1377
> #ifdef CONFIG_DEBUG_SPINLOCK
> 	/* this is a valid case when another task releases the spinlock */
> 	rq->lock.owner = current;
> #endif
> 	/*
> 	 * If we are tracking spinlock dependencies then we have to
> 	 * fix up the runqueue lock - which gets 'carried over' from
> 	 * prev into current:
> 	 */
> 	spin_acquire(&rq->lock.dep_map, 0, 0, _THIS_IP_);
> 
> 	raw_spin_unlock_irq(&rq->lock);
> }
> 
> /*
>  * wake flags
>  */
> #define WF_SYNC		0x01		/* waker goes to sleep after wakeup */
> #define WF_FORK		0x02		/* child wakeup after fork */
> #define WF_MIGRATED	0x4		/* internal use, task got migrated */
2067,2068c1388,1389
< #define WEIGHT_IDLEPRIO		3
< #define WMULT_IDLEPRIO		1431655765
---
> #define WEIGHT_IDLEPRIO                3
> #define WMULT_IDLEPRIO         1431655765
2070,2071c1391,1392
< extern const int		sched_prio_to_weight[40];
< extern const u32		sched_prio_to_wmult[40];
---
> extern const int sched_prio_to_weight[40];
> extern const u32 sched_prio_to_wmult[40];
2093,2095c1414,1416
< #define DEQUEUE_SAVE		0x02 /* Matches ENQUEUE_RESTORE */
< #define DEQUEUE_MOVE		0x04 /* Matches ENQUEUE_MOVE */
< #define DEQUEUE_NOCLOCK		0x08 /* Matches ENQUEUE_NOCLOCK */
---
> #define DEQUEUE_SAVE		0x02 /* matches ENQUEUE_RESTORE */
> #define DEQUEUE_MOVE		0x04 /* matches ENQUEUE_MOVE */
> #define DEQUEUE_NOCLOCK		0x08 /* matches ENQUEUE_NOCLOCK */
2113,2116c1434
< 
< #ifdef CONFIG_UCLAMP_TASK
< 	int uclamp_enabled;
< #endif
---
> 	const struct sched_class *next;
2120,2123c1438,1439
< 	void (*yield_task)   (struct rq *rq);
< 	bool (*yield_to_task)(struct rq *rq, struct task_struct *p);
< 
< 	void (*check_preempt_curr)(struct rq *rq, struct task_struct *p, int flags);
---
> 	void (*yield_task) (struct rq *rq);
> 	bool (*yield_to_task) (struct rq *rq, struct task_struct *p, bool preempt);
2125c1441
< 	struct task_struct *(*pick_next_task)(struct rq *rq);
---
> 	void (*check_preempt_curr) (struct rq *rq, struct task_struct *p, int flags);
2127,2128c1443,1454
< 	void (*put_prev_task)(struct rq *rq, struct task_struct *p);
< 	void (*set_next_task)(struct rq *rq, struct task_struct *p, bool first);
---
> 	/*
> 	 * It is the responsibility of the pick_next_task() method that will
> 	 * return the next task to call put_prev_task() on the @prev task or
> 	 * something equivalent.
> 	 *
> 	 * May return RETRY_TASK when it finds a higher prio class has runnable
> 	 * tasks.
> 	 */
> 	struct task_struct * (*pick_next_task) (struct rq *rq,
> 						struct task_struct *prev,
> 						struct rq_flags *rf);
> 	void (*put_prev_task) (struct rq *rq, struct task_struct *p);
2131,2134c1457,1458
< 	int (*balance)(struct rq *rq, struct task_struct *prev, struct rq_flags *rf);
< 	int  (*select_task_rq)(struct task_struct *p, int task_cpu, int flags);
< 
< 	struct task_struct * (*pick_task)(struct rq *rq);
---
> 	int  (*select_task_rq)(struct task_struct *p, int task_cpu, int sd_flag, int flags);
> 	void (*migrate_task_rq)(struct task_struct *p);
2136,2138c1460
< 	void (*migrate_task_rq)(struct task_struct *p, int new_cpu);
< 
< 	void (*task_woken)(struct rq *this_rq, struct task_struct *task);
---
> 	void (*task_woken) (struct rq *this_rq, struct task_struct *task);
2141,2142c1463
< 				 const struct cpumask *newmask,
< 				 u32 flags);
---
> 				 const struct cpumask *newmask);
2146,2147d1466
< 
< 	struct rq *(*find_lock_rq)(struct task_struct *p, struct rq *rq);
2150,2152c1469,1472
< 	void (*task_tick)(struct rq *rq, struct task_struct *p, int queued);
< 	void (*task_fork)(struct task_struct *p);
< 	void (*task_dead)(struct task_struct *p);
---
> 	void (*set_curr_task) (struct rq *rq);
> 	void (*task_tick) (struct rq *rq, struct task_struct *p, int queued);
> 	void (*task_fork) (struct task_struct *p);
> 	void (*task_dead) (struct task_struct *p);
2156c1476
< 	 * cannot assume the switched_from/switched_to pair is serialized by
---
> 	 * cannot assume the switched_from/switched_to pair is serliazed by
2159,2160c1479,1480
< 	void (*switched_from)(struct rq *this_rq, struct task_struct *task);
< 	void (*switched_to)  (struct rq *this_rq, struct task_struct *task);
---
> 	void (*switched_from) (struct rq *this_rq, struct task_struct *task);
> 	void (*switched_to) (struct rq *this_rq, struct task_struct *task);
2162c1482
< 			      int oldprio);
---
> 			     int oldprio);
2164,2165c1484,1485
< 	unsigned int (*get_rr_interval)(struct rq *rq,
< 					struct task_struct *task);
---
> 	unsigned int (*get_rr_interval) (struct rq *rq,
> 					 struct task_struct *task);
2167c1487
< 	void (*update_curr)(struct rq *rq);
---
> 	void (*update_curr) (struct rq *rq);
2169,2170c1489,1490
< #define TASK_SET_GROUP		0
< #define TASK_MOVE_GROUP		1
---
> #define TASK_SET_GROUP  0
> #define TASK_MOVE_GROUP	1
2173c1493
< 	void (*task_change_group)(struct task_struct *p, int type);
---
> 	void (*task_change_group) (struct task_struct *p, int type);
2179d1498
< 	WARN_ON_ONCE(rq->curr != prev);
2183c1502
< static inline void set_next_task(struct rq *rq, struct task_struct *next)
---
> static inline void set_curr_task(struct rq *rq, struct task_struct *curr)
2185c1504
< 	next->sched_class->set_next_task(rq, next, false);
---
> 	curr->sched_class->set_curr_task(rq);
2188,2211c1507,1511
< 
< /*
<  * Helper to define a sched_class instance; each one is placed in a separate
<  * section which is ordered by the linker script:
<  *
<  *   include/asm-generic/vmlinux.lds.h
<  *
<  * Also enforce alignment on the instance, not the type, to guarantee layout.
<  */
< #define DEFINE_SCHED_CLASS(name) \
< const struct sched_class name##_sched_class \
< 	__aligned(__alignof__(struct sched_class)) \
< 	__section("__" #name "_sched_class")
< 
< /* Defined in include/asm-generic/vmlinux.lds.h */
< extern struct sched_class __begin_sched_classes[];
< extern struct sched_class __end_sched_classes[];
< 
< #define sched_class_highest (__end_sched_classes - 1)
< #define sched_class_lowest  (__begin_sched_classes - 1)
< 
< #define for_class_range(class, _from, _to) \
< 	for (class = (_from); class != (_to); class--)
< 
---
> #ifdef CONFIG_SMP
> #define sched_class_highest (&stop_sched_class)
> #else
> #define sched_class_highest (&dl_sched_class)
> #endif
2213c1513
< 	for_class_range(class, sched_class_highest, sched_class_lowest)
---
>    for (class = sched_class_highest; class; class = class->next)
2221,2247d1520
< static inline bool sched_stop_runnable(struct rq *rq)
< {
< 	return rq->stop && task_on_rq_queued(rq->stop);
< }
< 
< static inline bool sched_dl_runnable(struct rq *rq)
< {
< 	return rq->dl.dl_nr_running > 0;
< }
< 
< static inline bool sched_rt_runnable(struct rq *rq)
< {
< 	return rq->rt.rt_queued > 0;
< }
< 
< static inline bool sched_fair_runnable(struct rq *rq)
< {
< 	return rq->cfs.nr_running > 0;
< }
< 
< extern struct task_struct *pick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf);
< extern struct task_struct *pick_next_task_idle(struct rq *rq);
< 
< #define SCA_CHECK		0x01
< #define SCA_MIGRATE_DISABLE	0x02
< #define SCA_MIGRATE_ENABLE	0x04
< #define SCA_USER		0x08
2255,2276c1528
< extern void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_mask, u32 flags);
< 
< static inline struct task_struct *get_push_task(struct rq *rq)
< {
< 	struct task_struct *p = rq->curr;
< 
< 	lockdep_assert_rq_held(rq);
< 
< 	if (rq->push_busy)
< 		return NULL;
< 
< 	if (p->nr_cpus_allowed == 1)
< 		return NULL;
< 
< 	if (p->migration_disabled)
< 		return NULL;
< 
< 	rq->push_busy = true;
< 	return get_task_struct(p);
< }
< 
< extern int push_cpu_stop(void *arg);
---
> extern void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_mask);
2290d1541
< 
2326a1578
> extern void init_dl_rq_bw_ratio(struct dl_rq *dl_rq);
2328,2332c1580,1582
< #define BW_SHIFT		20
< #define BW_UNIT			(1 << BW_SHIFT)
< #define RATIO_SHIFT		8
< #define MAX_BW_BITS		(64 - BW_SHIFT)
< #define MAX_BW			((1ULL << MAX_BW_BITS) - 1)
---
> #define BW_SHIFT	20
> #define BW_UNIT		(1 << BW_SHIFT)
> #define RATIO_SHIFT	8
2336c1586
< extern void post_init_entity_util_avg(struct task_struct *p);
---
> extern void post_init_entity_util_avg(struct sched_entity *se);
2340d1589
< extern int __init sched_tick_offload_init(void);
2349c1598,1603
< 	int cpu = cpu_of(rq);
---
> 	int cpu;
> 
> 	if (!tick_nohz_full_enabled())
> 		return;
> 
> 	cpu = cpu_of(rq);
2360d1613
< static inline int sched_tick_offload_init(void) { return 0; }
2369,2371d1621
< 	if (trace_sched_update_nr_running_tp_enabled()) {
< 		call_trace_sched_update_nr_running(rq, count);
< 	}
2373d1622
< #ifdef CONFIG_SMP
2375,2377c1624,1626
< 		if (!READ_ONCE(rq->rd->overload))
< 			WRITE_ONCE(rq->rd->overload, 1);
< 	}
---
> #ifdef CONFIG_SMP
> 		if (!rq->rd->overload)
> 			rq->rd->overload = true;
2378a1628
> 	}
2386,2389d1635
< 	if (trace_sched_update_nr_running_tp_enabled()) {
< 		call_trace_sched_update_nr_running(rq, -count);
< 	}
< 
2393a1640,1648
> static inline void rq_last_tick_reset(struct rq *rq)
> {
> #ifdef CONFIG_NO_HZ_FULL
> 	rq->last_sched_tick = jiffies;
> #endif
> }
> 
> extern void update_rq_clock(struct rq *rq);
> 
2398a1654
> extern const_debug unsigned int sysctl_sched_time_avg;
2402,2415c1658,1661
< #ifdef CONFIG_SCHED_DEBUG
< extern unsigned int sysctl_sched_latency;
< extern unsigned int sysctl_sched_min_granularity;
< extern unsigned int sysctl_sched_wakeup_granularity;
< extern int sysctl_resched_latency_warn_ms;
< extern int sysctl_resched_latency_warn_once;
< 
< extern unsigned int sysctl_sched_tunable_scaling;
< 
< extern unsigned int sysctl_numa_balancing_scan_delay;
< extern unsigned int sysctl_numa_balancing_scan_period_min;
< extern unsigned int sysctl_numa_balancing_scan_period_max;
< extern unsigned int sysctl_numa_balancing_scan_size;
< #endif
---
> static inline u64 sched_avg_period(void)
> {
> 	return (u64)sysctl_sched_time_avg * NSEC_PER_MSEC / 2;
> }
2425a1672,1673
> 	if (!sched_feat(HRTICK))
> 		return 0;
2431c1679,1683
< static inline int hrtick_enabled_fair(struct rq *rq)
---
> void hrtick_start(struct rq *rq, u64 delay);
> 
> #else
> 
> static inline int hrtick_enabled(struct rq *rq)
2433,2435c1685
< 	if (!sched_feat(HRTICK))
< 		return 0;
< 	return hrtick_enabled(rq);
---
> 	return 0;
2438c1688,1695
< static inline int hrtick_enabled_dl(struct rq *rq)
---
> #endif /* CONFIG_SCHED_HRTICK */
> 
> #ifdef CONFIG_SMP
> extern void sched_avg_update(struct rq *rq);
> 
> #ifndef arch_scale_freq_capacity
> static __always_inline
> unsigned long arch_scale_freq_capacity(struct sched_domain *sd, int cpu)
2440,2442c1697
< 	if (!sched_feat(HRTICK_DL))
< 		return 0;
< 	return hrtick_enabled(rq);
---
> 	return SCHED_CAPACITY_SCALE;
2443a1699
> #endif
2445c1701,1706
< void hrtick_start(struct rq *rq, u64 delay);
---
> #ifndef arch_scale_cpu_capacity
> static __always_inline
> unsigned long arch_scale_cpu_capacity(struct sched_domain *sd, int cpu)
> {
> 	if (sd && (sd->flags & SD_SHARE_CPUCAPACITY) && (sd->span_weight > 1))
> 		return sd->smt_gain / sd->span_weight;
2447c1708,1710
< #else
---
> 	return SCHED_CAPACITY_SCALE;
> }
> #endif
2449c1712
< static inline int hrtick_enabled_fair(struct rq *rq)
---
> static inline void sched_rt_avg_update(struct rq *rq, u64 rt_delta)
2451c1714,1715
< 	return 0;
---
> 	rq->rt_avg += rt_delta * arch_scale_freq_capacity(NULL, cpu_of(rq));
> 	sched_avg_update(rq);
2452a1717,1727
> #else
> static inline void sched_rt_avg_update(struct rq *rq, u64 rt_delta) { }
> static inline void sched_avg_update(struct rq *rq) { }
> #endif
> 
> struct rq *__task_rq_lock(struct task_struct *p, struct rq_flags *rf)
> 	__acquires(rq->lock);
> 
> struct rq *task_rq_lock(struct task_struct *p, struct rq_flags *rf)
> 	__acquires(p->pi_lock)
> 	__acquires(rq->lock);
2454c1729,1730
< static inline int hrtick_enabled_dl(struct rq *rq)
---
> static inline void __task_rq_unlock(struct rq *rq, struct rq_flags *rf)
> 	__releases(rq->lock)
2456c1732,1733
< 	return 0;
---
> 	rq_unpin_lock(rq, rf);
> 	raw_spin_unlock(&rq->lock);
2459c1736,1739
< static inline int hrtick_enabled(struct rq *rq)
---
> static inline void
> task_rq_unlock(struct rq *rq, struct task_struct *p, struct rq_flags *rf)
> 	__releases(rq->lock)
> 	__releases(p->pi_lock)
2461c1741,1743
< 	return 0;
---
> 	rq_unpin_lock(rq, rf);
> 	raw_spin_unlock(&rq->lock);
> 	raw_spin_unlock_irqrestore(&p->pi_lock, rf->flags);
2464c1746,1752
< #endif /* CONFIG_SCHED_HRTICK */
---
> static inline void
> rq_lock_irqsave(struct rq *rq, struct rq_flags *rf)
> 	__acquires(rq->lock)
> {
> 	raw_spin_lock_irqsave(&rq->lock, rf->flags);
> 	rq_pin_lock(rq, rf);
> }
2466,2468c1754,1756
< #ifndef arch_scale_freq_tick
< static __always_inline
< void arch_scale_freq_tick(void)
---
> static inline void
> rq_lock_irq(struct rq *rq, struct rq_flags *rf)
> 	__acquires(rq->lock)
2469a1758,1759
> 	raw_spin_lock_irq(&rq->lock);
> 	rq_pin_lock(rq, rf);
2471d1760
< #endif
2473,2485c1762,1764
< #ifndef arch_scale_freq_capacity
< /**
<  * arch_scale_freq_capacity - get the frequency scale factor of a given CPU.
<  * @cpu: the CPU in question.
<  *
<  * Return: the frequency scale factor normalized against SCHED_CAPACITY_SCALE, i.e.
<  *
<  *     f_curr
<  *     ------ * SCHED_CAPACITY_SCALE
<  *     f_max
<  */
< static __always_inline
< unsigned long arch_scale_freq_capacity(int cpu)
---
> static inline void
> rq_lock(struct rq *rq, struct rq_flags *rf)
> 	__acquires(rq->lock)
2487c1766,1767
< 	return SCHED_CAPACITY_SCALE;
---
> 	raw_spin_lock(&rq->lock);
> 	rq_pin_lock(rq, rf);
2489d1768
< #endif
2490a1770,1776
> static inline void
> rq_relock(struct rq *rq, struct rq_flags *rf)
> 	__acquires(rq->lock)
> {
> 	raw_spin_lock(&rq->lock);
> 	rq_repin_lock(rq, rf);
> }
2492c1778,1784
< #ifdef CONFIG_SMP
---
> static inline void
> rq_unlock_irqrestore(struct rq *rq, struct rq_flags *rf)
> 	__releases(rq->lock)
> {
> 	rq_unpin_lock(rq, rf);
> 	raw_spin_unlock_irqrestore(&rq->lock, rf->flags);
> }
2494c1786,1788
< static inline bool rq_order_less(struct rq *rq1, struct rq *rq2)
---
> static inline void
> rq_unlock_irq(struct rq *rq, struct rq_flags *rf)
> 	__releases(rq->lock)
2496,2511c1790,1792
< #ifdef CONFIG_SCHED_CORE
< 	/*
< 	 * In order to not have {0,2},{1,3} turn into into an AB-BA,
< 	 * order by core-id first and cpu-id second.
< 	 *
< 	 * Notably:
< 	 *
< 	 *	double_rq_lock(0,3); will take core-0, core-1 lock
< 	 *	double_rq_lock(1,2); will take core-1, core-0 lock
< 	 *
< 	 * when only cpu-id is considered.
< 	 */
< 	if (rq1->core->cpu < rq2->core->cpu)
< 		return true;
< 	if (rq1->core->cpu > rq2->core->cpu)
< 		return false;
---
> 	rq_unpin_lock(rq, rf);
> 	raw_spin_unlock_irq(&rq->lock);
> }
2513,2517c1794,1799
< 	/*
< 	 * __sched_core_flip() relies on SMT having cpu-id lock order.
< 	 */
< #endif
< 	return rq1->cpu < rq2->cpu;
---
> static inline void
> rq_unlock(struct rq *rq, struct rq_flags *rf)
> 	__releases(rq->lock)
> {
> 	rq_unpin_lock(rq, rf);
> 	raw_spin_unlock(&rq->lock);
2520c1802,1803
< extern void double_rq_lock(struct rq *rq1, struct rq *rq2);
---
> #ifdef CONFIG_SMP
> #ifdef CONFIG_PREEMPT
2522c1805
< #ifdef CONFIG_PREEMPTION
---
> static inline void double_rq_lock(struct rq *rq1, struct rq *rq2);
2537c1820
< 	raw_spin_rq_unlock(this_rq);
---
> 	raw_spin_unlock(&this_rq->lock);
2547,2548c1830,1831
<  * already in proper order on entry.  This favors lower CPU-ids and will
<  * grant the double lock to lower CPUs over higher ids under contention,
---
>  * already in proper order on entry.  This favors lower cpu-ids and will
>  * grant the double lock to lower cpus over higher ids under contention,
2556,2560c1839
< 	if (__rq_lockp(this_rq) == __rq_lockp(busiest))
< 		return 0;
< 
< 	if (likely(raw_spin_rq_trylock(busiest)))
< 		return 0;
---
> 	int ret = 0;
2562,2564c1841,1850
< 	if (rq_order_less(this_rq, busiest)) {
< 		raw_spin_rq_lock_nested(busiest, SINGLE_DEPTH_NESTING);
< 		return 0;
---
> 	if (unlikely(!raw_spin_trylock(&busiest->lock))) {
> 		if (busiest < this_rq) {
> 			raw_spin_unlock(&this_rq->lock);
> 			raw_spin_lock(&busiest->lock);
> 			raw_spin_lock_nested(&this_rq->lock,
> 					      SINGLE_DEPTH_NESTING);
> 			ret = 1;
> 		} else
> 			raw_spin_lock_nested(&busiest->lock,
> 					      SINGLE_DEPTH_NESTING);
2566,2570c1852
< 
< 	raw_spin_rq_unlock(this_rq);
< 	double_rq_lock(this_rq, busiest);
< 
< 	return 1;
---
> 	return ret;
2573c1855
< #endif /* CONFIG_PREEMPTION */
---
> #endif /* CONFIG_PREEMPT */
2580c1862,1866
< 	lockdep_assert_irqs_disabled();
---
> 	if (unlikely(!irqs_disabled())) {
> 		/* printk() doesn't work good under rq->lock */
> 		raw_spin_unlock(&this_rq->lock);
> 		BUG_ON(1);
> 	}
2588,2590c1874,1875
< 	if (__rq_lockp(this_rq) != __rq_lockp(busiest))
< 		raw_spin_rq_unlock(busiest);
< 	lock_set_subclass(&__rq_lockp(this_rq)->dep_map, 0, _RET_IP_);
---
> 	raw_spin_unlock(&busiest->lock);
> 	lock_set_subclass(&this_rq->lock.dep_map, 0, _RET_IP_);
2620a1906,1930
>  * double_rq_lock - safely lock two runqueues
>  *
>  * Note this does not disable interrupts like task_rq_lock,
>  * you need to do so manually before calling.
>  */
> static inline void double_rq_lock(struct rq *rq1, struct rq *rq2)
> 	__acquires(rq1->lock)
> 	__acquires(rq2->lock)
> {
> 	BUG_ON(!irqs_disabled());
> 	if (rq1 == rq2) {
> 		raw_spin_lock(&rq1->lock);
> 		__acquire(rq2->lock);	/* Fake it out ;) */
> 	} else {
> 		if (rq1 < rq2) {
> 			raw_spin_lock(&rq1->lock);
> 			raw_spin_lock_nested(&rq2->lock, SINGLE_DEPTH_NESTING);
> 		} else {
> 			raw_spin_lock(&rq2->lock);
> 			raw_spin_lock_nested(&rq1->lock, SINGLE_DEPTH_NESTING);
> 		}
> 	}
> }
> 
> /*
2630,2631c1940,1942
< 	if (__rq_lockp(rq1) != __rq_lockp(rq2))
< 		raw_spin_rq_unlock(rq2);
---
> 	raw_spin_unlock(&rq1->lock);
> 	if (rq1 != rq2)
> 		raw_spin_unlock(&rq2->lock);
2634d1944
< 	raw_spin_rq_unlock(rq1);
2655c1965
< 	raw_spin_rq_lock(rq1);
---
> 	raw_spin_lock(&rq1->lock);
2670c1980
< 	raw_spin_rq_unlock(rq1);
---
> 	raw_spin_unlock(&rq1->lock);
2680c1990
< extern bool sched_debug_verbose;
---
> extern bool sched_debug_enabled;
2685,2689c1995,1996
< extern void print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq);
< extern void print_rt_rq(struct seq_file *m, int cpu, struct rt_rq *rt_rq);
< extern void print_dl_rq(struct seq_file *m, int cpu, struct dl_rq *dl_rq);
< 
< extern void resched_latency_warn(int cpu, u64 latency);
---
> extern void
> print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq);
2697,2698d2003
< #else
< static inline void resched_latency_warn(int cpu, u64 latency) {}
2709,2717c2014,2017
< #define NOHZ_BALANCE_KICK_BIT	0
< #define NOHZ_STATS_KICK_BIT	1
< #define NOHZ_NEWILB_KICK_BIT	2
< 
< #define NOHZ_BALANCE_KICK	BIT(NOHZ_BALANCE_KICK_BIT)
< #define NOHZ_STATS_KICK		BIT(NOHZ_STATS_KICK_BIT)
< #define NOHZ_NEWILB_KICK	BIT(NOHZ_NEWILB_KICK_BIT)
< 
< #define NOHZ_KICK_MASK	(NOHZ_BALANCE_KICK | NOHZ_STATS_KICK)
---
> enum rq_nohz_flag_bits {
> 	NOHZ_TICK_STOPPED,
> 	NOHZ_BALANCE_KICK,
> };
2721c2021
< extern void nohz_balance_exit_idle(struct rq *rq);
---
> extern void nohz_balance_exit_idle(unsigned int cpu);
2723c2023
< static inline void nohz_balance_exit_idle(struct rq *rq) { }
---
> static inline void nohz_balance_exit_idle(unsigned int cpu) { }
2726,2730d2025
< #if defined(CONFIG_SMP) && defined(CONFIG_NO_HZ_COMMON)
< extern void nohz_run_idle_balance(int cpu);
< #else
< static inline void nohz_run_idle_balance(int cpu) { }
< #endif
2770c2065
<  * Otherwise ksoftirqd's sum_exec_runtime is subtracted its own runtime
---
>  * Otherwise ksoftirqd's sum_exec_runtime is substracted its own runtime
2789c2084
< DECLARE_PER_CPU(struct update_util_data __rcu *, cpufreq_update_util_data);
---
> DECLARE_PER_CPU(struct update_util_data *, cpufreq_update_util_data);
2804,2806c2099,2101
<  * That is not guaranteed to happen if the updates are only triggered from CFS
<  * and DL, though, because they may not be coming in if only RT tasks are
<  * active all the time (or there are RT tasks only).
---
>  * That is not guaranteed to happen if the updates are only triggered from CFS,
>  * though, because they may not be coming in if RT or deadline tasks are active
>  * all the time (or there are RT and DL tasks only).
2808,2809c2103,2104
<  * As a workaround for that issue, this function is called periodically by the
<  * RT sched class to trigger extra cpufreq updates to prevent it from stalling,
---
>  * As a workaround for that issue, this function is called by the RT and DL
>  * sched classes to trigger extra cpufreq updates to prevent it from stalling,
2811c2106
<  * solutions targeted more specifically at RT tasks.
---
>  * solutions targeted more specifically at RT and DL tasks.
2826,2907d2120
< #ifdef CONFIG_UCLAMP_TASK
< unsigned long uclamp_eff_value(struct task_struct *p, enum uclamp_id clamp_id);
< 
< /**
<  * uclamp_rq_util_with - clamp @util with @rq and @p effective uclamp values.
<  * @rq:		The rq to clamp against. Must not be NULL.
<  * @util:	The util value to clamp.
<  * @p:		The task to clamp against. Can be NULL if you want to clamp
<  *		against @rq only.
<  *
<  * Clamps the passed @util to the max(@rq, @p) effective uclamp values.
<  *
<  * If sched_uclamp_used static key is disabled, then just return the util
<  * without any clamping since uclamp aggregation at the rq level in the fast
<  * path is disabled, rendering this operation a NOP.
<  *
<  * Use uclamp_eff_value() if you don't care about uclamp values at rq level. It
<  * will return the correct effective uclamp value of the task even if the
<  * static key is disabled.
<  */
< static __always_inline
< unsigned long uclamp_rq_util_with(struct rq *rq, unsigned long util,
< 				  struct task_struct *p)
< {
< 	unsigned long min_util = 0;
< 	unsigned long max_util = 0;
< 
< 	if (!static_branch_likely(&sched_uclamp_used))
< 		return util;
< 
< 	if (p) {
< 		min_util = uclamp_eff_value(p, UCLAMP_MIN);
< 		max_util = uclamp_eff_value(p, UCLAMP_MAX);
< 
< 		/*
< 		 * Ignore last runnable task's max clamp, as this task will
< 		 * reset it. Similarly, no need to read the rq's min clamp.
< 		 */
< 		if (rq->uclamp_flags & UCLAMP_FLAG_IDLE)
< 			goto out;
< 	}
< 
< 	min_util = max_t(unsigned long, min_util, READ_ONCE(rq->uclamp[UCLAMP_MIN].value));
< 	max_util = max_t(unsigned long, max_util, READ_ONCE(rq->uclamp[UCLAMP_MAX].value));
< out:
< 	/*
< 	 * Since CPU's {min,max}_util clamps are MAX aggregated considering
< 	 * RUNNABLE tasks with _different_ clamps, we can end up with an
< 	 * inversion. Fix it now when the clamps are applied.
< 	 */
< 	if (unlikely(min_util >= max_util))
< 		return min_util;
< 
< 	return clamp(util, min_util, max_util);
< }
< 
< /*
<  * When uclamp is compiled in, the aggregation at rq level is 'turned off'
<  * by default in the fast path and only gets turned on once userspace performs
<  * an operation that requires it.
<  *
<  * Returns true if userspace opted-in to use uclamp and aggregation at rq level
<  * hence is active.
<  */
< static inline bool uclamp_is_used(void)
< {
< 	return static_branch_likely(&sched_uclamp_used);
< }
< #else /* CONFIG_UCLAMP_TASK */
< static inline
< unsigned long uclamp_rq_util_with(struct rq *rq, unsigned long util,
< 				  struct task_struct *p)
< {
< 	return util;
< }
< 
< static inline bool uclamp_is_used(void)
< {
< 	return false;
< }
< #endif /* CONFIG_UCLAMP_TASK */
< 
2909,2913c2122,2123
< # ifndef arch_scale_freq_invariant
< #  define arch_scale_freq_invariant()	true
< # endif
< #else
< # define arch_scale_freq_invariant()	false
---
> #ifndef arch_scale_freq_invariant
> #define arch_scale_freq_invariant()	(true)
2915,2966c2125,2126
< 
< #ifdef CONFIG_SMP
< static inline unsigned long capacity_orig_of(int cpu)
< {
< 	return cpu_rq(cpu)->cpu_capacity_orig;
< }
< 
< /**
<  * enum cpu_util_type - CPU utilization type
<  * @FREQUENCY_UTIL:	Utilization used to select frequency
<  * @ENERGY_UTIL:	Utilization used during energy calculation
<  *
<  * The utilization signals of all scheduling classes (CFS/RT/DL) and IRQ time
<  * need to be aggregated differently depending on the usage made of them. This
<  * enum is used within effective_cpu_util() to differentiate the types of
<  * utilization expected by the callers, and adjust the aggregation accordingly.
<  */
< enum cpu_util_type {
< 	FREQUENCY_UTIL,
< 	ENERGY_UTIL,
< };
< 
< unsigned long effective_cpu_util(int cpu, unsigned long util_cfs,
< 				 unsigned long max, enum cpu_util_type type,
< 				 struct task_struct *p);
< 
< static inline unsigned long cpu_bw_dl(struct rq *rq)
< {
< 	return (rq->dl.running_bw * SCHED_CAPACITY_SCALE) >> BW_SHIFT;
< }
< 
< static inline unsigned long cpu_util_dl(struct rq *rq)
< {
< 	return READ_ONCE(rq->avg_dl.util_avg);
< }
< 
< static inline unsigned long cpu_util_cfs(struct rq *rq)
< {
< 	unsigned long util = READ_ONCE(rq->cfs.avg.util_avg);
< 
< 	if (sched_feat(UTIL_EST)) {
< 		util = max_t(unsigned long, util,
< 			     READ_ONCE(rq->cfs.avg.util_est.enqueued));
< 	}
< 
< 	return util;
< }
< 
< static inline unsigned long cpu_util_rt(struct rq *rq)
< {
< 	return READ_ONCE(rq->avg_rt.util_avg);
< }
---
> #else /* arch_scale_freq_capacity */
> #define arch_scale_freq_invariant()	(false)
2968,3066d2127
< 
< #ifdef CONFIG_HAVE_SCHED_AVG_IRQ
< static inline unsigned long cpu_util_irq(struct rq *rq)
< {
< 	return rq->avg_irq.util_avg;
< }
< 
< static inline
< unsigned long scale_irq_capacity(unsigned long util, unsigned long irq, unsigned long max)
< {
< 	util *= (max - irq);
< 	util /= max;
< 
< 	return util;
< 
< }
< #else
< static inline unsigned long cpu_util_irq(struct rq *rq)
< {
< 	return 0;
< }
< 
< static inline
< unsigned long scale_irq_capacity(unsigned long util, unsigned long irq, unsigned long max)
< {
< 	return util;
< }
< #endif
< 
< #if defined(CONFIG_ENERGY_MODEL) && defined(CONFIG_CPU_FREQ_GOV_SCHEDUTIL)
< 
< #define perf_domain_span(pd) (to_cpumask(((pd)->em_pd->cpus)))
< 
< DECLARE_STATIC_KEY_FALSE(sched_energy_present);
< 
< static inline bool sched_energy_enabled(void)
< {
< 	return static_branch_unlikely(&sched_energy_present);
< }
< 
< #else /* ! (CONFIG_ENERGY_MODEL && CONFIG_CPU_FREQ_GOV_SCHEDUTIL) */
< 
< #define perf_domain_span(pd) NULL
< static inline bool sched_energy_enabled(void) { return false; }
< 
< #endif /* CONFIG_ENERGY_MODEL && CONFIG_CPU_FREQ_GOV_SCHEDUTIL */
< 
< #ifdef CONFIG_MEMBARRIER
< /*
<  * The scheduler provides memory barriers required by membarrier between:
<  * - prior user-space memory accesses and store to rq->membarrier_state,
<  * - store to rq->membarrier_state and following user-space memory accesses.
<  * In the same way it provides those guarantees around store to rq->curr.
<  */
< static inline void membarrier_switch_mm(struct rq *rq,
< 					struct mm_struct *prev_mm,
< 					struct mm_struct *next_mm)
< {
< 	int membarrier_state;
< 
< 	if (prev_mm == next_mm)
< 		return;
< 
< 	membarrier_state = atomic_read(&next_mm->membarrier_state);
< 	if (READ_ONCE(rq->membarrier_state) == membarrier_state)
< 		return;
< 
< 	WRITE_ONCE(rq->membarrier_state, membarrier_state);
< }
< #else
< static inline void membarrier_switch_mm(struct rq *rq,
< 					struct mm_struct *prev_mm,
< 					struct mm_struct *next_mm)
< {
< }
< #endif
< 
< #ifdef CONFIG_SMP
< static inline bool is_per_cpu_kthread(struct task_struct *p)
< {
< 	if (!(p->flags & PF_KTHREAD))
< 		return false;
< 
< 	if (p->nr_cpus_allowed != 1)
< 		return false;
< 
< 	return true;
< }
< #endif
< 
< extern void swake_up_all_locked(struct swait_queue_head *q);
< extern void __prepare_to_swait(struct swait_queue_head *q, struct swait_queue *wait);
< 
< #ifdef CONFIG_PREEMPT_DYNAMIC
< extern int preempt_dynamic_mode;
< extern int sched_dynamic_mode(const char *str);
< extern void sched_dynamic_update(int mode);
< #endif
< 
