1d0
< // SPDX-License-Identifier: GPL-2.0-only
9,18c8,30
< #define CREATE_TRACE_POINTS
< #include <trace/events/sched.h>
< #undef CREATE_TRACE_POINTS
< 
< #include "sched.h"
< 
< #include <linux/nospec.h>
< 
< #include <linux/kcov.h>
< #include <linux/scs.h>
---
> #include <linux/sched.h>
> #include <linux/sched/clock.h>
> #include <uapi/linux/sched/types.h>
> #include <linux/sched/loadavg.h>
> #include <linux/sched/hotplug.h>
> #include <linux/wait_bit.h>
> #include <linux/cpuset.h>
> #include <linux/delayacct.h>
> #include <linux/init_task.h>
> #include <linux/context_tracking.h>
> #include <linux/rcupdate_wait.h>
> #include <linux/compat.h>
> 
> #include <linux/blkdev.h>
> #include <linux/kprobes.h>
> #include <linux/mmu_context.h>
> #include <linux/module.h>
> #include <linux/nmi.h>
> #include <linux/prefetch.h>
> #include <linux/profile.h>
> #include <linux/security.h>
> #include <linux/syscalls.h>
> #include <linux/sched/isolation.h>
21a34,36
> #ifdef CONFIG_PARAVIRT
> #include <asm/paravirt.h>
> #endif
22a38
> #include "sched.h"
24d39
< #include "../../fs/io-wq.h"
27,43c42,43
< #include "pelt.h"
< #include "smp.h"
< 
< /*
<  * Export tracepoints that act as a bare tracehook (ie: have no trace event
<  * associated with them) to allow external modules to probe them.
<  */
< EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_cfs_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_rt_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_dl_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_irq_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(pelt_se_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(sched_cpu_capacity_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(sched_overutilized_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(sched_util_est_cfs_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(sched_util_est_se_tp);
< EXPORT_TRACEPOINT_SYMBOL_GPL(sched_update_nr_running_tp);
---
> #define CREATE_TRACE_POINTS
> #include <trace/events/sched.h>
47c47
< #ifdef CONFIG_SCHED_DEBUG
---
> #if defined(CONFIG_SCHED_DEBUG) && defined(HAVE_JUMP_LABEL)
61,71c61
< 
< /*
<  * Print a warning if need_resched is set for the given duration (if
<  * LATENCY_WARN is enabled).
<  *
<  * If sysctl_resched_latency_warn_once is set, only one warning will be shown
<  * per boot.
<  */
< __read_mostly int sysctl_resched_latency_warn_ms = 100;
< __read_mostly int sysctl_resched_latency_warn_once = 1;
< #endif /* CONFIG_SCHED_DEBUG */
---
> #endif
80c70,72
<  * period over which we measure -rt task CPU usage in us.
---
>  * period over which we average the RT time consumption, measured
>  * in ms.
>  *
83,221c75
< unsigned int sysctl_sched_rt_period = 1000000;
< 
< __read_mostly int scheduler_running;
< 
< #ifdef CONFIG_SCHED_CORE
< 
< DEFINE_STATIC_KEY_FALSE(__sched_core_enabled);
< 
< /* kernel prio, less is more */
< static inline int __task_prio(struct task_struct *p)
< {
< 	if (p->sched_class == &stop_sched_class) /* trumps deadline */
< 		return -2;
< 
< 	if (rt_prio(p->prio)) /* includes deadline */
< 		return p->prio; /* [-1, 99] */
< 
< 	if (p->sched_class == &idle_sched_class)
< 		return MAX_RT_PRIO + NICE_WIDTH; /* 140 */
< 
< 	return MAX_RT_PRIO + MAX_NICE; /* 120, squash fair */
< }
< 
< /*
<  * l(a,b)
<  * le(a,b) := !l(b,a)
<  * g(a,b)  := l(b,a)
<  * ge(a,b) := !l(a,b)
<  */
< 
< /* real prio, less is less */
< static inline bool prio_less(struct task_struct *a, struct task_struct *b, bool in_fi)
< {
< 
< 	int pa = __task_prio(a), pb = __task_prio(b);
< 
< 	if (-pa < -pb)
< 		return true;
< 
< 	if (-pb < -pa)
< 		return false;
< 
< 	if (pa == -1) /* dl_prio() doesn't work because of stop_class above */
< 		return !dl_time_before(a->dl.deadline, b->dl.deadline);
< 
< 	if (pa == MAX_RT_PRIO + MAX_NICE)	/* fair */
< 		return cfs_prio_less(a, b, in_fi);
< 
< 	return false;
< }
< 
< static inline bool __sched_core_less(struct task_struct *a, struct task_struct *b)
< {
< 	if (a->core_cookie < b->core_cookie)
< 		return true;
< 
< 	if (a->core_cookie > b->core_cookie)
< 		return false;
< 
< 	/* flip prio, so high prio is leftmost */
< 	if (prio_less(b, a, task_rq(a)->core->core_forceidle))
< 		return true;
< 
< 	return false;
< }
< 
< #define __node_2_sc(node) rb_entry((node), struct task_struct, core_node)
< 
< static inline bool rb_sched_core_less(struct rb_node *a, const struct rb_node *b)
< {
< 	return __sched_core_less(__node_2_sc(a), __node_2_sc(b));
< }
< 
< static inline int rb_sched_core_cmp(const void *key, const struct rb_node *node)
< {
< 	const struct task_struct *p = __node_2_sc(node);
< 	unsigned long cookie = (unsigned long)key;
< 
< 	if (cookie < p->core_cookie)
< 		return -1;
< 
< 	if (cookie > p->core_cookie)
< 		return 1;
< 
< 	return 0;
< }
< 
< void sched_core_enqueue(struct rq *rq, struct task_struct *p)
< {
< 	rq->core->core_task_seq++;
< 
< 	if (!p->core_cookie)
< 		return;
< 
< 	rb_add(&p->core_node, &rq->core_tree, rb_sched_core_less);
< }
< 
< void sched_core_dequeue(struct rq *rq, struct task_struct *p)
< {
< 	rq->core->core_task_seq++;
< 
< 	if (!sched_core_enqueued(p))
< 		return;
< 
< 	rb_erase(&p->core_node, &rq->core_tree);
< 	RB_CLEAR_NODE(&p->core_node);
< }
< 
< /*
<  * Find left-most (aka, highest priority) task matching @cookie.
<  */
< static struct task_struct *sched_core_find(struct rq *rq, unsigned long cookie)
< {
< 	struct rb_node *node;
< 
< 	node = rb_find_first((void *)cookie, &rq->core_tree, rb_sched_core_cmp);
< 	/*
< 	 * The idle task always matches any cookie!
< 	 */
< 	if (!node)
< 		return idle_sched_class.pick_task(rq);
< 
< 	return __node_2_sc(node);
< }
< 
< static struct task_struct *sched_core_next(struct task_struct *p, unsigned long cookie)
< {
< 	struct rb_node *node = &p->core_node;
< 
< 	node = rb_next(node);
< 	if (!node)
< 		return NULL;
< 
< 	p = container_of(node, struct task_struct, core_node);
< 	if (p->core_cookie != cookie)
< 		return NULL;
< 
< 	return p;
< }
---
> const_debug unsigned int sysctl_sched_time_avg = MSEC_PER_SEC;
224,233c78,79
<  * Magic required such that:
<  *
<  *	raw_spin_rq_lock(rq);
<  *	...
<  *	raw_spin_rq_unlock(rq);
<  *
<  * ends up locking and unlocking the _same_ lock, and all CPUs
<  * always agree on what rq has what lock.
<  *
<  * XXX entirely possible to selectively enable cores, don't bother for now.
---
>  * period over which we measure -rt task CPU usage in us.
>  * default: 1s
234a81
> unsigned int sysctl_sched_rt_period = 1000000;
236,365c83
< static DEFINE_MUTEX(sched_core_mutex);
< static atomic_t sched_core_count;
< static struct cpumask sched_core_mask;
< 
< static void sched_core_lock(int cpu, unsigned long *flags)
< {
< 	const struct cpumask *smt_mask = cpu_smt_mask(cpu);
< 	int t, i = 0;
< 
< 	local_irq_save(*flags);
< 	for_each_cpu(t, smt_mask)
< 		raw_spin_lock_nested(&cpu_rq(t)->__lock, i++);
< }
< 
< static void sched_core_unlock(int cpu, unsigned long *flags)
< {
< 	const struct cpumask *smt_mask = cpu_smt_mask(cpu);
< 	int t;
< 
< 	for_each_cpu(t, smt_mask)
< 		raw_spin_unlock(&cpu_rq(t)->__lock);
< 	local_irq_restore(*flags);
< }
< 
< static void __sched_core_flip(bool enabled)
< {
< 	unsigned long flags;
< 	int cpu, t;
< 
< 	cpus_read_lock();
< 
< 	/*
< 	 * Toggle the online cores, one by one.
< 	 */
< 	cpumask_copy(&sched_core_mask, cpu_online_mask);
< 	for_each_cpu(cpu, &sched_core_mask) {
< 		const struct cpumask *smt_mask = cpu_smt_mask(cpu);
< 
< 		sched_core_lock(cpu, &flags);
< 
< 		for_each_cpu(t, smt_mask)
< 			cpu_rq(t)->core_enabled = enabled;
< 
< 		sched_core_unlock(cpu, &flags);
< 
< 		cpumask_andnot(&sched_core_mask, &sched_core_mask, smt_mask);
< 	}
< 
< 	/*
< 	 * Toggle the offline CPUs.
< 	 */
< 	cpumask_copy(&sched_core_mask, cpu_possible_mask);
< 	cpumask_andnot(&sched_core_mask, &sched_core_mask, cpu_online_mask);
< 
< 	for_each_cpu(cpu, &sched_core_mask)
< 		cpu_rq(cpu)->core_enabled = enabled;
< 
< 	cpus_read_unlock();
< }
< 
< static void sched_core_assert_empty(void)
< {
< 	int cpu;
< 
< 	for_each_possible_cpu(cpu)
< 		WARN_ON_ONCE(!RB_EMPTY_ROOT(&cpu_rq(cpu)->core_tree));
< }
< 
< static void __sched_core_enable(void)
< {
< 	static_branch_enable(&__sched_core_enabled);
< 	/*
< 	 * Ensure all previous instances of raw_spin_rq_*lock() have finished
< 	 * and future ones will observe !sched_core_disabled().
< 	 */
< 	synchronize_rcu();
< 	__sched_core_flip(true);
< 	sched_core_assert_empty();
< }
< 
< static void __sched_core_disable(void)
< {
< 	sched_core_assert_empty();
< 	__sched_core_flip(false);
< 	static_branch_disable(&__sched_core_enabled);
< }
< 
< void sched_core_get(void)
< {
< 	if (atomic_inc_not_zero(&sched_core_count))
< 		return;
< 
< 	mutex_lock(&sched_core_mutex);
< 	if (!atomic_read(&sched_core_count))
< 		__sched_core_enable();
< 
< 	smp_mb__before_atomic();
< 	atomic_inc(&sched_core_count);
< 	mutex_unlock(&sched_core_mutex);
< }
< 
< static void __sched_core_put(struct work_struct *work)
< {
< 	if (atomic_dec_and_mutex_lock(&sched_core_count, &sched_core_mutex)) {
< 		__sched_core_disable();
< 		mutex_unlock(&sched_core_mutex);
< 	}
< }
< 
< void sched_core_put(void)
< {
< 	static DECLARE_WORK(_work, __sched_core_put);
< 
< 	/*
< 	 * "There can be only one"
< 	 *
< 	 * Either this is the last one, or we don't actually need to do any
< 	 * 'work'. If it is the last *again*, we rely on
< 	 * WORK_STRUCT_PENDING_BIT.
< 	 */
< 	if (!atomic_add_unless(&sched_core_count, -1, 1))
< 		schedule_work(&_work);
< }
< 
< #else /* !CONFIG_SCHED_CORE */
< 
< static inline void sched_core_enqueue(struct rq *rq, struct task_struct *p) { }
< static inline void sched_core_dequeue(struct rq *rq, struct task_struct *p) { }
< 
< #endif /* CONFIG_SCHED_CORE */
---
> __read_mostly int scheduler_running;
373,539d90
< 
< /*
<  * Serialization rules:
<  *
<  * Lock order:
<  *
<  *   p->pi_lock
<  *     rq->lock
<  *       hrtimer_cpu_base->lock (hrtimer_start() for bandwidth controls)
<  *
<  *  rq1->lock
<  *    rq2->lock  where: rq1 < rq2
<  *
<  * Regular state:
<  *
<  * Normal scheduling state is serialized by rq->lock. __schedule() takes the
<  * local CPU's rq->lock, it optionally removes the task from the runqueue and
<  * always looks at the local rq data structures to find the most eligible task
<  * to run next.
<  *
<  * Task enqueue is also under rq->lock, possibly taken from another CPU.
<  * Wakeups from another LLC domain might use an IPI to transfer the enqueue to
<  * the local CPU to avoid bouncing the runqueue state around [ see
<  * ttwu_queue_wakelist() ]
<  *
<  * Task wakeup, specifically wakeups that involve migration, are horribly
<  * complicated to avoid having to take two rq->locks.
<  *
<  * Special state:
<  *
<  * System-calls and anything external will use task_rq_lock() which acquires
<  * both p->pi_lock and rq->lock. As a consequence the state they change is
<  * stable while holding either lock:
<  *
<  *  - sched_setaffinity()/
<  *    set_cpus_allowed_ptr():	p->cpus_ptr, p->nr_cpus_allowed
<  *  - set_user_nice():		p->se.load, p->*prio
<  *  - __sched_setscheduler():	p->sched_class, p->policy, p->*prio,
<  *				p->se.load, p->rt_priority,
<  *				p->dl.dl_{runtime, deadline, period, flags, bw, density}
<  *  - sched_setnuma():		p->numa_preferred_nid
<  *  - sched_move_task()/
<  *    cpu_cgroup_fork():	p->sched_task_group
<  *  - uclamp_update_active()	p->uclamp*
<  *
<  * p->state <- TASK_*:
<  *
<  *   is changed locklessly using set_current_state(), __set_current_state() or
<  *   set_special_state(), see their respective comments, or by
<  *   try_to_wake_up(). This latter uses p->pi_lock to serialize against
<  *   concurrent self.
<  *
<  * p->on_rq <- { 0, 1 = TASK_ON_RQ_QUEUED, 2 = TASK_ON_RQ_MIGRATING }:
<  *
<  *   is set by activate_task() and cleared by deactivate_task(), under
<  *   rq->lock. Non-zero indicates the task is runnable, the special
<  *   ON_RQ_MIGRATING state is used for migration without holding both
<  *   rq->locks. It indicates task_cpu() is not stable, see task_rq_lock().
<  *
<  * p->on_cpu <- { 0, 1 }:
<  *
<  *   is set by prepare_task() and cleared by finish_task() such that it will be
<  *   set before p is scheduled-in and cleared after p is scheduled-out, both
<  *   under rq->lock. Non-zero indicates the task is running on its CPU.
<  *
<  *   [ The astute reader will observe that it is possible for two tasks on one
<  *     CPU to have ->on_cpu = 1 at the same time. ]
<  *
<  * task_cpu(p): is changed by set_task_cpu(), the rules are:
<  *
<  *  - Don't call set_task_cpu() on a blocked task:
<  *
<  *    We don't care what CPU we're not running on, this simplifies hotplug,
<  *    the CPU assignment of blocked tasks isn't required to be valid.
<  *
<  *  - for try_to_wake_up(), called under p->pi_lock:
<  *
<  *    This allows try_to_wake_up() to only take one rq->lock, see its comment.
<  *
<  *  - for migration called under rq->lock:
<  *    [ see task_on_rq_migrating() in task_rq_lock() ]
<  *
<  *    o move_queued_task()
<  *    o detach_task()
<  *
<  *  - for migration called under double_rq_lock():
<  *
<  *    o __migrate_swap_task()
<  *    o push_rt_task() / pull_rt_task()
<  *    o push_dl_task() / pull_dl_task()
<  *    o dl_task_offline_migration()
<  *
<  */
< 
< void raw_spin_rq_lock_nested(struct rq *rq, int subclass)
< {
< 	raw_spinlock_t *lock;
< 
< 	/* Matches synchronize_rcu() in __sched_core_enable() */
< 	preempt_disable();
< 	if (sched_core_disabled()) {
< 		raw_spin_lock_nested(&rq->__lock, subclass);
< 		/* preempt_count *MUST* be > 1 */
< 		preempt_enable_no_resched();
< 		return;
< 	}
< 
< 	for (;;) {
< 		lock = __rq_lockp(rq);
< 		raw_spin_lock_nested(lock, subclass);
< 		if (likely(lock == __rq_lockp(rq))) {
< 			/* preempt_count *MUST* be > 1 */
< 			preempt_enable_no_resched();
< 			return;
< 		}
< 		raw_spin_unlock(lock);
< 	}
< }
< 
< bool raw_spin_rq_trylock(struct rq *rq)
< {
< 	raw_spinlock_t *lock;
< 	bool ret;
< 
< 	/* Matches synchronize_rcu() in __sched_core_enable() */
< 	preempt_disable();
< 	if (sched_core_disabled()) {
< 		ret = raw_spin_trylock(&rq->__lock);
< 		preempt_enable();
< 		return ret;
< 	}
< 
< 	for (;;) {
< 		lock = __rq_lockp(rq);
< 		ret = raw_spin_trylock(lock);
< 		if (!ret || (likely(lock == __rq_lockp(rq)))) {
< 			preempt_enable();
< 			return ret;
< 		}
< 		raw_spin_unlock(lock);
< 	}
< }
< 
< void raw_spin_rq_unlock(struct rq *rq)
< {
< 	raw_spin_unlock(rq_lockp(rq));
< }
< 
< #ifdef CONFIG_SMP
< /*
<  * double_rq_lock - safely lock two runqueues
<  */
< void double_rq_lock(struct rq *rq1, struct rq *rq2)
< {
< 	lockdep_assert_irqs_disabled();
< 
< 	if (rq_order_less(rq2, rq1))
< 		swap(rq1, rq2);
< 
< 	raw_spin_rq_lock(rq1);
< 	if (__rq_lockp(rq1) == __rq_lockp(rq2))
< 		return;
< 
< 	raw_spin_rq_lock_nested(rq2, SINGLE_DEPTH_NESTING);
< }
< #endif
< 
552c103
< 		raw_spin_rq_lock(rq);
---
> 		raw_spin_lock(&rq->lock);
557c108
< 		raw_spin_rq_unlock(rq);
---
> 		raw_spin_unlock(&rq->lock);
576c127
< 		raw_spin_rq_lock(rq);
---
> 		raw_spin_lock(&rq->lock);
587c138
< 		 * If we observe the old CPU in task_rq_lock(), the acquire of
---
> 		 * If we observe the old cpu in task_rq_lock, the acquire of
590,592c141,142
< 		 * If we observe the new CPU in task_rq_lock(), the address
< 		 * dependency headed by '[L] rq = task_rq()' and the acquire
< 		 * will pair with the WMB to ensure we then also see migrating.
---
> 		 * If we observe the new CPU in task_rq_lock, the acquire will
> 		 * pair with the WMB to ensure we must then also see migrating.
598c148
< 		raw_spin_rq_unlock(rq);
---
> 		raw_spin_unlock(&rq->lock);
616,617c166,168
< 	s64 __maybe_unused steal = 0, irq_delta = 0;
< 
---
> #if defined(CONFIG_IRQ_TIME_ACCOUNTING) || defined(CONFIG_PARAVIRT_TIME_ACCOUNTING)
> 	s64 steal = 0, irq_delta = 0;
> #endif
657c208
< #ifdef CONFIG_HAVE_SCHED_AVG_IRQ
---
> #if defined(CONFIG_IRQ_TIME_ACCOUNTING) || defined(CONFIG_PARAVIRT_TIME_ACCOUNTING)
659c210
< 		update_irq_load_avg(rq, irq_delta + steal);
---
> 		sched_rt_avg_update(rq, irq_delta + steal);
661d211
< 	update_rq_clock_pelt(rq, delta);
668c218
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
685a236
> 
721d271
< 	ktime_t time = rq->hrtick_time;
723c273
< 	hrtimer_start(timer, time, HRTIMER_MODE_ABS_PINNED_HARD);
---
> 	hrtimer_start_expires(timer, HRTIMER_MODE_ABS_PINNED);
735a286
> 	rq->hrtick_csd_pending = 0;
746a298
> 	ktime_t time;
754c306,308
< 	rq->hrtick_time = ktime_add_ns(timer->base->get_time(), delta);
---
> 	time = ktime_add_ns(timer->base->get_time(), delta);
> 
> 	hrtimer_set_expires(timer, time);
756c310
< 	if (rq == this_rq())
---
> 	if (rq == this_rq()) {
758c312
< 	else
---
> 	} else if (!rq->hrtick_csd_pending) {
759a314,315
> 		rq->hrtick_csd_pending = 1;
> 	}
776c332
< 		      HRTIMER_MODE_REL_PINNED_HARD);
---
> 		      HRTIMER_MODE_REL_PINNED);
778d333
< 
781c336
< static void hrtick_rq_init(struct rq *rq)
---
> static void init_rq_hrtick(struct rq *rq)
784c339,343
< 	INIT_CSD(&rq->hrtick_csd, __hrtick_start, rq);
---
> 	rq->hrtick_csd_pending = 0;
> 
> 	rq->hrtick_csd.flags = 0;
> 	rq->hrtick_csd.func = __hrtick_start;
> 	rq->hrtick_csd.info = rq;
786c345,346
< 	hrtimer_init(&rq->hrtick_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL_HARD);
---
> 
> 	hrtimer_init(&rq->hrtick_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
794c354
< static inline void hrtick_rq_init(struct rq *rq)
---
> static inline void init_rq_hrtick(struct rq *rq)
868c428
< static bool __wake_q_add(struct wake_q_head *head, struct task_struct *task)
---
> void wake_q_add(struct wake_q_head *head, struct task_struct *task)
874c434
< 	 * it's already queued (either by us or someone else) and will get the
---
> 	 * its already queued (either by us or someone else) and will get the
877,878c437,438
< 	 * In order to ensure that a pending wakeup will observe our pending
< 	 * state, even in the failed case, an explicit smp_mb() must be used.
---
> 	 * This cmpxchg() implies a full barrier, which pairs with the write
> 	 * barrier implied by the wakeup in wake_up_q().
880,882c440,443
< 	smp_mb__before_atomic();
< 	if (unlikely(cmpxchg_relaxed(&node->next, NULL, WAKE_Q_TAIL)))
< 		return false;
---
> 	if (cmpxchg(&node->next, NULL, WAKE_Q_TAIL))
> 		return;
> 
> 	get_task_struct(task);
889,930d449
< 	return true;
< }
< 
< /**
<  * wake_q_add() - queue a wakeup for 'later' waking.
<  * @head: the wake_q_head to add @task to
<  * @task: the task to queue for 'later' wakeup
<  *
<  * Queue a task for later wakeup, most likely by the wake_up_q() call in the
<  * same context, _HOWEVER_ this is not guaranteed, the wakeup can come
<  * instantly.
<  *
<  * This function must be used as-if it were wake_up_process(); IOW the task
<  * must be ready to be woken at this location.
<  */
< void wake_q_add(struct wake_q_head *head, struct task_struct *task)
< {
< 	if (__wake_q_add(head, task))
< 		get_task_struct(task);
< }
< 
< /**
<  * wake_q_add_safe() - safely queue a wakeup for 'later' waking.
<  * @head: the wake_q_head to add @task to
<  * @task: the task to queue for 'later' wakeup
<  *
<  * Queue a task for later wakeup, most likely by the wake_up_q() call in the
<  * same context, _HOWEVER_ this is not guaranteed, the wakeup can come
<  * instantly.
<  *
<  * This function must be used as-if it were wake_up_process(); IOW the task
<  * must be ready to be woken at this location.
<  *
<  * This function is essentially a task-safe equivalent to wake_q_add(). Callers
<  * that already hold reference to @task can call the 'safe' version and trust
<  * wake_q to do the right thing depending whether or not the @task is already
<  * queued for wakeup.
<  */
< void wake_q_add_safe(struct wake_q_head *head, struct task_struct *task)
< {
< 	if (!__wake_q_add(head, task))
< 		put_task_struct(task);
940a460
> 		BUG_ON(!task);
946,947c466,467
< 		 * wake_up_process() executes a full barrier, which pairs with
< 		 * the queueing in wake_q_add() so as not to miss wakeups.
---
> 		 * wake_up_process() implies a wmb() to pair with the queueing
> 		 * in wake_q_add() so as not to miss wakeups.
966c486
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
990,993c510,512
< 	raw_spin_rq_lock_irqsave(rq, flags);
< 	if (cpu_online(cpu) || cpu == smp_processor_id())
< 		resched_curr(rq);
< 	raw_spin_rq_unlock_irqrestore(rq, flags);
---
> 	raw_spin_lock_irqsave(&rq->lock, flags);
> 	resched_curr(rq);
> 	raw_spin_unlock_irqrestore(&rq->lock, flags);
1008c527
< 	int i, cpu = smp_processor_id(), default_cpu = -1;
---
> 	int i, cpu = smp_processor_id();
1010,1016d528
< 	const struct cpumask *hk_mask;
< 
< 	if (housekeeping_cpu(cpu, HK_FLAG_TIMER)) {
< 		if (!idle_cpu(cpu))
< 			return cpu;
< 		default_cpu = cpu;
< 	}
1018c530,531
< 	hk_mask = housekeeping_cpumask(HK_FLAG_TIMER);
---
> 	if (!idle_cpu(cpu) && housekeeping_cpu(cpu, HK_FLAG_TIMER))
> 		return cpu;
1022c535
< 		for_each_cpu_and(i, sched_domain_span(sd), hk_mask) {
---
> 		for_each_cpu(i, sched_domain_span(sd)) {
1026c539
< 			if (!idle_cpu(i)) {
---
> 			if (!idle_cpu(i) && housekeeping_cpu(i, HK_FLAG_TIMER)) {
1033,1035c546,547
< 	if (default_cpu == -1)
< 		default_cpu = housekeeping_any_cpu(HK_FLAG_TIMER);
< 	cpu = default_cpu;
---
> 	if (!housekeeping_cpu(cpu, HK_FLAG_TIMER))
> 		cpu = housekeeping_any_cpu(HK_FLAG_TIMER);
1095c607
< static void nohz_csd_func(void *info)
---
> static inline bool got_nohz_idle_kick(void)
1097,1099c609,615
< 	struct rq *rq = info;
< 	int cpu = cpu_of(rq);
< 	unsigned int flags;
---
> 	int cpu = smp_processor_id();
> 
> 	if (!test_bit(NOHZ_BALANCE_KICK, nohz_flags(cpu)))
> 		return false;
> 
> 	if (idle_cpu(cpu) && !need_resched())
> 		return true;
1102c618,619
< 	 * Release the rq::nohz_csd.
---
> 	 * We can't run Idle Load Balance on this CPU for this time so we
> 	 * cancel it and clear NOHZ_BALANCE_KICK
1104,1105c621,623
< 	flags = atomic_fetch_andnot(NOHZ_KICK_MASK | NOHZ_NEWILB_KICK, nohz_flags(cpu));
< 	WARN_ON(!(flags & NOHZ_KICK_MASK));
---
> 	clear_bit(NOHZ_BALANCE_KICK, nohz_flags(cpu));
> 	return false;
> }
1107,1111c625,629
< 	rq->idle_balance = idle_cpu(cpu);
< 	if (rq->idle_balance && !need_resched()) {
< 		rq->nohz_idle_balance = flags;
< 		raise_softirq_irqoff(SCHED_SOFTIRQ);
< 	}
---
> #else /* CONFIG_NO_HZ_COMMON */
> 
> static inline bool got_nohz_idle_kick(void)
> {
> 	return false;
1126c644
< 	 * If there are more than one RR tasks, we need the tick to affect the
---
> 	 * If there are more than one RR tasks, we need the tick to effect the
1154a673,689
> 
> void sched_avg_update(struct rq *rq)
> {
> 	s64 period = sched_avg_period();
> 
> 	while ((s64)(rq_clock(rq) - rq->age_stamp) > period) {
> 		/*
> 		 * Inline assembly required to prevent the compiler
> 		 * optimising this loop into a divmod call.
> 		 * See __iter_div_u64_rem() for another example of this.
> 		 */
> 		asm("" : "+rm" (rq->age_stamp));
> 		rq->age_stamp += period;
> 		rq->rt_avg /= 2;
> 	}
> }
> 
1210c745
< 	if (task_has_idle_policy(p)) {
---
> 	if (idle_policy(p->policy)) {
1228,1964d762
< #ifdef CONFIG_UCLAMP_TASK
< /*
<  * Serializes updates of utilization clamp values
<  *
<  * The (slow-path) user-space triggers utilization clamp value updates which
<  * can require updates on (fast-path) scheduler's data structures used to
<  * support enqueue/dequeue operations.
<  * While the per-CPU rq lock protects fast-path update operations, user-space
<  * requests are serialized using a mutex to reduce the risk of conflicting
<  * updates or API abuses.
<  */
< static DEFINE_MUTEX(uclamp_mutex);
< 
< /* Max allowed minimum utilization */
< unsigned int sysctl_sched_uclamp_util_min = SCHED_CAPACITY_SCALE;
< 
< /* Max allowed maximum utilization */
< unsigned int sysctl_sched_uclamp_util_max = SCHED_CAPACITY_SCALE;
< 
< /*
<  * By default RT tasks run at the maximum performance point/capacity of the
<  * system. Uclamp enforces this by always setting UCLAMP_MIN of RT tasks to
<  * SCHED_CAPACITY_SCALE.
<  *
<  * This knob allows admins to change the default behavior when uclamp is being
<  * used. In battery powered devices, particularly, running at the maximum
<  * capacity and frequency will increase energy consumption and shorten the
<  * battery life.
<  *
<  * This knob only affects RT tasks that their uclamp_se->user_defined == false.
<  *
<  * This knob will not override the system default sched_util_clamp_min defined
<  * above.
<  */
< unsigned int sysctl_sched_uclamp_util_min_rt_default = SCHED_CAPACITY_SCALE;
< 
< /* All clamps are required to be less or equal than these values */
< static struct uclamp_se uclamp_default[UCLAMP_CNT];
< 
< /*
<  * This static key is used to reduce the uclamp overhead in the fast path. It
<  * primarily disables the call to uclamp_rq_{inc, dec}() in
<  * enqueue/dequeue_task().
<  *
<  * This allows users to continue to enable uclamp in their kernel config with
<  * minimum uclamp overhead in the fast path.
<  *
<  * As soon as userspace modifies any of the uclamp knobs, the static key is
<  * enabled, since we have an actual users that make use of uclamp
<  * functionality.
<  *
<  * The knobs that would enable this static key are:
<  *
<  *   * A task modifying its uclamp value with sched_setattr().
<  *   * An admin modifying the sysctl_sched_uclamp_{min, max} via procfs.
<  *   * An admin modifying the cgroup cpu.uclamp.{min, max}
<  */
< DEFINE_STATIC_KEY_FALSE(sched_uclamp_used);
< 
< /* Integer rounded range for each bucket */
< #define UCLAMP_BUCKET_DELTA DIV_ROUND_CLOSEST(SCHED_CAPACITY_SCALE, UCLAMP_BUCKETS)
< 
< #define for_each_clamp_id(clamp_id) \
< 	for ((clamp_id) = 0; (clamp_id) < UCLAMP_CNT; (clamp_id)++)
< 
< static inline unsigned int uclamp_bucket_id(unsigned int clamp_value)
< {
< 	return min_t(unsigned int, clamp_value / UCLAMP_BUCKET_DELTA, UCLAMP_BUCKETS - 1);
< }
< 
< static inline unsigned int uclamp_none(enum uclamp_id clamp_id)
< {
< 	if (clamp_id == UCLAMP_MIN)
< 		return 0;
< 	return SCHED_CAPACITY_SCALE;
< }
< 
< static inline void uclamp_se_set(struct uclamp_se *uc_se,
< 				 unsigned int value, bool user_defined)
< {
< 	uc_se->value = value;
< 	uc_se->bucket_id = uclamp_bucket_id(value);
< 	uc_se->user_defined = user_defined;
< }
< 
< static inline unsigned int
< uclamp_idle_value(struct rq *rq, enum uclamp_id clamp_id,
< 		  unsigned int clamp_value)
< {
< 	/*
< 	 * Avoid blocked utilization pushing up the frequency when we go
< 	 * idle (which drops the max-clamp) by retaining the last known
< 	 * max-clamp.
< 	 */
< 	if (clamp_id == UCLAMP_MAX) {
< 		rq->uclamp_flags |= UCLAMP_FLAG_IDLE;
< 		return clamp_value;
< 	}
< 
< 	return uclamp_none(UCLAMP_MIN);
< }
< 
< static inline void uclamp_idle_reset(struct rq *rq, enum uclamp_id clamp_id,
< 				     unsigned int clamp_value)
< {
< 	/* Reset max-clamp retention only on idle exit */
< 	if (!(rq->uclamp_flags & UCLAMP_FLAG_IDLE))
< 		return;
< 
< 	WRITE_ONCE(rq->uclamp[clamp_id].value, clamp_value);
< }
< 
< static inline
< unsigned int uclamp_rq_max_value(struct rq *rq, enum uclamp_id clamp_id,
< 				   unsigned int clamp_value)
< {
< 	struct uclamp_bucket *bucket = rq->uclamp[clamp_id].bucket;
< 	int bucket_id = UCLAMP_BUCKETS - 1;
< 
< 	/*
< 	 * Since both min and max clamps are max aggregated, find the
< 	 * top most bucket with tasks in.
< 	 */
< 	for ( ; bucket_id >= 0; bucket_id--) {
< 		if (!bucket[bucket_id].tasks)
< 			continue;
< 		return bucket[bucket_id].value;
< 	}
< 
< 	/* No tasks -- default clamp values */
< 	return uclamp_idle_value(rq, clamp_id, clamp_value);
< }
< 
< static void __uclamp_update_util_min_rt_default(struct task_struct *p)
< {
< 	unsigned int default_util_min;
< 	struct uclamp_se *uc_se;
< 
< 	lockdep_assert_held(&p->pi_lock);
< 
< 	uc_se = &p->uclamp_req[UCLAMP_MIN];
< 
< 	/* Only sync if user didn't override the default */
< 	if (uc_se->user_defined)
< 		return;
< 
< 	default_util_min = sysctl_sched_uclamp_util_min_rt_default;
< 	uclamp_se_set(uc_se, default_util_min, false);
< }
< 
< static void uclamp_update_util_min_rt_default(struct task_struct *p)
< {
< 	struct rq_flags rf;
< 	struct rq *rq;
< 
< 	if (!rt_task(p))
< 		return;
< 
< 	/* Protect updates to p->uclamp_* */
< 	rq = task_rq_lock(p, &rf);
< 	__uclamp_update_util_min_rt_default(p);
< 	task_rq_unlock(rq, p, &rf);
< }
< 
< static void uclamp_sync_util_min_rt_default(void)
< {
< 	struct task_struct *g, *p;
< 
< 	/*
< 	 * copy_process()			sysctl_uclamp
< 	 *					  uclamp_min_rt = X;
< 	 *   write_lock(&tasklist_lock)		  read_lock(&tasklist_lock)
< 	 *   // link thread			  smp_mb__after_spinlock()
< 	 *   write_unlock(&tasklist_lock)	  read_unlock(&tasklist_lock);
< 	 *   sched_post_fork()			  for_each_process_thread()
< 	 *     __uclamp_sync_rt()		    __uclamp_sync_rt()
< 	 *
< 	 * Ensures that either sched_post_fork() will observe the new
< 	 * uclamp_min_rt or for_each_process_thread() will observe the new
< 	 * task.
< 	 */
< 	read_lock(&tasklist_lock);
< 	smp_mb__after_spinlock();
< 	read_unlock(&tasklist_lock);
< 
< 	rcu_read_lock();
< 	for_each_process_thread(g, p)
< 		uclamp_update_util_min_rt_default(p);
< 	rcu_read_unlock();
< }
< 
< static inline struct uclamp_se
< uclamp_tg_restrict(struct task_struct *p, enum uclamp_id clamp_id)
< {
< 	/* Copy by value as we could modify it */
< 	struct uclamp_se uc_req = p->uclamp_req[clamp_id];
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	unsigned int tg_min, tg_max, value;
< 
< 	/*
< 	 * Tasks in autogroups or root task group will be
< 	 * restricted by system defaults.
< 	 */
< 	if (task_group_is_autogroup(task_group(p)))
< 		return uc_req;
< 	if (task_group(p) == &root_task_group)
< 		return uc_req;
< 
< 	tg_min = task_group(p)->uclamp[UCLAMP_MIN].value;
< 	tg_max = task_group(p)->uclamp[UCLAMP_MAX].value;
< 	value = uc_req.value;
< 	value = clamp(value, tg_min, tg_max);
< 	uclamp_se_set(&uc_req, value, false);
< #endif
< 
< 	return uc_req;
< }
< 
< /*
<  * The effective clamp bucket index of a task depends on, by increasing
<  * priority:
<  * - the task specific clamp value, when explicitly requested from userspace
<  * - the task group effective clamp value, for tasks not either in the root
<  *   group or in an autogroup
<  * - the system default clamp value, defined by the sysadmin
<  */
< static inline struct uclamp_se
< uclamp_eff_get(struct task_struct *p, enum uclamp_id clamp_id)
< {
< 	struct uclamp_se uc_req = uclamp_tg_restrict(p, clamp_id);
< 	struct uclamp_se uc_max = uclamp_default[clamp_id];
< 
< 	/* System default restrictions always apply */
< 	if (unlikely(uc_req.value > uc_max.value))
< 		return uc_max;
< 
< 	return uc_req;
< }
< 
< unsigned long uclamp_eff_value(struct task_struct *p, enum uclamp_id clamp_id)
< {
< 	struct uclamp_se uc_eff;
< 
< 	/* Task currently refcounted: use back-annotated (effective) value */
< 	if (p->uclamp[clamp_id].active)
< 		return (unsigned long)p->uclamp[clamp_id].value;
< 
< 	uc_eff = uclamp_eff_get(p, clamp_id);
< 
< 	return (unsigned long)uc_eff.value;
< }
< 
< /*
<  * When a task is enqueued on a rq, the clamp bucket currently defined by the
<  * task's uclamp::bucket_id is refcounted on that rq. This also immediately
<  * updates the rq's clamp value if required.
<  *
<  * Tasks can have a task-specific value requested from user-space, track
<  * within each bucket the maximum value for tasks refcounted in it.
<  * This "local max aggregation" allows to track the exact "requested" value
<  * for each bucket when all its RUNNABLE tasks require the same clamp.
<  */
< static inline void uclamp_rq_inc_id(struct rq *rq, struct task_struct *p,
< 				    enum uclamp_id clamp_id)
< {
< 	struct uclamp_rq *uc_rq = &rq->uclamp[clamp_id];
< 	struct uclamp_se *uc_se = &p->uclamp[clamp_id];
< 	struct uclamp_bucket *bucket;
< 
< 	lockdep_assert_rq_held(rq);
< 
< 	/* Update task effective clamp */
< 	p->uclamp[clamp_id] = uclamp_eff_get(p, clamp_id);
< 
< 	bucket = &uc_rq->bucket[uc_se->bucket_id];
< 	bucket->tasks++;
< 	uc_se->active = true;
< 
< 	uclamp_idle_reset(rq, clamp_id, uc_se->value);
< 
< 	/*
< 	 * Local max aggregation: rq buckets always track the max
< 	 * "requested" clamp value of its RUNNABLE tasks.
< 	 */
< 	if (bucket->tasks == 1 || uc_se->value > bucket->value)
< 		bucket->value = uc_se->value;
< 
< 	if (uc_se->value > READ_ONCE(uc_rq->value))
< 		WRITE_ONCE(uc_rq->value, uc_se->value);
< }
< 
< /*
<  * When a task is dequeued from a rq, the clamp bucket refcounted by the task
<  * is released. If this is the last task reference counting the rq's max
<  * active clamp value, then the rq's clamp value is updated.
<  *
<  * Both refcounted tasks and rq's cached clamp values are expected to be
<  * always valid. If it's detected they are not, as defensive programming,
<  * enforce the expected state and warn.
<  */
< static inline void uclamp_rq_dec_id(struct rq *rq, struct task_struct *p,
< 				    enum uclamp_id clamp_id)
< {
< 	struct uclamp_rq *uc_rq = &rq->uclamp[clamp_id];
< 	struct uclamp_se *uc_se = &p->uclamp[clamp_id];
< 	struct uclamp_bucket *bucket;
< 	unsigned int bkt_clamp;
< 	unsigned int rq_clamp;
< 
< 	lockdep_assert_rq_held(rq);
< 
< 	/*
< 	 * If sched_uclamp_used was enabled after task @p was enqueued,
< 	 * we could end up with unbalanced call to uclamp_rq_dec_id().
< 	 *
< 	 * In this case the uc_se->active flag should be false since no uclamp
< 	 * accounting was performed at enqueue time and we can just return
< 	 * here.
< 	 *
< 	 * Need to be careful of the following enqueue/dequeue ordering
< 	 * problem too
< 	 *
< 	 *	enqueue(taskA)
< 	 *	// sched_uclamp_used gets enabled
< 	 *	enqueue(taskB)
< 	 *	dequeue(taskA)
< 	 *	// Must not decrement bucket->tasks here
< 	 *	dequeue(taskB)
< 	 *
< 	 * where we could end up with stale data in uc_se and
< 	 * bucket[uc_se->bucket_id].
< 	 *
< 	 * The following check here eliminates the possibility of such race.
< 	 */
< 	if (unlikely(!uc_se->active))
< 		return;
< 
< 	bucket = &uc_rq->bucket[uc_se->bucket_id];
< 
< 	SCHED_WARN_ON(!bucket->tasks);
< 	if (likely(bucket->tasks))
< 		bucket->tasks--;
< 
< 	uc_se->active = false;
< 
< 	/*
< 	 * Keep "local max aggregation" simple and accept to (possibly)
< 	 * overboost some RUNNABLE tasks in the same bucket.
< 	 * The rq clamp bucket value is reset to its base value whenever
< 	 * there are no more RUNNABLE tasks refcounting it.
< 	 */
< 	if (likely(bucket->tasks))
< 		return;
< 
< 	rq_clamp = READ_ONCE(uc_rq->value);
< 	/*
< 	 * Defensive programming: this should never happen. If it happens,
< 	 * e.g. due to future modification, warn and fixup the expected value.
< 	 */
< 	SCHED_WARN_ON(bucket->value > rq_clamp);
< 	if (bucket->value >= rq_clamp) {
< 		bkt_clamp = uclamp_rq_max_value(rq, clamp_id, uc_se->value);
< 		WRITE_ONCE(uc_rq->value, bkt_clamp);
< 	}
< }
< 
< static inline void uclamp_rq_inc(struct rq *rq, struct task_struct *p)
< {
< 	enum uclamp_id clamp_id;
< 
< 	/*
< 	 * Avoid any overhead until uclamp is actually used by the userspace.
< 	 *
< 	 * The condition is constructed such that a NOP is generated when
< 	 * sched_uclamp_used is disabled.
< 	 */
< 	if (!static_branch_unlikely(&sched_uclamp_used))
< 		return;
< 
< 	if (unlikely(!p->sched_class->uclamp_enabled))
< 		return;
< 
< 	for_each_clamp_id(clamp_id)
< 		uclamp_rq_inc_id(rq, p, clamp_id);
< 
< 	/* Reset clamp idle holding when there is one RUNNABLE task */
< 	if (rq->uclamp_flags & UCLAMP_FLAG_IDLE)
< 		rq->uclamp_flags &= ~UCLAMP_FLAG_IDLE;
< }
< 
< static inline void uclamp_rq_dec(struct rq *rq, struct task_struct *p)
< {
< 	enum uclamp_id clamp_id;
< 
< 	/*
< 	 * Avoid any overhead until uclamp is actually used by the userspace.
< 	 *
< 	 * The condition is constructed such that a NOP is generated when
< 	 * sched_uclamp_used is disabled.
< 	 */
< 	if (!static_branch_unlikely(&sched_uclamp_used))
< 		return;
< 
< 	if (unlikely(!p->sched_class->uclamp_enabled))
< 		return;
< 
< 	for_each_clamp_id(clamp_id)
< 		uclamp_rq_dec_id(rq, p, clamp_id);
< }
< 
< static inline void uclamp_rq_reinc_id(struct rq *rq, struct task_struct *p,
< 				      enum uclamp_id clamp_id)
< {
< 	if (!p->uclamp[clamp_id].active)
< 		return;
< 
< 	uclamp_rq_dec_id(rq, p, clamp_id);
< 	uclamp_rq_inc_id(rq, p, clamp_id);
< 
< 	/*
< 	 * Make sure to clear the idle flag if we've transiently reached 0
< 	 * active tasks on rq.
< 	 */
< 	if (clamp_id == UCLAMP_MAX && (rq->uclamp_flags & UCLAMP_FLAG_IDLE))
< 		rq->uclamp_flags &= ~UCLAMP_FLAG_IDLE;
< }
< 
< static inline void
< uclamp_update_active(struct task_struct *p)
< {
< 	enum uclamp_id clamp_id;
< 	struct rq_flags rf;
< 	struct rq *rq;
< 
< 	/*
< 	 * Lock the task and the rq where the task is (or was) queued.
< 	 *
< 	 * We might lock the (previous) rq of a !RUNNABLE task, but that's the
< 	 * price to pay to safely serialize util_{min,max} updates with
< 	 * enqueues, dequeues and migration operations.
< 	 * This is the same locking schema used by __set_cpus_allowed_ptr().
< 	 */
< 	rq = task_rq_lock(p, &rf);
< 
< 	/*
< 	 * Setting the clamp bucket is serialized by task_rq_lock().
< 	 * If the task is not yet RUNNABLE and its task_struct is not
< 	 * affecting a valid clamp bucket, the next time it's enqueued,
< 	 * it will already see the updated clamp bucket value.
< 	 */
< 	for_each_clamp_id(clamp_id)
< 		uclamp_rq_reinc_id(rq, p, clamp_id);
< 
< 	task_rq_unlock(rq, p, &rf);
< }
< 
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< static inline void
< uclamp_update_active_tasks(struct cgroup_subsys_state *css)
< {
< 	struct css_task_iter it;
< 	struct task_struct *p;
< 
< 	css_task_iter_start(css, 0, &it);
< 	while ((p = css_task_iter_next(&it)))
< 		uclamp_update_active(p);
< 	css_task_iter_end(&it);
< }
< 
< static void cpu_util_update_eff(struct cgroup_subsys_state *css);
< static void uclamp_update_root_tg(void)
< {
< 	struct task_group *tg = &root_task_group;
< 
< 	uclamp_se_set(&tg->uclamp_req[UCLAMP_MIN],
< 		      sysctl_sched_uclamp_util_min, false);
< 	uclamp_se_set(&tg->uclamp_req[UCLAMP_MAX],
< 		      sysctl_sched_uclamp_util_max, false);
< 
< 	rcu_read_lock();
< 	cpu_util_update_eff(&root_task_group.css);
< 	rcu_read_unlock();
< }
< #else
< static void uclamp_update_root_tg(void) { }
< #endif
< 
< int sysctl_sched_uclamp_handler(struct ctl_table *table, int write,
< 				void *buffer, size_t *lenp, loff_t *ppos)
< {
< 	bool update_root_tg = false;
< 	int old_min, old_max, old_min_rt;
< 	int result;
< 
< 	mutex_lock(&uclamp_mutex);
< 	old_min = sysctl_sched_uclamp_util_min;
< 	old_max = sysctl_sched_uclamp_util_max;
< 	old_min_rt = sysctl_sched_uclamp_util_min_rt_default;
< 
< 	result = proc_dointvec(table, write, buffer, lenp, ppos);
< 	if (result)
< 		goto undo;
< 	if (!write)
< 		goto done;
< 
< 	if (sysctl_sched_uclamp_util_min > sysctl_sched_uclamp_util_max ||
< 	    sysctl_sched_uclamp_util_max > SCHED_CAPACITY_SCALE	||
< 	    sysctl_sched_uclamp_util_min_rt_default > SCHED_CAPACITY_SCALE) {
< 
< 		result = -EINVAL;
< 		goto undo;
< 	}
< 
< 	if (old_min != sysctl_sched_uclamp_util_min) {
< 		uclamp_se_set(&uclamp_default[UCLAMP_MIN],
< 			      sysctl_sched_uclamp_util_min, false);
< 		update_root_tg = true;
< 	}
< 	if (old_max != sysctl_sched_uclamp_util_max) {
< 		uclamp_se_set(&uclamp_default[UCLAMP_MAX],
< 			      sysctl_sched_uclamp_util_max, false);
< 		update_root_tg = true;
< 	}
< 
< 	if (update_root_tg) {
< 		static_branch_enable(&sched_uclamp_used);
< 		uclamp_update_root_tg();
< 	}
< 
< 	if (old_min_rt != sysctl_sched_uclamp_util_min_rt_default) {
< 		static_branch_enable(&sched_uclamp_used);
< 		uclamp_sync_util_min_rt_default();
< 	}
< 
< 	/*
< 	 * We update all RUNNABLE tasks only when task groups are in use.
< 	 * Otherwise, keep it simple and do just a lazy update at each next
< 	 * task enqueue time.
< 	 */
< 
< 	goto done;
< 
< undo:
< 	sysctl_sched_uclamp_util_min = old_min;
< 	sysctl_sched_uclamp_util_max = old_max;
< 	sysctl_sched_uclamp_util_min_rt_default = old_min_rt;
< done:
< 	mutex_unlock(&uclamp_mutex);
< 
< 	return result;
< }
< 
< static int uclamp_validate(struct task_struct *p,
< 			   const struct sched_attr *attr)
< {
< 	int util_min = p->uclamp_req[UCLAMP_MIN].value;
< 	int util_max = p->uclamp_req[UCLAMP_MAX].value;
< 
< 	if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MIN) {
< 		util_min = attr->sched_util_min;
< 
< 		if (util_min + 1 > SCHED_CAPACITY_SCALE + 1)
< 			return -EINVAL;
< 	}
< 
< 	if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MAX) {
< 		util_max = attr->sched_util_max;
< 
< 		if (util_max + 1 > SCHED_CAPACITY_SCALE + 1)
< 			return -EINVAL;
< 	}
< 
< 	if (util_min != -1 && util_max != -1 && util_min > util_max)
< 		return -EINVAL;
< 
< 	/*
< 	 * We have valid uclamp attributes; make sure uclamp is enabled.
< 	 *
< 	 * We need to do that here, because enabling static branches is a
< 	 * blocking operation which obviously cannot be done while holding
< 	 * scheduler locks.
< 	 */
< 	static_branch_enable(&sched_uclamp_used);
< 
< 	return 0;
< }
< 
< static bool uclamp_reset(const struct sched_attr *attr,
< 			 enum uclamp_id clamp_id,
< 			 struct uclamp_se *uc_se)
< {
< 	/* Reset on sched class change for a non user-defined clamp value. */
< 	if (likely(!(attr->sched_flags & SCHED_FLAG_UTIL_CLAMP)) &&
< 	    !uc_se->user_defined)
< 		return true;
< 
< 	/* Reset on sched_util_{min,max} == -1. */
< 	if (clamp_id == UCLAMP_MIN &&
< 	    attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MIN &&
< 	    attr->sched_util_min == -1) {
< 		return true;
< 	}
< 
< 	if (clamp_id == UCLAMP_MAX &&
< 	    attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MAX &&
< 	    attr->sched_util_max == -1) {
< 		return true;
< 	}
< 
< 	return false;
< }
< 
< static void __setscheduler_uclamp(struct task_struct *p,
< 				  const struct sched_attr *attr)
< {
< 	enum uclamp_id clamp_id;
< 
< 	for_each_clamp_id(clamp_id) {
< 		struct uclamp_se *uc_se = &p->uclamp_req[clamp_id];
< 		unsigned int value;
< 
< 		if (!uclamp_reset(attr, clamp_id, uc_se))
< 			continue;
< 
< 		/*
< 		 * RT by default have a 100% boost value that could be modified
< 		 * at runtime.
< 		 */
< 		if (unlikely(rt_task(p) && clamp_id == UCLAMP_MIN))
< 			value = sysctl_sched_uclamp_util_min_rt_default;
< 		else
< 			value = uclamp_none(clamp_id);
< 
< 		uclamp_se_set(uc_se, value, false);
< 
< 	}
< 
< 	if (likely(!(attr->sched_flags & SCHED_FLAG_UTIL_CLAMP)))
< 		return;
< 
< 	if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MIN &&
< 	    attr->sched_util_min != -1) {
< 		uclamp_se_set(&p->uclamp_req[UCLAMP_MIN],
< 			      attr->sched_util_min, true);
< 	}
< 
< 	if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP_MAX &&
< 	    attr->sched_util_max != -1) {
< 		uclamp_se_set(&p->uclamp_req[UCLAMP_MAX],
< 			      attr->sched_util_max, true);
< 	}
< }
< 
< static void uclamp_fork(struct task_struct *p)
< {
< 	enum uclamp_id clamp_id;
< 
< 	/*
< 	 * We don't need to hold task_rq_lock() when updating p->uclamp_* here
< 	 * as the task is still at its early fork stages.
< 	 */
< 	for_each_clamp_id(clamp_id)
< 		p->uclamp[clamp_id].active = false;
< 
< 	if (likely(!p->sched_reset_on_fork))
< 		return;
< 
< 	for_each_clamp_id(clamp_id) {
< 		uclamp_se_set(&p->uclamp_req[clamp_id],
< 			      uclamp_none(clamp_id), false);
< 	}
< }
< 
< static void uclamp_post_fork(struct task_struct *p)
< {
< 	uclamp_update_util_min_rt_default(p);
< }
< 
< static void __init init_uclamp_rq(struct rq *rq)
< {
< 	enum uclamp_id clamp_id;
< 	struct uclamp_rq *uc_rq = rq->uclamp;
< 
< 	for_each_clamp_id(clamp_id) {
< 		uc_rq[clamp_id] = (struct uclamp_rq) {
< 			.value = uclamp_none(clamp_id)
< 		};
< 	}
< 
< 	rq->uclamp_flags = 0;
< }
< 
< static void __init init_uclamp(void)
< {
< 	struct uclamp_se uc_max = {};
< 	enum uclamp_id clamp_id;
< 	int cpu;
< 
< 	for_each_possible_cpu(cpu)
< 		init_uclamp_rq(cpu_rq(cpu));
< 
< 	for_each_clamp_id(clamp_id) {
< 		uclamp_se_set(&init_task.uclamp_req[clamp_id],
< 			      uclamp_none(clamp_id), false);
< 	}
< 
< 	/* System defaults allow max clamp values for both indexes */
< 	uclamp_se_set(&uc_max, uclamp_none(UCLAMP_MAX), false);
< 	for_each_clamp_id(clamp_id) {
< 		uclamp_default[clamp_id] = uc_max;
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 		root_task_group.uclamp_req[clamp_id] = uc_max;
< 		root_task_group.uclamp[clamp_id] = uc_max;
< #endif
< 	}
< }
< 
< #else /* CONFIG_UCLAMP_TASK */
< static inline void uclamp_rq_inc(struct rq *rq, struct task_struct *p) { }
< static inline void uclamp_rq_dec(struct rq *rq, struct task_struct *p) { }
< static inline int uclamp_validate(struct task_struct *p,
< 				  const struct sched_attr *attr)
< {
< 	return -EOPNOTSUPP;
< }
< static void __setscheduler_uclamp(struct task_struct *p,
< 				  const struct sched_attr *attr) { }
< static inline void uclamp_fork(struct task_struct *p) { }
< static inline void uclamp_post_fork(struct task_struct *p) { }
< static inline void init_uclamp(void) { }
< #endif /* CONFIG_UCLAMP_TASK */
< 
< bool sched_task_on_rq(struct task_struct *p)
< {
< 	return task_on_rq_queued(p);
< }
< 
1970,1973c768,769
< 	if (!(flags & ENQUEUE_RESTORE)) {
< 		sched_info_enqueue(rq, p);
< 		psi_enqueue(p, flags & ENQUEUE_WAKEUP);
< 	}
---
> 	if (!(flags & ENQUEUE_RESTORE))
> 		sched_info_queued(rq, p);
1975d770
< 	uclamp_rq_inc(rq, p);
1977,1979d771
< 
< 	if (sched_core_enabled(rq))
< 		sched_core_enqueue(rq, p);
1984,1986d775
< 	if (sched_core_enabled(rq))
< 		sched_core_dequeue(rq, p);
< 
1990,1993c779,780
< 	if (!(flags & DEQUEUE_SAVE)) {
< 		sched_info_dequeue(rq, p);
< 		psi_dequeue(p, flags & DEQUEUE_SLEEP);
< 	}
---
> 	if (!(flags & DEQUEUE_SAVE))
> 		sched_info_dequeued(rq, p);
1995d781
< 	uclamp_rq_dec(rq, p);
2001c787,788
< 	enqueue_task(rq, p, flags);
---
> 	if (task_contributes_to_load(p))
> 		rq->nr_uninterruptible--;
2003c790
< 	p->on_rq = TASK_ON_RQ_QUEUED;
---
> 	enqueue_task(rq, p, flags);
2008c795,796
< 	p->on_rq = (flags & DEQUEUE_SLEEP) ? 0 : TASK_ON_RQ_MIGRATING;
---
> 	if (task_contributes_to_load(p))
> 		rq->nr_uninterruptible++;
2013c801,804
< static inline int __normal_prio(int policy, int rt_prio, int nice)
---
> /*
>  * __normal_prio - return the priority that is based on the static prio
>  */
> static inline int __normal_prio(struct task_struct *p)
2015,2024c806
< 	int prio;
< 
< 	if (dl_policy(policy))
< 		prio = MAX_DL_PRIO - 1;
< 	else if (rt_policy(policy))
< 		prio = MAX_RT_PRIO - 1 - rt_prio;
< 	else
< 		prio = NICE_TO_PRIO(nice);
< 
< 	return prio;
---
> 	return p->static_prio;
2036c818,826
< 	return __normal_prio(p->policy, p->rt_priority, PRIO_TO_NICE(p->static_prio));
---
> 	int prio;
> 
> 	if (task_has_dl_policy(p))
> 		prio = MAX_DL_PRIO-1;
> 	else if (task_has_rt_policy(p))
> 		prio = MAX_RT_PRIO-1 - p->rt_priority;
> 	else
> 		prio = __normal_prio(p);
> 	return prio;
2092c882,884
< 	if (p->sched_class == rq->curr->sched_class)
---
> 	const struct sched_class *class;
> 
> 	if (p->sched_class == rq->curr->sched_class) {
2094,2095c886,895
< 	else if (p->sched_class > rq->curr->sched_class)
< 		resched_curr(rq);
---
> 	} else {
> 		for_each_class(class) {
> 			if (class == rq->curr->sched_class)
> 				break;
> 			if (class == p->sched_class) {
> 				resched_curr(rq);
> 				break;
> 			}
> 		}
> 	}
2102c902
< 		rq_clock_skip_update(rq);
---
> 		rq_clock_skip_update(rq, true);
2106,2206d905
< 
< static void
< __do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask, u32 flags);
< 
< static int __set_cpus_allowed_ptr(struct task_struct *p,
< 				  const struct cpumask *new_mask,
< 				  u32 flags);
< 
< static void migrate_disable_switch(struct rq *rq, struct task_struct *p)
< {
< 	if (likely(!p->migration_disabled))
< 		return;
< 
< 	if (p->cpus_ptr != &p->cpus_mask)
< 		return;
< 
< 	/*
< 	 * Violates locking rules! see comment in __do_set_cpus_allowed().
< 	 */
< 	__do_set_cpus_allowed(p, cpumask_of(rq->cpu), SCA_MIGRATE_DISABLE);
< }
< 
< void migrate_disable(void)
< {
< 	struct task_struct *p = current;
< 
< 	if (p->migration_disabled) {
< 		p->migration_disabled++;
< 		return;
< 	}
< 
< 	preempt_disable();
< 	this_rq()->nr_pinned++;
< 	p->migration_disabled = 1;
< 	preempt_enable();
< }
< EXPORT_SYMBOL_GPL(migrate_disable);
< 
< void migrate_enable(void)
< {
< 	struct task_struct *p = current;
< 
< 	if (p->migration_disabled > 1) {
< 		p->migration_disabled--;
< 		return;
< 	}
< 
< 	/*
< 	 * Ensure stop_task runs either before or after this, and that
< 	 * __set_cpus_allowed_ptr(SCA_MIGRATE_ENABLE) doesn't schedule().
< 	 */
< 	preempt_disable();
< 	if (p->cpus_ptr != &p->cpus_mask)
< 		__set_cpus_allowed_ptr(p, &p->cpus_mask, SCA_MIGRATE_ENABLE);
< 	/*
< 	 * Mustn't clear migration_disabled() until cpus_ptr points back at the
< 	 * regular cpus_mask, otherwise things that race (eg.
< 	 * select_fallback_rq) get confused.
< 	 */
< 	barrier();
< 	p->migration_disabled = 0;
< 	this_rq()->nr_pinned--;
< 	preempt_enable();
< }
< EXPORT_SYMBOL_GPL(migrate_enable);
< 
< static inline bool rq_has_pinned_tasks(struct rq *rq)
< {
< 	return rq->nr_pinned;
< }
< 
< /*
<  * Per-CPU kthreads are allowed to run on !active && online CPUs, see
<  * __set_cpus_allowed_ptr() and select_fallback_rq().
<  */
< static inline bool is_cpu_allowed(struct task_struct *p, int cpu)
< {
< 	/* When not in the task's cpumask, no point in looking further. */
< 	if (!cpumask_test_cpu(cpu, p->cpus_ptr))
< 		return false;
< 
< 	/* migrate_disabled() must be allowed to finish. */
< 	if (is_migration_disabled(p))
< 		return cpu_online(cpu);
< 
< 	/* Non kernel threads are not allowed during either online or offline. */
< 	if (!(p->flags & PF_KTHREAD))
< 		return cpu_active(cpu) && task_cpu_possible(cpu, p);
< 
< 	/* KTHREAD_IS_PER_CPU is always allowed. */
< 	if (kthread_is_per_cpu(p))
< 		return cpu_online(cpu);
< 
< 	/* Regular kernel threads don't get to stay during offline. */
< 	if (cpu_dying(cpu))
< 		return false;
< 
< 	/* But are allowed during online. */
< 	return cpu_online(cpu);
< }
< 
2229c928
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
2231c930,931
< 	deactivate_task(rq, p, DEQUEUE_NOCLOCK);
---
> 	p->on_rq = TASK_ON_RQ_MIGRATING;
> 	dequeue_task(rq, p, DEQUEUE_NOCLOCK);
2239c939,940
< 	activate_task(rq, p, 0);
---
> 	enqueue_task(rq, p, 0);
> 	p->on_rq = TASK_ON_RQ_QUEUED;
2246,2260c947,948
< 	struct task_struct		*task;
< 	int				dest_cpu;
< 	struct set_affinity_pending	*pending;
< };
< 
< /*
<  * @refs: number of wait_for_completion()
<  * @stop_pending: is @stop_work in use
<  */
< struct set_affinity_pending {
< 	refcount_t		refs;
< 	unsigned int		stop_pending;
< 	struct completion	done;
< 	struct cpu_stop_work	stop_work;
< 	struct migration_arg	arg;
---
> 	struct task_struct *task;
> 	int dest_cpu;
2274a963,970
> 	if (p->flags & PF_KTHREAD) {
> 		if (unlikely(!cpu_online(dest_cpu)))
> 			return rq;
> 	} else {
> 		if (unlikely(!cpu_active(dest_cpu)))
> 			return rq;
> 	}
> 
2276c972
< 	if (!is_cpu_allowed(p, dest_cpu))
---
> 	if (!cpumask_test_cpu(dest_cpu, &p->cpus_allowed))
2293d988
< 	struct set_affinity_pending *pending = arg->pending;
2296d990
< 	bool complete = false;
2303c997
< 	local_irq_save(rf.flags);
---
> 	local_irq_disable();
2306c1000
< 	 * __migrate_task() such that we will not miss enforcing cpus_ptr
---
> 	 * __migrate_task() such that we will not miss enforcing cpus_allowed
2309c1003
< 	flush_smp_call_function_from_idle();
---
> 	sched_ttwu_pending();
2313,2319d1006
< 
< 	/*
< 	 * If we were passed a pending, then ->stop_pending was set, thus
< 	 * p->migration_pending must have remained stable.
< 	 */
< 	WARN_ON_ONCE(pending && pending != p->migration_pending);
< 
2326,2336d1012
< 		if (is_migration_disabled(p))
< 			goto out;
< 
< 		if (pending) {
< 			p->migration_pending = NULL;
< 			complete = true;
< 
< 			if (cpumask_test_cpu(task_cpu(p), &p->cpus_mask))
< 				goto out;
< 		}
< 
2341,2421d1016
< 
< 		/*
< 		 * XXX __migrate_task() can fail, at which point we might end
< 		 * up running on a dodgy CPU, AFAICT this can only happen
< 		 * during CPU hotplug, at which point we'll get pushed out
< 		 * anyway, so it's probably not a big deal.
< 		 */
< 
< 	} else if (pending) {
< 		/*
< 		 * This happens when we get migrated between migrate_enable()'s
< 		 * preempt_enable() and scheduling the stopper task. At that
< 		 * point we're a regular task again and not current anymore.
< 		 *
< 		 * A !PREEMPT kernel has a giant hole here, which makes it far
< 		 * more likely.
< 		 */
< 
< 		/*
< 		 * The task moved before the stopper got to run. We're holding
< 		 * ->pi_lock, so the allowed mask is stable - if it got
< 		 * somewhere allowed, we're done.
< 		 */
< 		if (cpumask_test_cpu(task_cpu(p), p->cpus_ptr)) {
< 			p->migration_pending = NULL;
< 			complete = true;
< 			goto out;
< 		}
< 
< 		/*
< 		 * When migrate_enable() hits a rq mis-match we can't reliably
< 		 * determine is_migration_disabled() and so have to chase after
< 		 * it.
< 		 */
< 		WARN_ON_ONCE(!pending->stop_pending);
< 		task_rq_unlock(rq, p, &rf);
< 		stop_one_cpu_nowait(task_cpu(p), migration_cpu_stop,
< 				    &pending->arg, &pending->stop_work);
< 		return 0;
< 	}
< out:
< 	if (pending)
< 		pending->stop_pending = false;
< 	task_rq_unlock(rq, p, &rf);
< 
< 	if (complete)
< 		complete_all(&pending->done);
< 
< 	return 0;
< }
< 
< int push_cpu_stop(void *arg)
< {
< 	struct rq *lowest_rq = NULL, *rq = this_rq();
< 	struct task_struct *p = arg;
< 
< 	raw_spin_lock_irq(&p->pi_lock);
< 	raw_spin_rq_lock(rq);
< 
< 	if (task_rq(p) != rq)
< 		goto out_unlock;
< 
< 	if (is_migration_disabled(p)) {
< 		p->migration_flags |= MDF_PUSH;
< 		goto out_unlock;
< 	}
< 
< 	p->migration_flags &= ~MDF_PUSH;
< 
< 	if (p->sched_class->find_lock_rq)
< 		lowest_rq = p->sched_class->find_lock_rq(p, rq);
< 
< 	if (!lowest_rq)
< 		goto out_unlock;
< 
< 	// XXX validate p is still the highest prio task
< 	if (task_rq(p) == rq) {
< 		deactivate_task(rq, p, 0);
< 		set_task_cpu(p, lowest_rq->cpu);
< 		activate_task(lowest_rq, p, 0);
< 		resched_curr(lowest_rq);
2422a1018,1019
> 	rq_unlock(rq, &rf);
> 	raw_spin_unlock(&p->pi_lock);
2424,2431c1021
< 	double_unlock_balance(rq, lowest_rq);
< 
< out_unlock:
< 	rq->push_busy = false;
< 	raw_spin_rq_unlock(rq);
< 	raw_spin_unlock_irq(&p->pi_lock);
< 
< 	put_task_struct(p);
---
> 	local_irq_enable();
2439c1029
< void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_mask, u32 flags)
---
> void set_cpus_allowed_common(struct task_struct *p, const struct cpumask *new_mask)
2441,2446c1031
< 	if (flags & (SCA_MIGRATE_ENABLE | SCA_MIGRATE_DISABLE)) {
< 		p->cpus_ptr = new_mask;
< 		return;
< 	}
< 
< 	cpumask_copy(&p->cpus_mask, new_mask);
---
> 	cpumask_copy(&p->cpus_allowed, new_mask);
2450,2451c1035
< static void
< __do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask, u32 flags)
---
> void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
2456,2471c1040
< 	/*
< 	 * This here violates the locking rules for affinity, since we're only
< 	 * supposed to change these variables while holding both rq->lock and
< 	 * p->pi_lock.
< 	 *
< 	 * HOWEVER, it magically works, because ttwu() is the only code that
< 	 * accesses these variables under p->pi_lock and only does so after
< 	 * smp_cond_load_acquire(&p->on_cpu, !VAL), and we're in __schedule()
< 	 * before finish_task().
< 	 *
< 	 * XXX do further audits, this smells like something putrid.
< 	 */
< 	if (flags & SCA_MIGRATE_DISABLE)
< 		SCHED_WARN_ON(!p->on_cpu);
< 	else
< 		lockdep_assert_held(&p->pi_lock);
---
> 	lockdep_assert_held(&p->pi_lock);
2481c1050
< 		lockdep_assert_rq_held(rq);
---
> 		lockdep_assert_held(&rq->lock);
2487c1056
< 	p->sched_class->set_cpus_allowed(p, new_mask, flags);
---
> 	p->sched_class->set_cpus_allowed(p, new_mask);
2492,2525c1061
< 		set_next_task(rq, p);
< }
< 
< void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
< {
< 	__do_set_cpus_allowed(p, new_mask, 0);
< }
< 
< int dup_user_cpus_ptr(struct task_struct *dst, struct task_struct *src,
< 		      int node)
< {
< 	if (!src->user_cpus_ptr)
< 		return 0;
< 
< 	dst->user_cpus_ptr = kmalloc_node(cpumask_size(), GFP_KERNEL, node);
< 	if (!dst->user_cpus_ptr)
< 		return -ENOMEM;
< 
< 	cpumask_copy(dst->user_cpus_ptr, src->user_cpus_ptr);
< 	return 0;
< }
< 
< static inline struct cpumask *clear_user_cpus_ptr(struct task_struct *p)
< {
< 	struct cpumask *user_mask = NULL;
< 
< 	swap(p->user_cpus_ptr, user_mask);
< 
< 	return user_mask;
< }
< 
< void release_user_cpus_ptr(struct task_struct *p)
< {
< 	kfree(clear_user_cpus_ptr(p));
---
> 		set_curr_task(rq, p);
2529,2598c1065,1067
<  * This function is wildly self concurrent; here be dragons.
<  *
<  *
<  * When given a valid mask, __set_cpus_allowed_ptr() must block until the
<  * designated task is enqueued on an allowed CPU. If that task is currently
<  * running, we have to kick it out using the CPU stopper.
<  *
<  * Migrate-Disable comes along and tramples all over our nice sandcastle.
<  * Consider:
<  *
<  *     Initial conditions: P0->cpus_mask = [0, 1]
<  *
<  *     P0@CPU0                  P1
<  *
<  *     migrate_disable();
<  *     <preempted>
<  *                              set_cpus_allowed_ptr(P0, [1]);
<  *
<  * P1 *cannot* return from this set_cpus_allowed_ptr() call until P0 executes
<  * its outermost migrate_enable() (i.e. it exits its Migrate-Disable region).
<  * This means we need the following scheme:
<  *
<  *     P0@CPU0                  P1
<  *
<  *     migrate_disable();
<  *     <preempted>
<  *                              set_cpus_allowed_ptr(P0, [1]);
<  *                                <blocks>
<  *     <resumes>
<  *     migrate_enable();
<  *       __set_cpus_allowed_ptr();
<  *       <wakes local stopper>
<  *                         `--> <woken on migration completion>
<  *
<  * Now the fun stuff: there may be several P1-like tasks, i.e. multiple
<  * concurrent set_cpus_allowed_ptr(P0, [*]) calls. CPU affinity changes of any
<  * task p are serialized by p->pi_lock, which we can leverage: the one that
<  * should come into effect at the end of the Migrate-Disable region is the last
<  * one. This means we only need to track a single cpumask (i.e. p->cpus_mask),
<  * but we still need to properly signal those waiting tasks at the appropriate
<  * moment.
<  *
<  * This is implemented using struct set_affinity_pending. The first
<  * __set_cpus_allowed_ptr() caller within a given Migrate-Disable region will
<  * setup an instance of that struct and install it on the targeted task_struct.
<  * Any and all further callers will reuse that instance. Those then wait for
<  * a completion signaled at the tail of the CPU stopper callback (1), triggered
<  * on the end of the Migrate-Disable region (i.e. outermost migrate_enable()).
<  *
<  *
<  * (1) In the cases covered above. There is one more where the completion is
<  * signaled within affine_move_task() itself: when a subsequent affinity request
<  * occurs after the stopper bailed out due to the targeted task still being
<  * Migrate-Disable. Consider:
<  *
<  *     Initial conditions: P0->cpus_mask = [0, 1]
<  *
<  *     CPU0		  P1				P2
<  *     <P0>
<  *       migrate_disable();
<  *       <preempted>
<  *                        set_cpus_allowed_ptr(P0, [1]);
<  *                          <blocks>
<  *     <migration/0>
<  *       migration_cpu_stop()
<  *         is_migration_disabled()
<  *           <bails>
<  *                                                       set_cpus_allowed_ptr(P0, [0, 1]);
<  *                                                         <signal completion>
<  *                          <awakes>
---
>  * Change a given task's CPU affinity. Migrate the thread to a
>  * proper CPU and schedule it away if the CPU it's executing on
>  * is removed from the allowed bitmask.
2600,2745c1069,1071
<  * Note that the above is safe vs a concurrent migrate_enable(), as any
<  * pending affinity completion is preceded by an uninstallation of
<  * p->migration_pending done with p->pi_lock held.
<  */
< static int affine_move_task(struct rq *rq, struct task_struct *p, struct rq_flags *rf,
< 			    int dest_cpu, unsigned int flags)
< {
< 	struct set_affinity_pending my_pending = { }, *pending = NULL;
< 	bool stop_pending, complete = false;
< 
< 	/* Can the task run on the task's current CPU? If so, we're done */
< 	if (cpumask_test_cpu(task_cpu(p), &p->cpus_mask)) {
< 		struct task_struct *push_task = NULL;
< 
< 		if ((flags & SCA_MIGRATE_ENABLE) &&
< 		    (p->migration_flags & MDF_PUSH) && !rq->push_busy) {
< 			rq->push_busy = true;
< 			push_task = get_task_struct(p);
< 		}
< 
< 		/*
< 		 * If there are pending waiters, but no pending stop_work,
< 		 * then complete now.
< 		 */
< 		pending = p->migration_pending;
< 		if (pending && !pending->stop_pending) {
< 			p->migration_pending = NULL;
< 			complete = true;
< 		}
< 
< 		task_rq_unlock(rq, p, rf);
< 
< 		if (push_task) {
< 			stop_one_cpu_nowait(rq->cpu, push_cpu_stop,
< 					    p, &rq->push_work);
< 		}
< 
< 		if (complete)
< 			complete_all(&pending->done);
< 
< 		return 0;
< 	}
< 
< 	if (!(flags & SCA_MIGRATE_ENABLE)) {
< 		/* serialized by p->pi_lock */
< 		if (!p->migration_pending) {
< 			/* Install the request */
< 			refcount_set(&my_pending.refs, 1);
< 			init_completion(&my_pending.done);
< 			my_pending.arg = (struct migration_arg) {
< 				.task = p,
< 				.dest_cpu = dest_cpu,
< 				.pending = &my_pending,
< 			};
< 
< 			p->migration_pending = &my_pending;
< 		} else {
< 			pending = p->migration_pending;
< 			refcount_inc(&pending->refs);
< 			/*
< 			 * Affinity has changed, but we've already installed a
< 			 * pending. migration_cpu_stop() *must* see this, else
< 			 * we risk a completion of the pending despite having a
< 			 * task on a disallowed CPU.
< 			 *
< 			 * Serialized by p->pi_lock, so this is safe.
< 			 */
< 			pending->arg.dest_cpu = dest_cpu;
< 		}
< 	}
< 	pending = p->migration_pending;
< 	/*
< 	 * - !MIGRATE_ENABLE:
< 	 *   we'll have installed a pending if there wasn't one already.
< 	 *
< 	 * - MIGRATE_ENABLE:
< 	 *   we're here because the current CPU isn't matching anymore,
< 	 *   the only way that can happen is because of a concurrent
< 	 *   set_cpus_allowed_ptr() call, which should then still be
< 	 *   pending completion.
< 	 *
< 	 * Either way, we really should have a @pending here.
< 	 */
< 	if (WARN_ON_ONCE(!pending)) {
< 		task_rq_unlock(rq, p, rf);
< 		return -EINVAL;
< 	}
< 
< 	if (task_running(rq, p) || READ_ONCE(p->__state) == TASK_WAKING) {
< 		/*
< 		 * MIGRATE_ENABLE gets here because 'p == current', but for
< 		 * anything else we cannot do is_migration_disabled(), punt
< 		 * and have the stopper function handle it all race-free.
< 		 */
< 		stop_pending = pending->stop_pending;
< 		if (!stop_pending)
< 			pending->stop_pending = true;
< 
< 		if (flags & SCA_MIGRATE_ENABLE)
< 			p->migration_flags &= ~MDF_PUSH;
< 
< 		task_rq_unlock(rq, p, rf);
< 
< 		if (!stop_pending) {
< 			stop_one_cpu_nowait(cpu_of(rq), migration_cpu_stop,
< 					    &pending->arg, &pending->stop_work);
< 		}
< 
< 		if (flags & SCA_MIGRATE_ENABLE)
< 			return 0;
< 	} else {
< 
< 		if (!is_migration_disabled(p)) {
< 			if (task_on_rq_queued(p))
< 				rq = move_queued_task(rq, rf, p, dest_cpu);
< 
< 			if (!pending->stop_pending) {
< 				p->migration_pending = NULL;
< 				complete = true;
< 			}
< 		}
< 		task_rq_unlock(rq, p, rf);
< 
< 		if (complete)
< 			complete_all(&pending->done);
< 	}
< 
< 	wait_for_completion(&pending->done);
< 
< 	if (refcount_dec_and_test(&pending->refs))
< 		wake_up_var(&pending->refs); /* No UaF, just an address */
< 
< 	/*
< 	 * Block the original owner of &pending until all subsequent callers
< 	 * have seen the completion and decremented the refcount
< 	 */
< 	wait_var_event(&my_pending.refs, !refcount_read(&my_pending.refs));
< 
< 	/* ARGH */
< 	WARN_ON_ONCE(my_pending.stop_pending);
< 
< 	return 0;
< }
< 
< /*
<  * Called with both p->pi_lock and rq->lock held; drops both before returning.
---
>  * NOTE: the caller must have a valid reference to the task, the
>  * task must not exit() & deallocate itself prematurely. The
>  * call is not atomic; no spinlocks may be held.
2747,2753c1073,1074
< static int __set_cpus_allowed_ptr_locked(struct task_struct *p,
< 					 const struct cpumask *new_mask,
< 					 u32 flags,
< 					 struct rq *rq,
< 					 struct rq_flags *rf)
< 	__releases(rq->lock)
< 	__releases(p->pi_lock)
---
> static int __set_cpus_allowed_ptr(struct task_struct *p,
> 				  const struct cpumask *new_mask, bool check)
2755d1075
< 	const struct cpumask *cpu_allowed_mask = task_cpu_possible_mask(p);
2757,2758d1076
< 	bool kthread = p->flags & PF_KTHREAD;
< 	struct cpumask *user_mask = NULL;
2759a1078,1079
> 	struct rq_flags rf;
> 	struct rq *rq;
2761a1082
> 	rq = task_rq_lock(p, &rf);
2764c1085
< 	if (kthread || is_migration_disabled(p)) {
---
> 	if (p->flags & PF_KTHREAD) {
2766,2773c1087
< 		 * Kernel threads are allowed on online && !active CPUs,
< 		 * however, during cpu-hot-unplug, even these might get pushed
< 		 * away if not KTHREAD_IS_PER_CPU.
< 		 *
< 		 * Specifically, migration_disabled() tasks must not fail the
< 		 * cpumask_any_and_distribute() pick below, esp. so on
< 		 * SCA_MIGRATE_ENABLE, otherwise we'll not call
< 		 * set_cpus_allowed_common() and actually reset p->cpus_ptr.
---
> 		 * Kernel threads are allowed on online && !active CPUs
2778,2782d1091
< 	if (!kthread && !cpumask_subset(new_mask, cpu_allowed_mask)) {
< 		ret = -EINVAL;
< 		goto out;
< 	}
< 
2787c1096
< 	if ((flags & SCA_CHECK) && (p->flags & PF_NO_SETAFFINITY)) {
---
> 	if (check && (p->flags & PF_NO_SETAFFINITY)) {
2792,2802c1101,1102
< 	if (!(flags & SCA_MIGRATE_ENABLE)) {
< 		if (cpumask_equal(&p->cpus_mask, new_mask))
< 			goto out;
< 
< 		if (WARN_ON_ONCE(p == current &&
< 				 is_migration_disabled(p) &&
< 				 !cpumask_test_cpu(task_cpu(p), new_mask))) {
< 			ret = -EBUSY;
< 			goto out;
< 		}
< 	}
---
> 	if (cpumask_equal(&p->cpus_allowed, new_mask))
> 		goto out;
2804,2810c1104
< 	/*
< 	 * Picking a ~random cpu helps in cases where we are changing affinity
< 	 * for groups of tasks (ie. cpuset), so that load balancing is not
< 	 * immediately required to distribute the tasks within their new mask.
< 	 */
< 	dest_cpu = cpumask_any_and_distribute(cpu_valid_mask, new_mask);
< 	if (dest_cpu >= nr_cpu_ids) {
---
> 	if (!cpumask_intersects(new_mask, cpu_valid_mask)) {
2815c1109
< 	__do_set_cpus_allowed(p, new_mask, flags);
---
> 	do_set_cpus_allowed(p, new_mask);
2817,2822c1111,1119
< 	if (flags & SCA_USER)
< 		user_mask = clear_user_cpus_ptr(p);
< 
< 	ret = affine_move_task(rq, p, rf, dest_cpu, flags);
< 
< 	kfree(user_mask);
---
> 	if (p->flags & PF_KTHREAD) {
> 		/*
> 		 * For kernel threads that do indeed end up on online &&
> 		 * !active we want to ensure they are strict per-CPU threads.
> 		 */
> 		WARN_ON(cpumask_intersects(new_mask, cpu_online_mask) &&
> 			!cpumask_intersects(new_mask, cpu_active_mask) &&
> 			p->nr_cpus_allowed != 1);
> 	}
2824c1121,1123
< 	return ret;
---
> 	/* Can the task run on the task's current CPU? If so, we're done */
> 	if (cpumask_test_cpu(task_cpu(p), new_mask))
> 		goto out;
2825a1125,1139
> 	dest_cpu = cpumask_any_and(cpu_valid_mask, new_mask);
> 	if (task_running(rq, p) || p->state == TASK_WAKING) {
> 		struct migration_arg arg = { p, dest_cpu };
> 		/* Need help from migration thread: drop lock and wait. */
> 		task_rq_unlock(rq, p, &rf);
> 		stop_one_cpu(cpu_of(rq), migration_cpu_stop, &arg);
> 		tlb_migrate_finish(p->mm);
> 		return 0;
> 	} else if (task_on_rq_queued(p)) {
> 		/*
> 		 * OK, since we're going to drop the lock immediately
> 		 * afterwards anyway.
> 		 */
> 		rq = move_queued_task(rq, &rf, p, dest_cpu);
> 	}
2827c1141
< 	task_rq_unlock(rq, p, rf);
---
> 	task_rq_unlock(rq, p, &rf);
2832,2850d1145
< /*
<  * Change a given task's CPU affinity. Migrate the thread to a
<  * proper CPU and schedule it away if the CPU it's executing on
<  * is removed from the allowed bitmask.
<  *
<  * NOTE: the caller must have a valid reference to the task, the
<  * task must not exit() & deallocate itself prematurely. The
<  * call is not atomic; no spinlocks may be held.
<  */
< static int __set_cpus_allowed_ptr(struct task_struct *p,
< 				  const struct cpumask *new_mask, u32 flags)
< {
< 	struct rq_flags rf;
< 	struct rq *rq;
< 
< 	rq = task_rq_lock(p, &rf);
< 	return __set_cpus_allowed_ptr_locked(p, new_mask, flags, rq, &rf);
< }
< 
2853c1148
< 	return __set_cpus_allowed_ptr(p, new_mask, 0);
---
> 	return __set_cpus_allowed_ptr(p, new_mask, false);
2857,2988d1151
< /*
<  * Change a given task's CPU affinity to the intersection of its current
<  * affinity mask and @subset_mask, writing the resulting mask to @new_mask
<  * and pointing @p->user_cpus_ptr to a copy of the old mask.
<  * If the resulting mask is empty, leave the affinity unchanged and return
<  * -EINVAL.
<  */
< static int restrict_cpus_allowed_ptr(struct task_struct *p,
< 				     struct cpumask *new_mask,
< 				     const struct cpumask *subset_mask)
< {
< 	struct cpumask *user_mask = NULL;
< 	struct rq_flags rf;
< 	struct rq *rq;
< 	int err;
< 
< 	if (!p->user_cpus_ptr) {
< 		user_mask = kmalloc(cpumask_size(), GFP_KERNEL);
< 		if (!user_mask)
< 			return -ENOMEM;
< 	}
< 
< 	rq = task_rq_lock(p, &rf);
< 
< 	/*
< 	 * Forcefully restricting the affinity of a deadline task is
< 	 * likely to cause problems, so fail and noisily override the
< 	 * mask entirely.
< 	 */
< 	if (task_has_dl_policy(p) && dl_bandwidth_enabled()) {
< 		err = -EPERM;
< 		goto err_unlock;
< 	}
< 
< 	if (!cpumask_and(new_mask, &p->cpus_mask, subset_mask)) {
< 		err = -EINVAL;
< 		goto err_unlock;
< 	}
< 
< 	/*
< 	 * We're about to butcher the task affinity, so keep track of what
< 	 * the user asked for in case we're able to restore it later on.
< 	 */
< 	if (user_mask) {
< 		cpumask_copy(user_mask, p->cpus_ptr);
< 		p->user_cpus_ptr = user_mask;
< 	}
< 
< 	return __set_cpus_allowed_ptr_locked(p, new_mask, 0, rq, &rf);
< 
< err_unlock:
< 	task_rq_unlock(rq, p, &rf);
< 	kfree(user_mask);
< 	return err;
< }
< 
< /*
<  * Restrict the CPU affinity of task @p so that it is a subset of
<  * task_cpu_possible_mask() and point @p->user_cpu_ptr to a copy of the
<  * old affinity mask. If the resulting mask is empty, we warn and walk
<  * up the cpuset hierarchy until we find a suitable mask.
<  */
< void force_compatible_cpus_allowed_ptr(struct task_struct *p)
< {
< 	cpumask_var_t new_mask;
< 	const struct cpumask *override_mask = task_cpu_possible_mask(p);
< 
< 	alloc_cpumask_var(&new_mask, GFP_KERNEL);
< 
< 	/*
< 	 * __migrate_task() can fail silently in the face of concurrent
< 	 * offlining of the chosen destination CPU, so take the hotplug
< 	 * lock to ensure that the migration succeeds.
< 	 */
< 	cpus_read_lock();
< 	if (!cpumask_available(new_mask))
< 		goto out_set_mask;
< 
< 	if (!restrict_cpus_allowed_ptr(p, new_mask, override_mask))
< 		goto out_free_mask;
< 
< 	/*
< 	 * We failed to find a valid subset of the affinity mask for the
< 	 * task, so override it based on its cpuset hierarchy.
< 	 */
< 	cpuset_cpus_allowed(p, new_mask);
< 	override_mask = new_mask;
< 
< out_set_mask:
< 	if (printk_ratelimit()) {
< 		printk_deferred("Overriding affinity for process %d (%s) to CPUs %*pbl\n",
< 				task_pid_nr(p), p->comm,
< 				cpumask_pr_args(override_mask));
< 	}
< 
< 	WARN_ON(set_cpus_allowed_ptr(p, override_mask));
< out_free_mask:
< 	cpus_read_unlock();
< 	free_cpumask_var(new_mask);
< }
< 
< static int
< __sched_setaffinity(struct task_struct *p, const struct cpumask *mask);
< 
< /*
<  * Restore the affinity of a task @p which was previously restricted by a
<  * call to force_compatible_cpus_allowed_ptr(). This will clear (and free)
<  * @p->user_cpus_ptr.
<  *
<  * It is the caller's responsibility to serialise this with any calls to
<  * force_compatible_cpus_allowed_ptr(@p).
<  */
< void relax_compatible_cpus_allowed_ptr(struct task_struct *p)
< {
< 	struct cpumask *user_mask = p->user_cpus_ptr;
< 	unsigned long flags;
< 
< 	/*
< 	 * Try to restore the old affinity mask. If this fails, then
< 	 * we free the mask explicitly to avoid it being inherited across
< 	 * a subsequent fork().
< 	 */
< 	if (!user_mask || !__sched_setaffinity(p, user_mask))
< 		return;
< 
< 	raw_spin_lock_irqsave(&p->pi_lock, flags);
< 	user_mask = clear_user_cpus_ptr(p);
< 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
< 
< 	kfree(user_mask);
< }
< 
2992,2993d1154
< 	unsigned int state = READ_ONCE(p->__state);
< 
2998c1159,1160
< 	WARN_ON_ONCE(state != TASK_RUNNING && state != TASK_WAKING && !p->on_rq);
---
> 	WARN_ON_ONCE(p->state != TASK_RUNNING && p->state != TASK_WAKING &&
> 			!p->on_rq);
3005c1167
< 	WARN_ON_ONCE(state == TASK_RUNNING &&
---
> 	WARN_ON_ONCE(p->state == TASK_RUNNING &&
3021c1183
< 				      lockdep_is_held(__rq_lockp(task_rq(p)))));
---
> 				      lockdep_is_held(&task_rq(p)->lock)));
3027,3028d1188
< 
< 	WARN_ON_ONCE(is_migration_disabled(p));
3035c1195
< 			p->sched_class->migrate_task_rq(p, new_cpu);
---
> 			p->sched_class->migrate_task_rq(p);
3037d1196
< 		rseq_migrate(p);
3044d1202
< #ifdef CONFIG_NUMA_BALANCING
3056a1215
> 		p->on_rq = TASK_ON_RQ_MIGRATING;
3059a1219
> 		p->on_rq = TASK_ON_RQ_QUEUED;
3102c1262
< 	if (!cpumask_test_cpu(arg->dst_cpu, arg->src_task->cpus_ptr))
---
> 	if (!cpumask_test_cpu(arg->dst_cpu, &arg->src_task->cpus_allowed))
3105c1265
< 	if (!cpumask_test_cpu(arg->src_cpu, arg->dst_task->cpus_ptr))
---
> 	if (!cpumask_test_cpu(arg->src_cpu, &arg->dst_task->cpus_allowed))
3124,3125c1284
< int migrate_swap(struct task_struct *cur, struct task_struct *p,
< 		int target_cpu, int curr_cpu)
---
> int migrate_swap(struct task_struct *cur, struct task_struct *p)
3132c1291
< 		.src_cpu = curr_cpu,
---
> 		.src_cpu = task_cpu(cur),
3134c1293
< 		.dst_cpu = target_cpu,
---
> 		.dst_cpu = task_cpu(p),
3147c1306
< 	if (!cpumask_test_cpu(arg.dst_cpu, arg.src_task->cpus_ptr))
---
> 	if (!cpumask_test_cpu(arg.dst_cpu, &arg.src_task->cpus_allowed))
3150c1309
< 	if (!cpumask_test_cpu(arg.src_cpu, arg.dst_task->cpus_ptr))
---
> 	if (!cpumask_test_cpu(arg.src_cpu, &arg.dst_task->cpus_allowed))
3159d1317
< #endif /* CONFIG_NUMA_BALANCING */
3177c1335
< unsigned long wait_task_inactive(struct task_struct *p, unsigned int match_state)
---
> unsigned long wait_task_inactive(struct task_struct *p, long match_state)
3205c1363
< 			if (match_state && unlikely(READ_ONCE(p->__state) != match_state))
---
> 			if (match_state && unlikely(p->state != match_state))
3220c1378
< 		if (!match_state || READ_ONCE(p->__state) == match_state)
---
> 		if (!match_state || p->state == match_state)
3295c1453
<  * ->cpus_ptr is protected by both rq->lock and p->pi_lock
---
>  * ->cpus_allowed is protected by both rq->lock and p->pi_lock
3301c1459
<  *  - on CPU-up we allow per-CPU kthreads on the online && !active CPU,
---
>  *  - on cpu-up we allow per-cpu kthreads on the online && !active cpu,
3333c1491,1493
< 			if (is_cpu_allowed(p, dest_cpu))
---
> 			if (!cpu_active(dest_cpu))
> 				continue;
> 			if (cpumask_test_cpu(dest_cpu, &p->cpus_allowed))
3340,3341c1500,1503
< 		for_each_cpu(dest_cpu, p->cpus_ptr) {
< 			if (!is_cpu_allowed(p, dest_cpu))
---
> 		for_each_cpu(dest_cpu, &p->cpus_allowed) {
> 			if (!(p->flags & PF_KTHREAD) && !cpu_active(dest_cpu))
> 				continue;
> 			if (!cpu_online(dest_cpu))
3343d1504
< 
3350c1511,1512
< 			if (cpuset_cpus_allowed_fallback(p)) {
---
> 			if (IS_ENABLED(CONFIG_CPUSETS)) {
> 				cpuset_cpus_allowed_fallback(p);
3354c1516
< 			fallthrough;
---
> 			/* Fall-through */
3356,3362c1518
< 			/*
< 			 * XXX When called from select_task_rq() we only
< 			 * hold p->pi_lock and again violate locking order.
< 			 *
< 			 * More yuck to audit.
< 			 */
< 			do_set_cpus_allowed(p, task_cpu_possible_mask(p));
---
> 			do_set_cpus_allowed(p, cpu_possible_mask);
3364a1521
> 
3388c1545
<  * The caller (fork, wakeup) owns p->pi_lock, ->cpus_ptr is stable.
---
>  * The caller (fork, wakeup) owns p->pi_lock, ->cpus_allowed is stable.
3391c1548
< int select_task_rq(struct task_struct *p, int cpu, int wake_flags)
---
> int select_task_rq(struct task_struct *p, int cpu, int sd_flags, int wake_flags)
3395,3396c1552,1553
< 	if (p->nr_cpus_allowed > 1 && !is_migration_disabled(p))
< 		cpu = p->sched_class->select_task_rq(p, cpu, wake_flags);
---
> 	if (p->nr_cpus_allowed > 1)
> 		cpu = p->sched_class->select_task_rq(p, cpu, sd_flags, wake_flags);
3398c1555
< 		cpu = cpumask_any(p->cpus_ptr);
---
> 		cpu = cpumask_any(&p->cpus_allowed);
3402c1559
< 	 * to rely on ttwu() to place the task on a valid ->cpus_ptr
---
> 	 * to rely on ttwu() to place the task on a valid ->cpus_allowed
3410c1567,1568
< 	if (unlikely(!is_cpu_allowed(p, cpu)))
---
> 	if (unlikely(!cpumask_test_cpu(cpu, &p->cpus_allowed) ||
> 		     !cpu_online(cpu)))
3415a1574,1579
> static void update_avg(u64 *avg, u64 sample)
> {
> 	s64 diff = sample - *avg;
> 	*avg += diff >> 3;
> }
> 
3418d1581
< 	static struct lock_class_key stop_pi_lock;
3434,3447d1596
< 
< 		/*
< 		 * The PI code calls rt_mutex_setprio() with ->pi_lock held to
< 		 * adjust the effective priority of a task. As a result,
< 		 * rt_mutex_setprio() can trigger (RT) balancing operations,
< 		 * which can then trigger wakeups of the stop thread to push
< 		 * around the current task.
< 		 *
< 		 * The stop task itself will never be part of the PI-chain, it
< 		 * never blocks, therefore that ->pi_lock recursion is safe.
< 		 * Tell lockdep about this by placing the stop->pi_lock in its
< 		 * own class.
< 		 */
< 		lockdep_set_class(&stop->pi_lock, &stop_pi_lock);
3461c1610
< #else /* CONFIG_SMP */
---
> #else
3464,3465c1613
< 					 const struct cpumask *new_mask,
< 					 u32 flags)
---
> 					 const struct cpumask *new_mask, bool check)
3470,3477c1618
< static inline void migrate_disable_switch(struct rq *rq, struct task_struct *p) { }
< 
< static inline bool rq_has_pinned_tasks(struct rq *rq)
< {
< 	return false;
< }
< 
< #endif /* !CONFIG_SMP */
---
> #endif /* CONFIG_SMP */
3491,3492c1632,1633
< 		__schedstat_inc(rq->ttwu_local);
< 		__schedstat_inc(p->se.statistics.nr_wakeups_local);
---
> 		schedstat_inc(rq->ttwu_local);
> 		schedstat_inc(p->se.statistics.nr_wakeups_local);
3496c1637
< 		__schedstat_inc(p->se.statistics.nr_wakeups_remote);
---
> 		schedstat_inc(p->se.statistics.nr_wakeups_remote);
3500c1641
< 				__schedstat_inc(sd->ttwu_wake_remote);
---
> 				schedstat_inc(sd->ttwu_wake_remote);
3508c1649
< 		__schedstat_inc(p->se.statistics.nr_wakeups_migrate);
---
> 		schedstat_inc(p->se.statistics.nr_wakeups_migrate);
3511,3512c1652,1653
< 	__schedstat_inc(rq->ttwu_count);
< 	__schedstat_inc(p->se.statistics.nr_wakeups);
---
> 	schedstat_inc(rq->ttwu_count);
> 	schedstat_inc(p->se.statistics.nr_wakeups);
3515c1656,1666
< 		__schedstat_inc(p->se.statistics.nr_wakeups_sync);
---
> 		schedstat_inc(p->se.statistics.nr_wakeups_sync);
> }
> 
> static inline void ttwu_activate(struct rq *rq, struct task_struct *p, int en_flags)
> {
> 	activate_task(rq, p, en_flags);
> 	p->on_rq = TASK_ON_RQ_QUEUED;
> 
> 	/* If a worker is waking up, notify the workqueue: */
> 	if (p->flags & PF_WQ_WORKER)
> 		wq_worker_waking_up(p, cpu_of(rq));
3525c1676
< 	WRITE_ONCE(p->__state, TASK_RUNNING);
---
> 	p->state = TASK_RUNNING;
3531c1682
< 		 * Our task @p is fully woken up and running; so it's safe to
---
> 		 * Our task @p is fully woken up and running; so its safe to
3548,3550d1698
< 		rq->wake_stamp = jiffies;
< 		rq->wake_avg_idle = rq->avg_idle / 2;
< 
3562c1710
< 	lockdep_assert_rq_held(rq);
---
> 	lockdep_assert_held(&rq->lock);
3563a1712
> #ifdef CONFIG_SMP
3567d1715
< #ifdef CONFIG_SMP
3570d1717
< 	else
3572,3575d1718
< 	if (p->in_iowait) {
< 		delayacct_blkio_end(p);
< 		atomic_dec(&task_rq(p)->nr_iowait);
< 	}
3577c1720
< 	activate_task(rq, p, en_flags);
---
> 	ttwu_activate(rq, p, en_flags);
3582,3604c1725,1728
<  * Consider @p being inside a wait loop:
<  *
<  *   for (;;) {
<  *      set_current_state(TASK_UNINTERRUPTIBLE);
<  *
<  *      if (CONDITION)
<  *         break;
<  *
<  *      schedule();
<  *   }
<  *   __set_current_state(TASK_RUNNING);
<  *
<  * between set_current_state() and schedule(). In this case @p is still
<  * runnable, so all that needs doing is change p->state back to TASK_RUNNING in
<  * an atomic manner.
<  *
<  * By taking task_rq(p)->lock we serialize against schedule(), if @p->on_rq
<  * then schedule() must still happen and p->state can be changed to
<  * TASK_RUNNING. Otherwise we lost the race, schedule() has happened, and we
<  * need to do a full wakeup with enqueue.
<  *
<  * Returns: %true when the wakeup is done,
<  *          %false otherwise.
---
>  * Called in case the task @p isn't fully descheduled from its runqueue,
>  * in this case we must do a remote wakeup. Its a 'light' wakeup though,
>  * since all we need to do is flip p->state to TASK_RUNNING, since
>  * the task is still ->on_rq.
3606c1730
< static int ttwu_runnable(struct task_struct *p, int wake_flags)
---
> static int ttwu_remote(struct task_struct *p, int wake_flags)
3625c1749
< void sched_ttwu_pending(void *arg)
---
> void sched_ttwu_pending(void)
3627d1750
< 	struct llist_node *llist = arg;
3628a1752
> 	struct llist_node *llist = llist_del_all(&rq->wake_list);
3635,3641d1758
< 	/*
< 	 * rq::ttwu_pending racy indication of out-standing wakeups.
< 	 * Races such that false-negatives are possible, since they
< 	 * are shorter lived that false-positives would be.
< 	 */
< 	WRITE_ONCE(rq->ttwu_pending, 0);
< 
3645,3651c1762
< 	llist_for_each_entry_safe(p, t, llist, wake_entry.llist) {
< 		if (WARN_ON_ONCE(p->on_cpu))
< 			smp_cond_load_acquire(&p->on_cpu, !VAL);
< 
< 		if (WARN_ON_ONCE(task_cpu(p) != cpu_of(rq)))
< 			set_task_cpu(p, cpu_of(rq));
< 
---
> 	llist_for_each_entry_safe(p, t, llist, wake_entry)
3653d1763
< 	}
3658c1768
< void send_call_function_single_ipi(int cpu)
---
> void scheduler_ipi(void)
3660c1770,1775
< 	struct rq *rq = cpu_rq(cpu);
---
> 	/*
> 	 * Fold TIF_NEED_RESCHED into the preempt_count; anybody setting
> 	 * TIF_NEED_RESCHED remotely (for the first time) will also send
> 	 * this IPI.
> 	 */
> 	preempt_fold_need_resched();
3662,3665c1777,1803
< 	if (!set_nr_if_polling(rq->idle))
< 		arch_send_call_function_single_ipi(cpu);
< 	else
< 		trace_sched_wake_idle_without_ipi(cpu);
---
> 	if (llist_empty(&this_rq()->wake_list) && !got_nohz_idle_kick())
> 		return;
> 
> 	/*
> 	 * Not all reschedule IPI handlers call irq_enter/irq_exit, since
> 	 * traditionally all their work was done from the interrupt return
> 	 * path. Now that we actually do some work, we need to make sure
> 	 * we do call them.
> 	 *
> 	 * Some archs already do call them, luckily irq_enter/exit nest
> 	 * properly.
> 	 *
> 	 * Arguably we should visit all archs and update all handlers,
> 	 * however a fair share of IPIs are still resched only so this would
> 	 * somewhat pessimize the simple resched case.
> 	 */
> 	irq_enter();
> 	sched_ttwu_pending();
> 
> 	/*
> 	 * Check if someone kicked us for doing the nohz idle load balance.
> 	 */
> 	if (unlikely(got_nohz_idle_kick())) {
> 		this_rq()->idle_balance = 1;
> 		raise_softirq_irqoff(SCHED_SOFTIRQ);
> 	}
> 	irq_exit();
3668,3674c1806
< /*
<  * Queue a task on the target CPUs wake_list and wake the CPU via IPI if
<  * necessary. The wakee CPU on receipt of the IPI will queue the task
<  * via sched_ttwu_wakeup() for activation so the wakee incurs the cost
<  * of the wakeup instead of the waker.
<  */
< static void __ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags)
---
> static void ttwu_queue_remote(struct task_struct *p, int cpu, int wake_flags)
3680,3681c1812,1817
< 	WRITE_ONCE(rq->ttwu_pending, 1);
< 	__smp_call_single_queue(cpu, &p->wake_entry.llist);
---
> 	if (llist_add(&p->wake_entry, &cpu_rq(cpu)->wake_list)) {
> 		if (!set_nr_if_polling(rq->idle))
> 			smp_send_reschedule(cpu);
> 		else
> 			trace_sched_wake_idle_without_ipi(cpu);
> 	}
3712,3761d1847
< 
< static inline bool ttwu_queue_cond(int cpu, int wake_flags)
< {
< 	/*
< 	 * Do not complicate things with the async wake_list while the CPU is
< 	 * in hotplug state.
< 	 */
< 	if (!cpu_active(cpu))
< 		return false;
< 
< 	/*
< 	 * If the CPU does not share cache, then queue the task on the
< 	 * remote rqs wakelist to avoid accessing remote data.
< 	 */
< 	if (!cpus_share_cache(smp_processor_id(), cpu))
< 		return true;
< 
< 	/*
< 	 * If the task is descheduling and the only running task on the
< 	 * CPU then use the wakelist to offload the task activation to
< 	 * the soon-to-be-idle CPU as the current CPU is likely busy.
< 	 * nr_running is checked to avoid unnecessary task stacking.
< 	 */
< 	if ((wake_flags & WF_ON_CPU) && cpu_rq(cpu)->nr_running <= 1)
< 		return true;
< 
< 	return false;
< }
< 
< static bool ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags)
< {
< 	if (sched_feat(TTWU_QUEUE) && ttwu_queue_cond(cpu, wake_flags)) {
< 		if (WARN_ON_ONCE(cpu == smp_processor_id()))
< 			return false;
< 
< 		sched_clock_cpu(cpu); /* Sync clocks across CPUs */
< 		__ttwu_queue_wakelist(p, cpu, wake_flags);
< 		return true;
< 	}
< 
< 	return false;
< }
< 
< #else /* !CONFIG_SMP */
< 
< static inline bool ttwu_queue_wakelist(struct task_struct *p, int cpu, int wake_flags)
< {
< 	return false;
< }
< 
3769c1855,1858
< 	if (ttwu_queue_wakelist(p, cpu, wake_flags))
---
> #if defined(CONFIG_SMP)
> 	if (sched_feat(TTWU_QUEUE) && !cpus_share_cache(smp_processor_id(), cpu)) {
> 		sched_clock_cpu(cpu); /* Sync clocks across CPUs */
> 		ttwu_queue_remote(p, cpu, wake_flags);
3770a1860,1861
> 	}
> #endif
3779,3827d1869
<  * Invoked from try_to_wake_up() to check whether the task can be woken up.
<  *
<  * The caller holds p::pi_lock if p != current or has preemption
<  * disabled when p == current.
<  *
<  * The rules of PREEMPT_RT saved_state:
<  *
<  *   The related locking code always holds p::pi_lock when updating
<  *   p::saved_state, which means the code is fully serialized in both cases.
<  *
<  *   The lock wait and lock wakeups happen via TASK_RTLOCK_WAIT. No other
<  *   bits set. This allows to distinguish all wakeup scenarios.
<  */
< static __always_inline
< bool ttwu_state_match(struct task_struct *p, unsigned int state, int *success)
< {
< 	if (IS_ENABLED(CONFIG_DEBUG_PREEMPT)) {
< 		WARN_ON_ONCE((state & TASK_RTLOCK_WAIT) &&
< 			     state != TASK_RTLOCK_WAIT);
< 	}
< 
< 	if (READ_ONCE(p->__state) & state) {
< 		*success = 1;
< 		return true;
< 	}
< 
< #ifdef CONFIG_PREEMPT_RT
< 	/*
< 	 * Saved state preserves the task state across blocking on
< 	 * an RT lock.  If the state matches, set p::saved_state to
< 	 * TASK_RUNNING, but do not wake the task because it waits
< 	 * for a lock wakeup. Also indicate success because from
< 	 * the regular waker's point of view this has succeeded.
< 	 *
< 	 * After acquiring the lock the task will restore p::__state
< 	 * from p::saved_state which ensures that the regular
< 	 * wakeup is not lost. The restore will also set
< 	 * p::saved_state to TASK_RUNNING so any further tests will
< 	 * not result in false positives vs. @success
< 	 */
< 	if (p->saved_state & state) {
< 		p->saved_state = TASK_RUNNING;
< 		*success = 1;
< 	}
< #endif
< 	return false;
< }
< 
< /*
3843c1885,1886
<  * Release/acquire chaining guarantees that B happens after A and C after B.
---
>  * Transitivity guarantees that B happens after A and C after B.
>  * Note: we only require RCpc transitivity.
3875,3876c1918,1919
<  *   1) smp_store_release(X->on_cpu, 0)   -- finish_task()
<  *   2) smp_cond_load_acquire(!X->on_cpu) -- try_to_wake_up()
---
>  *   1) smp_store_release(X->on_cpu, 0)
>  *   2) smp_cond_load_acquire(!X->on_cpu)
3905,3907c1948,1957
<  * However, for wakeups there is a second guarantee we must provide, namely we
<  * must ensure that CONDITION=1 done by the caller can not be reordered with
<  * accesses to the task state; see try_to_wake_up() and set_current_state().
---
>  * However; for wakeups there is a second guarantee we must provide, namely we
>  * must observe the state that lead to our wakeup. That is, not only must our
>  * task observe its own prior state, it must also observe the stores prior to
>  * its wakeup.
>  *
>  * This means that any means of doing remote wakeups must order the CPU doing
>  * the wakeup against the CPU the task is going to end up running on. This,
>  * however, is already required for the regular Program-Order guarantee above,
>  * since the waking CPU is the one issueing the ACQUIRE (smp_cond_load_acquire).
>  *
3916,3918c1966
<  * Conceptually does:
<  *
<  *   If (@state & @p->state) @p->state = TASK_RUNNING.
---
>  * If (@state & @p->state) @p->state = TASK_RUNNING.
3922,3942c1970,1971
<  * This function is atomic against schedule() which would dequeue the task.
<  *
<  * It issues a full memory barrier before accessing @p->state, see the comment
<  * with set_current_state().
<  *
<  * Uses p->pi_lock to serialize against concurrent wake-ups.
<  *
<  * Relies on p->pi_lock stabilizing:
<  *  - p->sched_class
<  *  - p->cpus_ptr
<  *  - p->sched_task_group
<  * in order to do migration, see its use of select_task_rq()/set_task_cpu().
<  *
<  * Tries really hard to only take one task_rq(p)->lock for performance.
<  * Takes rq->lock in:
<  *  - ttwu_runnable()    -- old rq, unavoidable, see comment there;
<  *  - ttwu_queue()       -- new rq, for enqueue of the task;
<  *  - psi_ttwu_dequeue() -- much sadness :-( accounting will kill us.
<  *
<  * As a consequence we race really badly with just about everything. See the
<  * many memory barriers and their comments for details.
---
>  * Atomic against schedule() which would dequeue a task, also see
>  * set_current_state().
3953,3974d1981
< 	preempt_disable();
< 	if (p == current) {
< 		/*
< 		 * We're waking current, this means 'p->on_rq' and 'task_cpu(p)
< 		 * == smp_processor_id()'. Together this means we can special
< 		 * case the whole 'p->on_rq && ttwu_runnable()' case below
< 		 * without taking any locks.
< 		 *
< 		 * In particular:
< 		 *  - we rely on Program-Order guarantees for all the ordering,
< 		 *  - we're serialized against set_special_state() by virtue of
< 		 *    it disabling IRQs (this allows not taking ->pi_lock).
< 		 */
< 		if (!ttwu_state_match(p, state, &success))
< 			goto out;
< 
< 		trace_sched_waking(p);
< 		WRITE_ONCE(p->__state, TASK_RUNNING);
< 		trace_sched_wakeup(p);
< 		goto out;
< 	}
< 
3978,3979c1985,1986
< 	 * reordered with p->state check below. This pairs with smp_store_mb()
< 	 * in set_current_state() that the waiting thread does.
---
> 	 * reordered with p->state check below. This pairs with mb() in
> 	 * set_current_state() the waiting thread does.
3983,3984c1990,1991
< 	if (!ttwu_state_match(p, state, &success))
< 		goto unlock;
---
> 	if (!(p->state & state))
> 		goto out;
3987a1995,1998
> 	/* We're going to change ->state: */
> 	success = 1;
> 	cpu = task_cpu(p);
> 
3993,4000c2004,2011
< 	 * sched_ttwu_pending()			try_to_wake_up()
< 	 *   STORE p->on_rq = 1			  LOAD p->state
< 	 *   UNLOCK rq->lock
< 	 *
< 	 * __schedule() (switch to task 'p')
< 	 *   LOCK rq->lock			  smp_rmb();
< 	 *   smp_mb__after_spinlock();
< 	 *   UNLOCK rq->lock
---
> 	 * sched_ttwu_pending()                 try_to_wake_up()
> 	 *   [S] p->on_rq = 1;                  [L] P->state
> 	 *       UNLOCK rq->lock  -----.
> 	 *                              \
> 	 *				 +---   RMB
> 	 * schedule()                   /
> 	 *       LOCK rq->lock    -----'
> 	 *       UNLOCK rq->lock
4003,4006c2014
< 	 *   STORE p->state = UNINTERRUPTIBLE	  LOAD p->on_rq
< 	 *
< 	 * Pairs with the LOCK+smp_mb__after_spinlock() on rq->lock in
< 	 * __schedule().  See the comment for smp_mb__after_spinlock().
---
> 	 *   [S] p->state = UNINTERRUPTIBLE     [L] p->on_rq
4008c2016,2018
< 	 * A similar smb_rmb() lives in try_invoke_on_locked_down_task().
---
> 	 * Pairs with the UNLOCK+LOCK on rq->lock from the
> 	 * last wakeup of our task and the schedule that got our task
> 	 * current.
4011,4012c2021,2022
< 	if (READ_ONCE(p->on_rq) && ttwu_runnable(p, wake_flags))
< 		goto unlock;
---
> 	if (p->on_rq && ttwu_remote(p, wake_flags))
> 		goto stat;
4022,4065c2032,2040
< 	 * __schedule() (switch to task 'p')	try_to_wake_up()
< 	 *   STORE p->on_cpu = 1		  LOAD p->on_rq
< 	 *   UNLOCK rq->lock
< 	 *
< 	 * __schedule() (put 'p' to sleep)
< 	 *   LOCK rq->lock			  smp_rmb();
< 	 *   smp_mb__after_spinlock();
< 	 *   STORE p->on_rq = 0			  LOAD p->on_cpu
< 	 *
< 	 * Pairs with the LOCK+smp_mb__after_spinlock() on rq->lock in
< 	 * __schedule().  See the comment for smp_mb__after_spinlock().
< 	 *
< 	 * Form a control-dep-acquire with p->on_rq == 0 above, to ensure
< 	 * schedule()'s deactivate_task() has 'happened' and p will no longer
< 	 * care about it's own p->state. See the comment in __schedule().
< 	 */
< 	smp_acquire__after_ctrl_dep();
< 
< 	/*
< 	 * We're doing the wakeup (@success == 1), they did a dequeue (p->on_rq
< 	 * == 0), which means we need to do an enqueue, change p->state to
< 	 * TASK_WAKING such that we can unlock p->pi_lock before doing the
< 	 * enqueue, such as ttwu_queue_wakelist().
< 	 */
< 	WRITE_ONCE(p->__state, TASK_WAKING);
< 
< 	/*
< 	 * If the owning (remote) CPU is still in the middle of schedule() with
< 	 * this task as prev, considering queueing p on the remote CPUs wake_list
< 	 * which potentially sends an IPI instead of spinning on p->on_cpu to
< 	 * let the waker make forward progress. This is safe because IRQs are
< 	 * disabled and the IPI will deliver after on_cpu is cleared.
< 	 *
< 	 * Ensure we load task_cpu(p) after p->on_cpu:
< 	 *
< 	 * set_task_cpu(p, cpu);
< 	 *   STORE p->cpu = @cpu
< 	 * __schedule() (switch to task 'p')
< 	 *   LOCK rq->lock
< 	 *   smp_mb__after_spin_lock()		smp_cond_load_acquire(&p->on_cpu)
< 	 *   STORE p->on_cpu = 1		LOAD p->cpu
< 	 *
< 	 * to ensure we observe the correct CPU on which the task is currently
< 	 * scheduling.
---
> 	 *  [S] ->on_cpu = 1;	[L] ->on_rq
> 	 *      UNLOCK rq->lock
> 	 *			RMB
> 	 *      LOCK   rq->lock
> 	 *  [S] ->on_rq = 0;    [L] ->on_cpu
> 	 *
> 	 * Pairs with the full barrier implied in the UNLOCK+LOCK on rq->lock
> 	 * from the consecutive calls to schedule(); the first switching to our
> 	 * task, the second putting it to sleep.
4067,4069c2042
< 	if (smp_load_acquire(&p->on_cpu) &&
< 	    ttwu_queue_wakelist(p, task_cpu(p), wake_flags | WF_ON_CPU))
< 		goto unlock;
---
> 	smp_rmb();
4073c2046
< 	 * this task as prev, wait until it's done referencing the task.
---
> 	 * this task as prev, wait until its done referencing the task.
4075c2048
< 	 * Pairs with the smp_store_release() in finish_task().
---
> 	 * Pairs with the smp_store_release() in finish_lock_switch().
4082,4087c2055,2061
< 	cpu = select_task_rq(p, p->wake_cpu, wake_flags | WF_TTWU);
< 	if (task_cpu(p) != cpu) {
< 		if (p->in_iowait) {
< 			delayacct_blkio_end(p);
< 			atomic_dec(&task_rq(p)->nr_iowait);
< 		}
---
> 	p->sched_contributes_to_load = !!task_contributes_to_load(p);
> 	p->state = TASK_WAKING;
> 
> 	if (p->in_iowait) {
> 		delayacct_blkio_end(p);
> 		atomic_dec(&task_rq(p)->nr_iowait);
> 	}
4088a2063,2064
> 	cpu = select_task_rq(p, p->wake_cpu, SD_BALANCE_WAKE, wake_flags);
> 	if (task_cpu(p) != cpu) {
4090d2065
< 		psi_ttwu_dequeue(p);
4093,4094c2068,2075
< #else
< 	cpu = task_cpu(p);
---
> 
> #else /* CONFIG_SMP */
> 
> 	if (p->in_iowait) {
> 		delayacct_blkio_end(p);
> 		atomic_dec(&task_rq(p)->nr_iowait);
> 	}
> 
4098,4099c2079,2080
< unlock:
< 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
---
> stat:
> 	ttwu_stat(p, cpu, wake_flags);
4101,4103c2082
< 	if (success)
< 		ttwu_stat(p, task_cpu(p), wake_flags);
< 	preempt_enable();
---
> 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
4109,4124c2088,2094
<  * try_invoke_on_locked_down_task - Invoke a function on task in fixed state
<  * @p: Process for which the function is to be invoked, can be @current.
<  * @func: Function to invoke.
<  * @arg: Argument to function.
<  *
<  * If the specified task can be quickly locked into a definite state
<  * (either sleeping or on a given runqueue), arrange to keep it in that
<  * state while invoking @func(@arg).  This function can use ->on_rq and
<  * task_curr() to work out what the state is, if required.  Given that
<  * @func can be invoked with a runqueue lock held, it had better be quite
<  * lightweight.
<  *
<  * Returns:
<  *	@false if the task slipped out from under the locks.
<  *	@true if the task was locked onto a runqueue or is sleeping.
<  *		However, @func can override this by returning @false.
---
>  * try_to_wake_up_local - try to wake up a local task with rq lock held
>  * @p: the thread to be awakened
>  * @rf: request-queue flags for pinning
>  *
>  * Put @p on the run-queue if it's not already there. The caller must
>  * ensure that this_rq() is locked, @p is bound to this_rq() and not
>  * the current task.
4126c2096
< bool try_invoke_on_locked_down_task(struct task_struct *p, bool (*func)(struct task_struct *t, void *arg), void *arg)
---
> static void try_to_wake_up_local(struct task_struct *p, struct rq_flags *rf)
4128,4130c2098
< 	struct rq_flags rf;
< 	bool ret = false;
< 	struct rq *rq;
---
> 	struct rq *rq = task_rq(p);
4132,4146c2100,2126
< 	raw_spin_lock_irqsave(&p->pi_lock, rf.flags);
< 	if (p->on_rq) {
< 		rq = __task_rq_lock(p, &rf);
< 		if (task_rq(p) == rq)
< 			ret = func(p, arg);
< 		rq_unlock(rq, &rf);
< 	} else {
< 		switch (READ_ONCE(p->__state)) {
< 		case TASK_RUNNING:
< 		case TASK_WAKING:
< 			break;
< 		default:
< 			smp_rmb(); // See smp_rmb() comment in try_to_wake_up().
< 			if (!p->on_rq)
< 				ret = func(p, arg);
---
> 	if (WARN_ON_ONCE(rq != this_rq()) ||
> 	    WARN_ON_ONCE(p == current))
> 		return;
> 
> 	lockdep_assert_held(&rq->lock);
> 
> 	if (!raw_spin_trylock(&p->pi_lock)) {
> 		/*
> 		 * This is OK, because current is on_cpu, which avoids it being
> 		 * picked for load-balance and preemption/IRQs are still
> 		 * disabled avoiding further scheduler activity on it and we've
> 		 * not yet picked a replacement task.
> 		 */
> 		rq_unlock(rq, rf);
> 		raw_spin_lock(&p->pi_lock);
> 		rq_relock(rq, rf);
> 	}
> 
> 	if (!(p->state & TASK_NORMAL))
> 		goto out;
> 
> 	trace_sched_waking(p);
> 
> 	if (!task_on_rq_queued(p)) {
> 		if (p->in_iowait) {
> 			delayacct_blkio_end(p);
> 			atomic_dec(&rq->nr_iowait);
4147a2128
> 		ttwu_activate(rq, p, ENQUEUE_WAKEUP | ENQUEUE_NOCLOCK);
4149,4150c2130,2134
< 	raw_spin_unlock_irqrestore(&p->pi_lock, rf.flags);
< 	return ret;
---
> 
> 	ttwu_do_wakeup(rq, p, 0, rf);
> 	ttwu_stat(p, smp_processor_id(), 0);
> out:
> 	raw_spin_unlock(&p->pi_lock);
4162c2146,2147
<  * This function executes a full memory barrier before accessing the task state.
---
>  * It may be assumed that this function implies a write memory barrier before
>  * changing the task state if and only if any tasks are woken up.
4217,4224c2202,2222
< #ifdef CONFIG_COMPACTION
< 	p->capture_control = NULL;
< #endif
< 	init_numa_balancing(clone_flags, p);
< #ifdef CONFIG_SMP
< 	p->wake_entry.u_flags = CSD_TYPE_TTWU;
< 	p->migration_pending = NULL;
< #endif
---
> #ifdef CONFIG_NUMA_BALANCING
> 	if (p->mm && atomic_read(&p->mm->mm_users) == 1) {
> 		p->mm->numa_next_scan = jiffies + msecs_to_jiffies(sysctl_numa_balancing_scan_delay);
> 		p->mm->numa_scan_seq = 0;
> 	}
> 
> 	if (clone_flags & CLONE_VM)
> 		p->numa_preferred_nid = current->numa_preferred_nid;
> 	else
> 		p->numa_preferred_nid = -1;
> 
> 	p->node_stamp = 0ULL;
> 	p->numa_scan_seq = p->mm ? p->mm->numa_scan_seq : 0;
> 	p->numa_scan_period = sysctl_numa_balancing_scan_delay;
> 	p->numa_work.next = &p->numa_work;
> 	p->numa_faults = NULL;
> 	p->last_task_numa_placement = 0;
> 	p->last_sum_exec_runtime = 0;
> 
> 	p->numa_group = NULL;
> #endif /* CONFIG_NUMA_BALANCING */
4241c2239
< 			  void *buffer, size_t *lenp, loff_t *ppos)
---
> 			 void __user *buffer, size_t *lenp, loff_t *ppos)
4264a2263
> static bool __initdata __sched_schedstats = false;
4287a2287,2291
> 	/*
> 	 * This code is called before jump labels have been set up, so we can't
> 	 * change the static branch directly just yet.  Instead set a temporary
> 	 * variable so init_schedstats() can do it later.
> 	 */
4289c2293
< 		set_schedstats(true);
---
> 		__sched_schedstats = true;
4292c2296
< 		set_schedstats(false);
---
> 		__sched_schedstats = false;
4302a2307,2311
> static void __init init_schedstats(void)
> {
> 	set_schedstats(__sched_schedstats);
> }
> 
4304,4305c2313,2314
< int sysctl_schedstats(struct ctl_table *table, int write, void *buffer,
< 		size_t *lenp, loff_t *ppos)
---
> int sysctl_schedstats(struct ctl_table *table, int write,
> 			 void __user *buffer, size_t *lenp, loff_t *ppos)
4323a2333,2334
> #else  /* !CONFIG_SCHEDSTATS */
> static inline void init_schedstats(void) {}
4331a2343
> 	int cpu = get_cpu();
4339c2351
< 	p->__state = TASK_NEW;
---
> 	p->state = TASK_NEW;
4346,4347d2357
< 	uclamp_fork(p);
< 
4359c2369
< 		p->prio = p->normal_prio = p->static_prio;
---
> 		p->prio = p->normal_prio = __normal_prio(p);
4369c2379,2380
< 	if (dl_prio(p->prio))
---
> 	if (dl_prio(p->prio)) {
> 		put_cpu();
4371c2382
< 	else if (rt_prio(p->prio))
---
> 	} else if (rt_prio(p->prio)) {
4373c2384
< 	else
---
> 	} else {
4374a2386
> 	}
4386d2397
< 	rseq_migrate(p);
4391c2402
< 	__set_task_cpu(p, smp_processor_id());
---
> 	__set_task_cpu(p, cpu);
4408,4409d2418
< 	return 0;
< }
4411,4413c2420,2421
< void sched_post_fork(struct task_struct *p)
< {
< 	uclamp_post_fork(p);
---
> 	put_cpu();
> 	return 0;
4445c2453
< 	WRITE_ONCE(p->__state, TASK_RUNNING);
---
> 	p->state = TASK_RUNNING;
4449c2457
< 	 *  - cpus_ptr can change in the fork path
---
> 	 *  - cpus_allowed can change in the fork path
4455,4457c2463
< 	p->recent_used_cpu = task_cpu(p);
< 	rseq_migrate(p);
< 	__set_task_cpu(p, select_task_rq(p, task_cpu(p), WF_FORK));
---
> 	__set_task_cpu(p, select_task_rq(p, task_cpu(p), SD_BALANCE_FORK, 0));
4461c2467
< 	post_init_entity_util_avg(p);
---
> 	post_init_entity_util_avg(&p->se);
4463a2470
> 	p->on_rq = TASK_ON_RQ_QUEUED;
4469c2476
< 		 * Nothing relies on rq->lock after this, so it's fine to
---
> 		 * Nothing relies on rq->lock after this, so its fine to
4482c2489
< static DEFINE_STATIC_KEY_FALSE(preempt_notifier_key);
---
> static struct static_key preempt_notifier_key = STATIC_KEY_INIT_FALSE;
4486c2493
< 	static_branch_inc(&preempt_notifier_key);
---
> 	static_key_slow_inc(&preempt_notifier_key);
4492c2499
< 	static_branch_dec(&preempt_notifier_key);
---
> 	static_key_slow_dec(&preempt_notifier_key);
4502c2509
< 	if (!static_branch_unlikely(&preempt_notifier_key))
---
> 	if (!static_key_false(&preempt_notifier_key))
4531c2538
< 	if (static_branch_unlikely(&preempt_notifier_key))
---
> 	if (static_key_false(&preempt_notifier_key))
4549c2556
< 	if (static_branch_unlikely(&preempt_notifier_key))
---
> 	if (static_key_false(&preempt_notifier_key))
4567,4724d2573
< static inline void prepare_task(struct task_struct *next)
< {
< #ifdef CONFIG_SMP
< 	/*
< 	 * Claim the task as running, we do this before switching to it
< 	 * such that any running task will have this set.
< 	 *
< 	 * See the ttwu() WF_ON_CPU case and its ordering comment.
< 	 */
< 	WRITE_ONCE(next->on_cpu, 1);
< #endif
< }
< 
< static inline void finish_task(struct task_struct *prev)
< {
< #ifdef CONFIG_SMP
< 	/*
< 	 * This must be the very last reference to @prev from this CPU. After
< 	 * p->on_cpu is cleared, the task can be moved to a different CPU. We
< 	 * must ensure this doesn't happen until the switch is completely
< 	 * finished.
< 	 *
< 	 * In particular, the load of prev->state in finish_task_switch() must
< 	 * happen before this.
< 	 *
< 	 * Pairs with the smp_cond_load_acquire() in try_to_wake_up().
< 	 */
< 	smp_store_release(&prev->on_cpu, 0);
< #endif
< }
< 
< #ifdef CONFIG_SMP
< 
< static void do_balance_callbacks(struct rq *rq, struct callback_head *head)
< {
< 	void (*func)(struct rq *rq);
< 	struct callback_head *next;
< 
< 	lockdep_assert_rq_held(rq);
< 
< 	while (head) {
< 		func = (void (*)(struct rq *))head->func;
< 		next = head->next;
< 		head->next = NULL;
< 		head = next;
< 
< 		func(rq);
< 	}
< }
< 
< static void balance_push(struct rq *rq);
< 
< struct callback_head balance_push_callback = {
< 	.next = NULL,
< 	.func = (void (*)(struct callback_head *))balance_push,
< };
< 
< static inline struct callback_head *splice_balance_callbacks(struct rq *rq)
< {
< 	struct callback_head *head = rq->balance_callback;
< 
< 	lockdep_assert_rq_held(rq);
< 	if (head)
< 		rq->balance_callback = NULL;
< 
< 	return head;
< }
< 
< static void __balance_callbacks(struct rq *rq)
< {
< 	do_balance_callbacks(rq, splice_balance_callbacks(rq));
< }
< 
< static inline void balance_callbacks(struct rq *rq, struct callback_head *head)
< {
< 	unsigned long flags;
< 
< 	if (unlikely(head)) {
< 		raw_spin_rq_lock_irqsave(rq, flags);
< 		do_balance_callbacks(rq, head);
< 		raw_spin_rq_unlock_irqrestore(rq, flags);
< 	}
< }
< 
< #else
< 
< static inline void __balance_callbacks(struct rq *rq)
< {
< }
< 
< static inline struct callback_head *splice_balance_callbacks(struct rq *rq)
< {
< 	return NULL;
< }
< 
< static inline void balance_callbacks(struct rq *rq, struct callback_head *head)
< {
< }
< 
< #endif
< 
< static inline void
< prepare_lock_switch(struct rq *rq, struct task_struct *next, struct rq_flags *rf)
< {
< 	/*
< 	 * Since the runqueue lock will be released by the next
< 	 * task (which is an invalid locking op but in the case
< 	 * of the scheduler it's an obvious special-case), so we
< 	 * do an early lockdep release here:
< 	 */
< 	rq_unpin_lock(rq, rf);
< 	spin_release(&__rq_lockp(rq)->dep_map, _THIS_IP_);
< #ifdef CONFIG_DEBUG_SPINLOCK
< 	/* this is a valid case when another task releases the spinlock */
< 	rq_lockp(rq)->owner = next;
< #endif
< }
< 
< static inline void finish_lock_switch(struct rq *rq)
< {
< 	/*
< 	 * If we are tracking spinlock dependencies then we have to
< 	 * fix up the runqueue lock - which gets 'carried over' from
< 	 * prev into current:
< 	 */
< 	spin_acquire(&__rq_lockp(rq)->dep_map, 0, 0, _THIS_IP_);
< 	__balance_callbacks(rq);
< 	raw_spin_rq_unlock_irq(rq);
< }
< 
< /*
<  * NOP if the arch has not defined these:
<  */
< 
< #ifndef prepare_arch_switch
< # define prepare_arch_switch(next)	do { } while (0)
< #endif
< 
< #ifndef finish_arch_post_lock_switch
< # define finish_arch_post_lock_switch()	do { } while (0)
< #endif
< 
< static inline void kmap_local_sched_out(void)
< {
< #ifdef CONFIG_KMAP_LOCAL
< 	if (unlikely(current->kmap_ctrl.idx))
< 		__kmap_local_sched_out();
< #endif
< }
< 
< static inline void kmap_local_sched_in(void)
< {
< #ifdef CONFIG_KMAP_LOCAL
< 	if (unlikely(current->kmap_ctrl.idx))
< 		__kmap_local_sched_in();
< #endif
< }
< 
4742d2590
< 	kcov_prepare_switch(prev);
4745d2592
< 	rseq_preempt(prev);
4747,4748c2594
< 	kmap_local_sched_out();
< 	prepare_task(next);
---
> 	prepare_lock_switch(rq, next);
4803c2649
< 	 * finish_task), otherwise a concurrent wakeup can get prev
---
> 	 * finish_lock_switch), otherwise a concurrent wakeup can get prev
4807c2653
< 	prev_state = READ_ONCE(prev->__state);
---
> 	prev_state = prev->state;
4810,4814d2655
< 	finish_task(prev);
< 	tick_nohz_task_switch();
< 	finish_lock_switch(rq);
< 	finish_arch_post_lock_switch();
< 	kcov_finish_switch(current);
4816,4820c2657,2663
< 	 * kmap_local_sched_out() is invoked with rq::lock held and
< 	 * interrupts disabled. There is no requirement for that, but the
< 	 * sched out code does not have an interrupt enabled section.
< 	 * Restoring the maps on sched in does not require interrupts being
< 	 * disabled either.
---
> 	 * The membarrier system call requires a full memory barrier
> 	 * after storing to rq->curr, before going back to user-space.
> 	 *
> 	 * TODO: This smp_mb__after_unlock_lock can go away if PPC end
> 	 * up adding a full barrier to switch_mm(), or we should figure
> 	 * out if a smp_mb__after_unlock_lock is really the proper API
> 	 * to use.
4822c2665,2667
< 	kmap_local_sched_in();
---
> 	smp_mb__after_unlock_lock();
> 	finish_lock_switch(rq, prev);
> 	finish_arch_post_lock_switch();
4825,4838c2670
< 	/*
< 	 * When switching through a kernel thread, the loop in
< 	 * membarrier_{private,global}_expedited() may have observed that
< 	 * kernel thread and not issued an IPI. It is therefore possible to
< 	 * schedule between user->kernel->user threads without passing though
< 	 * switch_mm(). Membarrier requires a barrier after storing to
< 	 * rq->curr, before returning to userspace, so provide them here:
< 	 *
< 	 * - a full memory barrier for {PRIVATE,GLOBAL}_EXPEDITED, implicitly
< 	 *   provided by mmdrop(),
< 	 * - a sync_core for SYNC_CORE.
< 	 */
< 	if (mm) {
< 		membarrier_mm_sync_core_before_usermode(mm);
---
> 	if (mm)
4840d2671
< 	}
4854c2685
< 		put_task_struct_rcu_user(prev);
---
> 		put_task_struct(prev);
4856a2688
> 	tick_nohz_task_switch();
4859a2692,2728
> #ifdef CONFIG_SMP
> 
> /* rq->lock is NOT held, but preemption is disabled */
> static void __balance_callback(struct rq *rq)
> {
> 	struct callback_head *head, *next;
> 	void (*func)(struct rq *rq);
> 	unsigned long flags;
> 
> 	raw_spin_lock_irqsave(&rq->lock, flags);
> 	head = rq->balance_callback;
> 	rq->balance_callback = NULL;
> 	while (head) {
> 		func = (void (*)(struct rq *))head->func;
> 		next = head->next;
> 		head->next = NULL;
> 		head = next;
> 
> 		func(rq);
> 	}
> 	raw_spin_unlock_irqrestore(&rq->lock, flags);
> }
> 
> static inline void balance_callback(struct rq *rq)
> {
> 	if (unlikely(rq->balance_callback))
> 		__balance_callback(rq);
> }
> 
> #else
> 
> static inline void balance_callback(struct rq *rq)
> {
> }
> 
> #endif
> 
4866a2736,2737
> 	struct rq *rq;
> 
4876c2747,2748
< 	finish_task_switch(prev);
---
> 	rq = finish_task_switch(prev);
> 	balance_callback(rq);
4881,4882d2752
< 
< 	calculate_sigpending();
4891a2762,2763
> 	struct mm_struct *mm, *oldmm;
> 
4893a2766,2767
> 	mm = next->mm;
> 	oldmm = prev->active_mm;
4901,4932c2775,2784
< 	/*
< 	 * kernel -> kernel   lazy + transfer active
< 	 *   user -> kernel   lazy + mmgrab() active
< 	 *
< 	 * kernel ->   user   switch + mmdrop() active
< 	 *   user ->   user   switch
< 	 */
< 	if (!next->mm) {                                // to kernel
< 		enter_lazy_tlb(prev->active_mm, next);
< 
< 		next->active_mm = prev->active_mm;
< 		if (prev->mm)                           // from user
< 			mmgrab(prev->active_mm);
< 		else
< 			prev->active_mm = NULL;
< 	} else {                                        // to user
< 		membarrier_switch_mm(rq, prev->active_mm, next->mm);
< 		/*
< 		 * sys_membarrier() requires an smp_mb() between setting
< 		 * rq->curr / membarrier_switch_mm() and returning to userspace.
< 		 *
< 		 * The below provides this either through switch_mm(), or in
< 		 * case 'prev->active_mm == next->mm' through
< 		 * finish_task_switch()'s mmdrop().
< 		 */
< 		switch_mm_irqs_off(prev->active_mm, next->mm, next);
< 
< 		if (!prev->mm) {                        // from kernel
< 			/* will mmdrop() in finish_task_switch(). */
< 			rq->prev_mm = prev->active_mm;
< 			prev->active_mm = NULL;
< 		}
---
> 	if (!mm) {
> 		next->active_mm = oldmm;
> 		mmgrab(oldmm);
> 		enter_lazy_tlb(oldmm, next);
> 	} else
> 		switch_mm_irqs_off(oldmm, mm, next);
> 
> 	if (!prev->mm) {
> 		prev->active_mm = NULL;
> 		rq->prev_mm = oldmm;
4937c2789,2796
< 	prepare_lock_switch(rq, next, rf);
---
> 	/*
> 	 * Since the runqueue lock will be released by the next
> 	 * task (which is an invalid locking op but in the case
> 	 * of the scheduler it's an obvious special-case), so we
> 	 * do an early lockdep release here:
> 	 */
> 	rq_unpin_lock(rq, rf);
> 	spin_release(&rq->lock.dep_map, 1, _THIS_IP_);
4952c2811
< unsigned int nr_running(void)
---
> unsigned long nr_running(void)
4954c2813
< 	unsigned int i, sum = 0;
---
> 	unsigned long i, sum = 0;
4969c2828
<  * - from a non-preemptible section (of course)
---
>  * - from a non-preemptable section (of course)
4993,5005c2852
<  * Consumers of these two interfaces, like for example the cpuidle menu
<  * governor, are using nonsensical data. Preferring shallow idle state selection
<  * for a CPU that has IO-wait which might not even end up running the task when
<  * it does become runnable.
<  */
< 
< unsigned int nr_iowait_cpu(int cpu)
< {
< 	return atomic_read(&cpu_rq(cpu)->nr_iowait);
< }
< 
< /*
<  * IO-wait accounting, and how it's mostly bollocks (on SMP).
---
>  * IO-wait accounting, and how its mostly bollocks (on SMP).
5034c2881
< unsigned int nr_iowait(void)
---
> unsigned long nr_iowait(void)
5036c2883
< 	unsigned int i, sum = 0;
---
> 	unsigned long i, sum = 0;
5039c2886
< 		sum += nr_iowait_cpu(i);
---
> 		sum += atomic_read(&cpu_rq(i)->nr_iowait);
5043a2891,2910
> /*
>  * Consumers of these two interfaces, like for example the cpufreq menu
>  * governor are using nonsensical data. Boosting frequency for a CPU that has
>  * IO-wait which might not even end up running the task when it does become
>  * runnable.
>  */
> 
> unsigned long nr_iowait_cpu(int cpu)
> {
> 	struct rq *this = cpu_rq(cpu);
> 	return atomic_read(&this->nr_iowait);
> }
> 
> void get_iowait_load(unsigned long *nr_waiters, unsigned long *load)
> {
> 	struct rq *rq = this_rq();
> 	*nr_waiters = atomic_read(&rq->nr_iowait);
> 	*load = rq->load.weight;
> }
> 
5057c2924
< 	dest_cpu = p->sched_class->select_task_rq(p, task_cpu(p), WF_EXEC);
---
> 	dest_cpu = p->sched_class->select_task_rq(p, task_cpu(p), SD_BALANCE_EXEC, 0);
5110c2977
< 	 * 64-bit doesn't need locks to atomically read a 64-bit value.
---
> 	 * 64-bit doesn't need locks to atomically read a 64bit value.
5141,5189d3007
< #ifdef CONFIG_SCHED_DEBUG
< static u64 cpu_resched_latency(struct rq *rq)
< {
< 	int latency_warn_ms = READ_ONCE(sysctl_resched_latency_warn_ms);
< 	u64 resched_latency, now = rq_clock(rq);
< 	static bool warned_once;
< 
< 	if (sysctl_resched_latency_warn_once && warned_once)
< 		return 0;
< 
< 	if (!need_resched() || !latency_warn_ms)
< 		return 0;
< 
< 	if (system_state == SYSTEM_BOOTING)
< 		return 0;
< 
< 	if (!rq->last_seen_need_resched_ns) {
< 		rq->last_seen_need_resched_ns = now;
< 		rq->ticks_without_resched = 0;
< 		return 0;
< 	}
< 
< 	rq->ticks_without_resched++;
< 	resched_latency = now - rq->last_seen_need_resched_ns;
< 	if (resched_latency <= latency_warn_ms * NSEC_PER_MSEC)
< 		return 0;
< 
< 	warned_once = true;
< 
< 	return resched_latency;
< }
< 
< static int __init setup_resched_latency_warn_ms(char *str)
< {
< 	long val;
< 
< 	if ((kstrtol(str, 0, &val))) {
< 		pr_warn("Unable to set resched_latency_warn_ms\n");
< 		return 1;
< 	}
< 
< 	sysctl_resched_latency_warn_ms = val;
< 	return 1;
< }
< __setup("resched_latency_warn_ms=", setup_resched_latency_warn_ms);
< #else
< static inline u64 cpu_resched_latency(struct rq *rq) { return 0; }
< #endif /* CONFIG_SCHED_DEBUG */
< 
5200,5201d3017
< 	unsigned long thermal_pressure;
< 	u64 resched_latency;
5203d3018
< 	arch_scale_freq_tick();
5209,5210d3023
< 	thermal_pressure = arch_scale_thermal_pressure(cpu_of(rq));
< 	update_thermal_load_avg(rq_clock_thermal(rq), rq, thermal_pressure);
5212,5213c3025
< 	if (sched_feat(LATENCY_WARN))
< 		resched_latency = cpu_resched_latency(rq);
---
> 	cpu_load_update_active(rq);
5218,5220d3029
< 	if (sched_feat(LATENCY_WARN) && resched_latency)
< 		resched_latency_warn(cpu, resched_latency);
< 
5226a3036
> 	rq_last_tick_reset(rq);
5230,5243c3040,3041
< 
< struct tick_work {
< 	int			cpu;
< 	atomic_t		state;
< 	struct delayed_work	work;
< };
< /* Values for ->state, see diagram below. */
< #define TICK_SCHED_REMOTE_OFFLINE	0
< #define TICK_SCHED_REMOTE_OFFLINING	1
< #define TICK_SCHED_REMOTE_RUNNING	2
< 
< /*
<  * State diagram for ->state:
<  *
---
> /**
>  * scheduler_tick_max_deferment
5245,5257c3043,3045
<  *          TICK_SCHED_REMOTE_OFFLINE
<  *                    |   ^
<  *                    |   |
<  *                    |   | sched_tick_remote()
<  *                    |   |
<  *                    |   |
<  *                    +--TICK_SCHED_REMOTE_OFFLINING
<  *                    |   ^
<  *                    |   |
<  * sched_tick_start() |   | sched_tick_stop()
<  *                    |   |
<  *                    V   |
<  *          TICK_SCHED_REMOTE_RUNNING
---
>  * Keep at least one tick per second when a single
>  * active task is running because the scheduler doesn't
>  * yet completely support full dynticks environment.
5258a3047,3049
>  * This makes sure that uptime, CFS vruntime, load
>  * balancing, etc... continue to move forward, even
>  * with a very low granularity.
5260,5261c3051
<  * Other transitions get WARN_ON_ONCE(), except that sched_tick_remote()
<  * and sched_tick_start() are happy to leave the state in RUNNING.
---
>  * Return: Maximum deferment in nanoseconds.
5263,5342c3053
< 
< static struct tick_work __percpu *tick_work_cpu;
< 
< static void sched_tick_remote(struct work_struct *work)
< {
< 	struct delayed_work *dwork = to_delayed_work(work);
< 	struct tick_work *twork = container_of(dwork, struct tick_work, work);
< 	int cpu = twork->cpu;
< 	struct rq *rq = cpu_rq(cpu);
< 	struct task_struct *curr;
< 	struct rq_flags rf;
< 	u64 delta;
< 	int os;
< 
< 	/*
< 	 * Handle the tick only if it appears the remote CPU is running in full
< 	 * dynticks mode. The check is racy by nature, but missing a tick or
< 	 * having one too much is no big deal because the scheduler tick updates
< 	 * statistics and checks timeslices in a time-independent way, regardless
< 	 * of when exactly it is running.
< 	 */
< 	if (!tick_nohz_tick_stopped_cpu(cpu))
< 		goto out_requeue;
< 
< 	rq_lock_irq(rq, &rf);
< 	curr = rq->curr;
< 	if (cpu_is_offline(cpu))
< 		goto out_unlock;
< 
< 	update_rq_clock(rq);
< 
< 	if (!is_idle_task(curr)) {
< 		/*
< 		 * Make sure the next tick runs within a reasonable
< 		 * amount of time.
< 		 */
< 		delta = rq_clock_task(rq) - curr->se.exec_start;
< 		WARN_ON_ONCE(delta > (u64)NSEC_PER_SEC * 3);
< 	}
< 	curr->sched_class->task_tick(rq, curr, 0);
< 
< 	calc_load_nohz_remote(rq);
< out_unlock:
< 	rq_unlock_irq(rq, &rf);
< out_requeue:
< 
< 	/*
< 	 * Run the remote tick once per second (1Hz). This arbitrary
< 	 * frequency is large enough to avoid overload but short enough
< 	 * to keep scheduler internal stats reasonably up to date.  But
< 	 * first update state to reflect hotplug activity if required.
< 	 */
< 	os = atomic_fetch_add_unless(&twork->state, -1, TICK_SCHED_REMOTE_RUNNING);
< 	WARN_ON_ONCE(os == TICK_SCHED_REMOTE_OFFLINE);
< 	if (os == TICK_SCHED_REMOTE_RUNNING)
< 		queue_delayed_work(system_unbound_wq, dwork, HZ);
< }
< 
< static void sched_tick_start(int cpu)
< {
< 	int os;
< 	struct tick_work *twork;
< 
< 	if (housekeeping_cpu(cpu, HK_FLAG_TICK))
< 		return;
< 
< 	WARN_ON_ONCE(!tick_work_cpu);
< 
< 	twork = per_cpu_ptr(tick_work_cpu, cpu);
< 	os = atomic_xchg(&twork->state, TICK_SCHED_REMOTE_RUNNING);
< 	WARN_ON_ONCE(os == TICK_SCHED_REMOTE_RUNNING);
< 	if (os == TICK_SCHED_REMOTE_OFFLINE) {
< 		twork->cpu = cpu;
< 		INIT_DELAYED_WORK(&twork->work, sched_tick_remote);
< 		queue_delayed_work(system_unbound_wq, &twork->work, HZ);
< 	}
< }
< 
< #ifdef CONFIG_HOTPLUG_CPU
< static void sched_tick_stop(int cpu)
---
> u64 scheduler_tick_max_deferment(void)
5344,5348c3055,3056
< 	struct tick_work *twork;
< 	int os;
< 
< 	if (housekeeping_cpu(cpu, HK_FLAG_TICK))
< 		return;
---
> 	struct rq *rq = this_rq();
> 	unsigned long next, now = READ_ONCE(jiffies);
5350c3058
< 	WARN_ON_ONCE(!tick_work_cpu);
---
> 	next = rq->last_sched_tick + HZ;
5352,5358c3060,3061
< 	twork = per_cpu_ptr(tick_work_cpu, cpu);
< 	/* There cannot be competing actions, but don't rely on stop-machine. */
< 	os = atomic_xchg(&twork->state, TICK_SCHED_REMOTE_OFFLINING);
< 	WARN_ON_ONCE(os != TICK_SCHED_REMOTE_RUNNING);
< 	/* Don't cancel, as this would mess up the state machine. */
< }
< #endif /* CONFIG_HOTPLUG_CPU */
---
> 	if (time_before_eq(next, now))
> 		return 0;
5360,5364c3063
< int __init sched_tick_offload_init(void)
< {
< 	tick_work_cpu = alloc_percpu(struct tick_work);
< 	BUG_ON(!tick_work_cpu);
< 	return 0;
---
> 	return jiffies_to_nsecs(next - now);
5366,5369d3064
< 
< #else /* !CONFIG_NO_HZ_FULL */
< static inline void sched_tick_start(int cpu) { }
< static inline void sched_tick_stop(int cpu) { }
5372,5373c3067,3068
< #if defined(CONFIG_PREEMPTION) && (defined(CONFIG_DEBUG_PREEMPT) || \
< 				defined(CONFIG_TRACE_PREEMPT_TOGGLE))
---
> #if defined(CONFIG_PREEMPT) && (defined(CONFIG_DEBUG_PREEMPT) || \
> 				defined(CONFIG_PREEMPT_TRACER))
5478c3173,3174
< 		print_ip_sym(KERN_ERR, preempt_disable_ip);
---
> 		print_ip_sym(preempt_disable_ip);
> 		pr_cont("\n");
5490c3186
< static inline void schedule_debug(struct task_struct *prev, bool preempt)
---
> static inline void schedule_debug(struct task_struct *prev)
5495,5506d3190
< 
< 	if (task_scs_end_corrupted(prev))
< 		panic("corrupted shadow stack detected inside scheduler\n");
< #endif
< 
< #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
< 	if (!preempt && READ_ONCE(prev->__state) && prev->non_block_count) {
< 		printk(KERN_ERR "BUG: scheduling in a non-blocking section: %s/%d/%i\n",
< 			prev->comm, prev->pid, prev->non_block_count);
< 		dump_stack();
< 		add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
< 	}
5514d3197
< 	SCHED_WARN_ON(ct_state() == CONTEXT_USER);
5521,5542d3203
< static void put_prev_task_balance(struct rq *rq, struct task_struct *prev,
< 				  struct rq_flags *rf)
< {
< #ifdef CONFIG_SMP
< 	const struct sched_class *class;
< 	/*
< 	 * We must do the balancing pass before put_prev_task(), such
< 	 * that when we release the rq->lock the task is in the same
< 	 * state as before we took rq->lock.
< 	 *
< 	 * We can terminate the balance pass as soon as we know there is
< 	 * a runnable task of @class priority or higher.
< 	 */
< 	for_class_range(class, prev->sched_class, &idle_sched_class) {
< 		if (class->balance(rq, prev, rf))
< 			break;
< 	}
< #endif
< 
< 	put_prev_task(rq, prev);
< }
< 
5547c3208
< __pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
---
> pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
5555c3216
< 	 * higher scheduling class, because otherwise those lose the
---
> 	 * higher scheduling class, because otherwise those loose the
5558c3219,3220
< 	if (likely(prev->sched_class <= &fair_sched_class &&
---
> 	if (likely((prev->sched_class == &idle_sched_class ||
> 		    prev->sched_class == &fair_sched_class) &&
5561c3223
< 		p = pick_next_task_fair(rq, prev, rf);
---
> 		p = fair_sched_class.pick_next_task(rq, prev, rf);
5563c3225
< 			goto restart;
---
> 			goto again;
5565,5569c3227,3229
< 		/* Assume the next prioritized class is idle_sched_class */
< 		if (!p) {
< 			put_prev_task(rq, prev);
< 			p = pick_next_task_idle(rq);
< 		}
---
> 		/* Assumes fair_sched_class->next == idle_sched_class */
> 		if (unlikely(!p))
> 			p = idle_sched_class.pick_next_task(rq, prev, rf);
5574,5576c3234
< restart:
< 	put_prev_task_balance(rq, prev, rf);
< 
---
> again:
5578,5579c3236,3239
< 		p = class->pick_next_task(rq);
< 		if (p)
---
> 		p = class->pick_next_task(rq, prev, rf);
> 		if (p) {
> 			if (unlikely(p == RETRY_TASK))
> 				goto again;
5580a3241
> 		}
5587,6125d3247
< #ifdef CONFIG_SCHED_CORE
< static inline bool is_task_rq_idle(struct task_struct *t)
< {
< 	return (task_rq(t)->idle == t);
< }
< 
< static inline bool cookie_equals(struct task_struct *a, unsigned long cookie)
< {
< 	return is_task_rq_idle(a) || (a->core_cookie == cookie);
< }
< 
< static inline bool cookie_match(struct task_struct *a, struct task_struct *b)
< {
< 	if (is_task_rq_idle(a) || is_task_rq_idle(b))
< 		return true;
< 
< 	return a->core_cookie == b->core_cookie;
< }
< 
< // XXX fairness/fwd progress conditions
< /*
<  * Returns
<  * - NULL if there is no runnable task for this class.
<  * - the highest priority task for this runqueue if it matches
<  *   rq->core->core_cookie or its priority is greater than max.
<  * - Else returns idle_task.
<  */
< static struct task_struct *
< pick_task(struct rq *rq, const struct sched_class *class, struct task_struct *max, bool in_fi)
< {
< 	struct task_struct *class_pick, *cookie_pick;
< 	unsigned long cookie = rq->core->core_cookie;
< 
< 	class_pick = class->pick_task(rq);
< 	if (!class_pick)
< 		return NULL;
< 
< 	if (!cookie) {
< 		/*
< 		 * If class_pick is tagged, return it only if it has
< 		 * higher priority than max.
< 		 */
< 		if (max && class_pick->core_cookie &&
< 		    prio_less(class_pick, max, in_fi))
< 			return idle_sched_class.pick_task(rq);
< 
< 		return class_pick;
< 	}
< 
< 	/*
< 	 * If class_pick is idle or matches cookie, return early.
< 	 */
< 	if (cookie_equals(class_pick, cookie))
< 		return class_pick;
< 
< 	cookie_pick = sched_core_find(rq, cookie);
< 
< 	/*
< 	 * If class > max && class > cookie, it is the highest priority task on
< 	 * the core (so far) and it must be selected, otherwise we must go with
< 	 * the cookie pick in order to satisfy the constraint.
< 	 */
< 	if (prio_less(cookie_pick, class_pick, in_fi) &&
< 	    (!max || prio_less(max, class_pick, in_fi)))
< 		return class_pick;
< 
< 	return cookie_pick;
< }
< 
< extern void task_vruntime_update(struct rq *rq, struct task_struct *p, bool in_fi);
< 
< static struct task_struct *
< pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
< {
< 	struct task_struct *next, *max = NULL;
< 	const struct sched_class *class;
< 	const struct cpumask *smt_mask;
< 	bool fi_before = false;
< 	int i, j, cpu, occ = 0;
< 	bool need_sync;
< 
< 	if (!sched_core_enabled(rq))
< 		return __pick_next_task(rq, prev, rf);
< 
< 	cpu = cpu_of(rq);
< 
< 	/* Stopper task is switching into idle, no need core-wide selection. */
< 	if (cpu_is_offline(cpu)) {
< 		/*
< 		 * Reset core_pick so that we don't enter the fastpath when
< 		 * coming online. core_pick would already be migrated to
< 		 * another cpu during offline.
< 		 */
< 		rq->core_pick = NULL;
< 		return __pick_next_task(rq, prev, rf);
< 	}
< 
< 	/*
< 	 * If there were no {en,de}queues since we picked (IOW, the task
< 	 * pointers are all still valid), and we haven't scheduled the last
< 	 * pick yet, do so now.
< 	 *
< 	 * rq->core_pick can be NULL if no selection was made for a CPU because
< 	 * it was either offline or went offline during a sibling's core-wide
< 	 * selection. In this case, do a core-wide selection.
< 	 */
< 	if (rq->core->core_pick_seq == rq->core->core_task_seq &&
< 	    rq->core->core_pick_seq != rq->core_sched_seq &&
< 	    rq->core_pick) {
< 		WRITE_ONCE(rq->core_sched_seq, rq->core->core_pick_seq);
< 
< 		next = rq->core_pick;
< 		if (next != prev) {
< 			put_prev_task(rq, prev);
< 			set_next_task(rq, next);
< 		}
< 
< 		rq->core_pick = NULL;
< 		return next;
< 	}
< 
< 	put_prev_task_balance(rq, prev, rf);
< 
< 	smt_mask = cpu_smt_mask(cpu);
< 	need_sync = !!rq->core->core_cookie;
< 
< 	/* reset state */
< 	rq->core->core_cookie = 0UL;
< 	if (rq->core->core_forceidle) {
< 		need_sync = true;
< 		fi_before = true;
< 		rq->core->core_forceidle = false;
< 	}
< 
< 	/*
< 	 * core->core_task_seq, core->core_pick_seq, rq->core_sched_seq
< 	 *
< 	 * @task_seq guards the task state ({en,de}queues)
< 	 * @pick_seq is the @task_seq we did a selection on
< 	 * @sched_seq is the @pick_seq we scheduled
< 	 *
< 	 * However, preemptions can cause multiple picks on the same task set.
< 	 * 'Fix' this by also increasing @task_seq for every pick.
< 	 */
< 	rq->core->core_task_seq++;
< 
< 	/*
< 	 * Optimize for common case where this CPU has no cookies
< 	 * and there are no cookied tasks running on siblings.
< 	 */
< 	if (!need_sync) {
< 		for_each_class(class) {
< 			next = class->pick_task(rq);
< 			if (next)
< 				break;
< 		}
< 
< 		if (!next->core_cookie) {
< 			rq->core_pick = NULL;
< 			/*
< 			 * For robustness, update the min_vruntime_fi for
< 			 * unconstrained picks as well.
< 			 */
< 			WARN_ON_ONCE(fi_before);
< 			task_vruntime_update(rq, next, false);
< 			goto done;
< 		}
< 	}
< 
< 	for_each_cpu(i, smt_mask) {
< 		struct rq *rq_i = cpu_rq(i);
< 
< 		rq_i->core_pick = NULL;
< 
< 		if (i != cpu)
< 			update_rq_clock(rq_i);
< 	}
< 
< 	/*
< 	 * Try and select tasks for each sibling in descending sched_class
< 	 * order.
< 	 */
< 	for_each_class(class) {
< again:
< 		for_each_cpu_wrap(i, smt_mask, cpu) {
< 			struct rq *rq_i = cpu_rq(i);
< 			struct task_struct *p;
< 
< 			if (rq_i->core_pick)
< 				continue;
< 
< 			/*
< 			 * If this sibling doesn't yet have a suitable task to
< 			 * run; ask for the most eligible task, given the
< 			 * highest priority task already selected for this
< 			 * core.
< 			 */
< 			p = pick_task(rq_i, class, max, fi_before);
< 			if (!p)
< 				continue;
< 
< 			if (!is_task_rq_idle(p))
< 				occ++;
< 
< 			rq_i->core_pick = p;
< 			if (rq_i->idle == p && rq_i->nr_running) {
< 				rq->core->core_forceidle = true;
< 				if (!fi_before)
< 					rq->core->core_forceidle_seq++;
< 			}
< 
< 			/*
< 			 * If this new candidate is of higher priority than the
< 			 * previous; and they're incompatible; we need to wipe
< 			 * the slate and start over. pick_task makes sure that
< 			 * p's priority is more than max if it doesn't match
< 			 * max's cookie.
< 			 *
< 			 * NOTE: this is a linear max-filter and is thus bounded
< 			 * in execution time.
< 			 */
< 			if (!max || !cookie_match(max, p)) {
< 				struct task_struct *old_max = max;
< 
< 				rq->core->core_cookie = p->core_cookie;
< 				max = p;
< 
< 				if (old_max) {
< 					rq->core->core_forceidle = false;
< 					for_each_cpu(j, smt_mask) {
< 						if (j == i)
< 							continue;
< 
< 						cpu_rq(j)->core_pick = NULL;
< 					}
< 					occ = 1;
< 					goto again;
< 				}
< 			}
< 		}
< 	}
< 
< 	rq->core->core_pick_seq = rq->core->core_task_seq;
< 	next = rq->core_pick;
< 	rq->core_sched_seq = rq->core->core_pick_seq;
< 
< 	/* Something should have been selected for current CPU */
< 	WARN_ON_ONCE(!next);
< 
< 	/*
< 	 * Reschedule siblings
< 	 *
< 	 * NOTE: L1TF -- at this point we're no longer running the old task and
< 	 * sending an IPI (below) ensures the sibling will no longer be running
< 	 * their task. This ensures there is no inter-sibling overlap between
< 	 * non-matching user state.
< 	 */
< 	for_each_cpu(i, smt_mask) {
< 		struct rq *rq_i = cpu_rq(i);
< 
< 		/*
< 		 * An online sibling might have gone offline before a task
< 		 * could be picked for it, or it might be offline but later
< 		 * happen to come online, but its too late and nothing was
< 		 * picked for it.  That's Ok - it will pick tasks for itself,
< 		 * so ignore it.
< 		 */
< 		if (!rq_i->core_pick)
< 			continue;
< 
< 		/*
< 		 * Update for new !FI->FI transitions, or if continuing to be in !FI:
< 		 * fi_before     fi      update?
< 		 *  0            0       1
< 		 *  0            1       1
< 		 *  1            0       1
< 		 *  1            1       0
< 		 */
< 		if (!(fi_before && rq->core->core_forceidle))
< 			task_vruntime_update(rq_i, rq_i->core_pick, rq->core->core_forceidle);
< 
< 		rq_i->core_pick->core_occupation = occ;
< 
< 		if (i == cpu) {
< 			rq_i->core_pick = NULL;
< 			continue;
< 		}
< 
< 		/* Did we break L1TF mitigation requirements? */
< 		WARN_ON_ONCE(!cookie_match(next, rq_i->core_pick));
< 
< 		if (rq_i->curr == rq_i->core_pick) {
< 			rq_i->core_pick = NULL;
< 			continue;
< 		}
< 
< 		resched_curr(rq_i);
< 	}
< 
< done:
< 	set_next_task(rq, next);
< 	return next;
< }
< 
< static bool try_steal_cookie(int this, int that)
< {
< 	struct rq *dst = cpu_rq(this), *src = cpu_rq(that);
< 	struct task_struct *p;
< 	unsigned long cookie;
< 	bool success = false;
< 
< 	local_irq_disable();
< 	double_rq_lock(dst, src);
< 
< 	cookie = dst->core->core_cookie;
< 	if (!cookie)
< 		goto unlock;
< 
< 	if (dst->curr != dst->idle)
< 		goto unlock;
< 
< 	p = sched_core_find(src, cookie);
< 	if (p == src->idle)
< 		goto unlock;
< 
< 	do {
< 		if (p == src->core_pick || p == src->curr)
< 			goto next;
< 
< 		if (!cpumask_test_cpu(this, &p->cpus_mask))
< 			goto next;
< 
< 		if (p->core_occupation > dst->idle->core_occupation)
< 			goto next;
< 
< 		deactivate_task(src, p, 0);
< 		set_task_cpu(p, this);
< 		activate_task(dst, p, 0);
< 
< 		resched_curr(dst);
< 
< 		success = true;
< 		break;
< 
< next:
< 		p = sched_core_next(p, cookie);
< 	} while (p);
< 
< unlock:
< 	double_rq_unlock(dst, src);
< 	local_irq_enable();
< 
< 	return success;
< }
< 
< static bool steal_cookie_task(int cpu, struct sched_domain *sd)
< {
< 	int i;
< 
< 	for_each_cpu_wrap(i, sched_domain_span(sd), cpu) {
< 		if (i == cpu)
< 			continue;
< 
< 		if (need_resched())
< 			break;
< 
< 		if (try_steal_cookie(cpu, i))
< 			return true;
< 	}
< 
< 	return false;
< }
< 
< static void sched_core_balance(struct rq *rq)
< {
< 	struct sched_domain *sd;
< 	int cpu = cpu_of(rq);
< 
< 	preempt_disable();
< 	rcu_read_lock();
< 	raw_spin_rq_unlock_irq(rq);
< 	for_each_domain(cpu, sd) {
< 		if (need_resched())
< 			break;
< 
< 		if (steal_cookie_task(cpu, sd))
< 			break;
< 	}
< 	raw_spin_rq_lock_irq(rq);
< 	rcu_read_unlock();
< 	preempt_enable();
< }
< 
< static DEFINE_PER_CPU(struct callback_head, core_balance_head);
< 
< void queue_core_balance(struct rq *rq)
< {
< 	if (!sched_core_enabled(rq))
< 		return;
< 
< 	if (!rq->core->core_cookie)
< 		return;
< 
< 	if (!rq->nr_running) /* not forced idle */
< 		return;
< 
< 	queue_balance_callback(rq, &per_cpu(core_balance_head, rq->cpu), sched_core_balance);
< }
< 
< static void sched_core_cpu_starting(unsigned int cpu)
< {
< 	const struct cpumask *smt_mask = cpu_smt_mask(cpu);
< 	struct rq *rq = cpu_rq(cpu), *core_rq = NULL;
< 	unsigned long flags;
< 	int t;
< 
< 	sched_core_lock(cpu, &flags);
< 
< 	WARN_ON_ONCE(rq->core != rq);
< 
< 	/* if we're the first, we'll be our own leader */
< 	if (cpumask_weight(smt_mask) == 1)
< 		goto unlock;
< 
< 	/* find the leader */
< 	for_each_cpu(t, smt_mask) {
< 		if (t == cpu)
< 			continue;
< 		rq = cpu_rq(t);
< 		if (rq->core == rq) {
< 			core_rq = rq;
< 			break;
< 		}
< 	}
< 
< 	if (WARN_ON_ONCE(!core_rq)) /* whoopsie */
< 		goto unlock;
< 
< 	/* install and validate core_rq */
< 	for_each_cpu(t, smt_mask) {
< 		rq = cpu_rq(t);
< 
< 		if (t == cpu)
< 			rq->core = core_rq;
< 
< 		WARN_ON_ONCE(rq->core != core_rq);
< 	}
< 
< unlock:
< 	sched_core_unlock(cpu, &flags);
< }
< 
< static void sched_core_cpu_deactivate(unsigned int cpu)
< {
< 	const struct cpumask *smt_mask = cpu_smt_mask(cpu);
< 	struct rq *rq = cpu_rq(cpu), *core_rq = NULL;
< 	unsigned long flags;
< 	int t;
< 
< 	sched_core_lock(cpu, &flags);
< 
< 	/* if we're the last man standing, nothing to do */
< 	if (cpumask_weight(smt_mask) == 1) {
< 		WARN_ON_ONCE(rq->core != rq);
< 		goto unlock;
< 	}
< 
< 	/* if we're not the leader, nothing to do */
< 	if (rq->core != rq)
< 		goto unlock;
< 
< 	/* find a new leader */
< 	for_each_cpu(t, smt_mask) {
< 		if (t == cpu)
< 			continue;
< 		core_rq = cpu_rq(t);
< 		break;
< 	}
< 
< 	if (WARN_ON_ONCE(!core_rq)) /* impossible */
< 		goto unlock;
< 
< 	/* copy the shared state to the new leader */
< 	core_rq->core_task_seq      = rq->core_task_seq;
< 	core_rq->core_pick_seq      = rq->core_pick_seq;
< 	core_rq->core_cookie        = rq->core_cookie;
< 	core_rq->core_forceidle     = rq->core_forceidle;
< 	core_rq->core_forceidle_seq = rq->core_forceidle_seq;
< 
< 	/* install new leader */
< 	for_each_cpu(t, smt_mask) {
< 		rq = cpu_rq(t);
< 		rq->core = core_rq;
< 	}
< 
< unlock:
< 	sched_core_unlock(cpu, &flags);
< }
< 
< static inline void sched_core_cpu_dying(unsigned int cpu)
< {
< 	struct rq *rq = cpu_rq(cpu);
< 
< 	if (rq->core != rq)
< 		rq->core = rq;
< }
< 
< #else /* !CONFIG_SCHED_CORE */
< 
< static inline void sched_core_cpu_starting(unsigned int cpu) {}
< static inline void sched_core_cpu_deactivate(unsigned int cpu) {}
< static inline void sched_core_cpu_dying(unsigned int cpu) {}
< 
< static struct task_struct *
< pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
< {
< 	return __pick_next_task(rq, prev, rf);
< }
< 
< #endif /* CONFIG_SCHED_CORE */
< 
< /*
<  * Constants for the sched_mode argument of __schedule().
<  *
<  * The mode argument allows RT enabled kernels to differentiate a
<  * preemption from blocking on an 'sleeping' spin/rwlock. Note that
<  * SM_MASK_PREEMPT for !RT has all bits set, which allows the compiler to
<  * optimize the AND operation out and just check for zero.
<  */
< #define SM_NONE			0x0
< #define SM_PREEMPT		0x1
< #define SM_RTLOCK_WAIT		0x2
< 
< #ifndef CONFIG_PREEMPT_RT
< # define SM_MASK_PREEMPT	(~0U)
< #else
< # define SM_MASK_PREEMPT	SM_PREEMPT
< #endif
< 
6146c3268
<  *       - If the kernel is preemptible (CONFIG_PREEMPTION=y):
---
>  *       - If the kernel is preemptible (CONFIG_PREEMPT=y):
6155c3277
<  *       - If the kernel is not preemptible (CONFIG_PREEMPTION is not set)
---
>  *       - If the kernel is not preemptible (CONFIG_PREEMPT is not set)
6165c3287
< static void __sched notrace __schedule(unsigned int sched_mode)
---
> static void __sched notrace __schedule(bool preempt)
6169d3290
< 	unsigned long prev_state;
6178c3299
< 	schedule_debug(prev, !!sched_mode);
---
> 	schedule_debug(prev);
6180c3301
< 	if (sched_feat(HRTICK) || sched_feat(HRTICK_DL))
---
> 	if (sched_feat(HRTICK))
6184c3305
< 	rcu_note_context_switch(!!sched_mode);
---
> 	rcu_note_context_switch(preempt);
6189,6199c3310
< 	 * done by the caller to avoid the race with signal_wake_up():
< 	 *
< 	 * __set_current_state(@state)		signal_wake_up()
< 	 * schedule()				  set_tsk_thread_flag(p, TIF_SIGPENDING)
< 	 *					  wake_up_state(p, state)
< 	 *   LOCK rq->lock			    LOCK p->pi_state
< 	 *   smp_mb__after_spinlock()		    smp_mb__after_spinlock()
< 	 *     if (signal_pending_state())	    if (p->state & @state)
< 	 *
< 	 * Also, the membarrier system call requires a full memory barrier
< 	 * after coming from user-space, before storing to rq->curr.
---
> 	 * done by the caller to avoid the race with signal_wake_up().
6209,6220c3320,3322
< 
< 	/*
< 	 * We must load prev->state once (task_struct::state is volatile), such
< 	 * that:
< 	 *
< 	 *  - we form a control dependency vs deactivate_task() below.
< 	 *  - ptrace_{,un}freeze_traced() can change ->state underneath us.
< 	 */
< 	prev_state = READ_ONCE(prev->__state);
< 	if (!(sched_mode & SM_MASK_PREEMPT) && prev_state) {
< 		if (signal_pending_state(prev_state, prev)) {
< 			WRITE_ONCE(prev->__state, TASK_RUNNING);
---
> 	if (!preempt && prev->state) {
> 		if (unlikely(signal_pending_state(prev->state, prev))) {
> 			prev->state = TASK_RUNNING;
6222,6240d3323
< 			prev->sched_contributes_to_load =
< 				(prev_state & TASK_UNINTERRUPTIBLE) &&
< 				!(prev_state & TASK_NOLOAD) &&
< 				!(prev->flags & PF_FROZEN);
< 
< 			if (prev->sched_contributes_to_load)
< 				rq->nr_uninterruptible++;
< 
< 			/*
< 			 * __schedule()			ttwu()
< 			 *   prev_state = prev->state;    if (p->on_rq && ...)
< 			 *   if (prev_state)		    goto out;
< 			 *     p->on_rq = 0;		  smp_acquire__after_ctrl_dep();
< 			 *				  p->state = TASK_WAKING
< 			 *
< 			 * Where __schedule() and ttwu() have matching control dependencies.
< 			 *
< 			 * After this, schedule() must not care about p->state any more.
< 			 */
6241a3325
> 			prev->on_rq = 0;
6246a3331,3343
> 
> 			/*
> 			 * If a worker went to sleep, notify and ask workqueue
> 			 * whether it wants to wake up a task to maintain
> 			 * concurrency.
> 			 */
> 			if (prev->flags & PF_WQ_WORKER) {
> 				struct task_struct *to_wakeup;
> 
> 				to_wakeup = wq_worker_sleeping(prev);
> 				if (to_wakeup)
> 					try_to_wake_up_local(to_wakeup, &rf);
> 			}
6254,6256d3350
< #ifdef CONFIG_SCHED_DEBUG
< 	rq->last_seen_need_resched_ns = 0;
< #endif
6260,6264c3354
< 		/*
< 		 * RCU users of rcu_dereference(rq->curr) may not see
< 		 * changes to task_struct made by pick_next_task().
< 		 */
< 		RCU_INIT_POINTER(rq->curr, next);
---
> 		rq->curr = next;
6268,6277c3358,3368
< 		 * rq->curr, before returning to user-space.
< 		 *
< 		 * Here are the schemes providing that barrier on the
< 		 * various architectures:
< 		 * - mm ? switch_mm() : mmdrop() for x86, s390, sparc, PowerPC.
< 		 *   switch_mm() rely on membarrier_arch_switch_mm() on PowerPC.
< 		 * - finish_lock_switch() for weakly-ordered
< 		 *   architectures where spin_unlock is a full barrier,
< 		 * - switch_to() for arm64 (weakly-ordered, spin_unlock
< 		 *   is a RELEASE barrier),
---
> 		 * rq->curr, before returning to user-space. For TSO
> 		 * (e.g. x86), the architecture must provide its own
> 		 * barrier in switch_mm(). For weakly ordered machines
> 		 * for which spin_unlock() acts as a full memory
> 		 * barrier, finish_lock_switch() in common code takes
> 		 * care of this barrier. For weakly ordered machines for
> 		 * which spin_unlock() acts as a RELEASE barrier (only
> 		 * arm64 and PowerPC), arm64 has a full barrier in
> 		 * switch_to(), and PowerPC has
> 		 * smp_mb__after_unlock_lock() before
> 		 * finish_lock_switch().
6281,6284c3372
< 		migrate_disable_switch(rq, prev);
< 		psi_sched_switch(prev, next, !task_on_rq_queued(prev));
< 
< 		trace_sched_switch(sched_mode & SM_MASK_PREEMPT, prev, next);
---
> 		trace_sched_switch(preempt, prev, next);
6290,6293c3378
< 
< 		rq_unpin_lock(rq, &rf);
< 		__balance_callbacks(rq);
< 		raw_spin_rq_unlock_irq(rq);
---
> 		rq_unlock_irq(rq, &rf);
6294a3380,3381
> 
> 	balance_callback(rq);
6298a3386,3400
> 	/*
> 	 * The setting of TASK_RUNNING by try_to_wake_up() may be delayed
> 	 * when the following two conditions become true.
> 	 *   - There is race condition of mmap_sem (It is acquired by
> 	 *     exit_mm()), and
> 	 *   - SMI occurs before setting TASK_RUNINNG.
> 	 *     (or hypervisor of virtual machine switches to other guest)
> 	 *  As a result, we may become TASK_RUNNING after becoming TASK_DEAD
> 	 *
> 	 * To avoid it, we have to wait for releasing tsk->pi_lock which
> 	 * is held by try_to_wake_up()
> 	 */
> 	raw_spin_lock_irq(&current->pi_lock);
> 	raw_spin_unlock_irq(&current->pi_lock);
> 
6300c3402
< 	set_special_state(TASK_DEAD);
---
> 	__set_current_state(TASK_DEAD);
6305c3407
< 	__schedule(SM_NONE);
---
> 	__schedule(false);
6315,6338c3417
< 	unsigned int task_flags;
< 
< 	if (task_is_running(tsk))
< 		return;
< 
< 	task_flags = tsk->flags;
< 	/*
< 	 * If a worker went to sleep, notify and ask workqueue whether
< 	 * it wants to wake up a task to maintain concurrency.
< 	 * As this function is called inside the schedule() context,
< 	 * we disable preemption to avoid it calling schedule() again
< 	 * in the possible wakeup of a kworker and because wq_worker_sleeping()
< 	 * requires it.
< 	 */
< 	if (task_flags & (PF_WQ_WORKER | PF_IO_WORKER)) {
< 		preempt_disable();
< 		if (task_flags & PF_WQ_WORKER)
< 			wq_worker_sleeping(tsk);
< 		else
< 			io_wq_worker_sleeping(tsk);
< 		preempt_enable_no_resched();
< 	}
< 
< 	if (tsk_is_pi_blocked(tsk))
---
> 	if (!tsk->state || tsk_is_pi_blocked(tsk))
6340d3418
< 
6349,6358d3426
< static void sched_update_worker(struct task_struct *tsk)
< {
< 	if (tsk->flags & (PF_WQ_WORKER | PF_IO_WORKER)) {
< 		if (tsk->flags & PF_WQ_WORKER)
< 			wq_worker_running(tsk);
< 		else
< 			io_wq_worker_running(tsk);
< 	}
< }
< 
6366c3434
< 		__schedule(SM_NONE);
---
> 		__schedule(false);
6369d3436
< 	sched_update_worker(tsk);
6392c3459
< 	WARN_ON_ONCE(current->__state);
---
> 	WARN_ON_ONCE(current->state);
6394c3461
< 		__schedule(SM_NONE);
---
> 		__schedule(false);
6398c3465
< #if defined(CONFIG_CONTEXT_TRACKING) && !defined(CONFIG_HAVE_CONTEXT_TRACKING_OFFSTACK)
---
> #ifdef CONFIG_CONTEXT_TRACKING
6429,6440d3495
< #ifdef CONFIG_PREEMPT_RT
< void __sched notrace schedule_rtlock(void)
< {
< 	do {
< 		preempt_disable();
< 		__schedule(SM_RTLOCK_WAIT);
< 		sched_preempt_enable_no_resched();
< 	} while (need_resched());
< }
< NOKPROBE_SYMBOL(schedule_rtlock);
< #endif
< 
6459c3514
< 		__schedule(SM_PREEMPT);
---
> 		__schedule(true);
6470c3525
< #ifdef CONFIG_PREEMPTION
---
> #ifdef CONFIG_PREEMPT
6472,6473c3527,3529
<  * This is the entry point to schedule() from in-kernel preemption
<  * off of preempt_enable.
---
>  * this is the entry point to schedule() from in-kernel preemption
>  * off of preempt_enable. Kernel preemptions off return from interrupt
>  * occur there and call schedule directly.
6489,6494d3544
< #ifdef CONFIG_PREEMPT_DYNAMIC
< DEFINE_STATIC_CALL(preempt_schedule, __preempt_schedule_func);
< EXPORT_STATIC_CALL_TRAMP(preempt_schedule);
< #endif
< 
< 
6538c3588
< 		__schedule(SM_PREEMPT);
---
> 		__schedule(true);
6547,6667c3597
< #ifdef CONFIG_PREEMPT_DYNAMIC
< DEFINE_STATIC_CALL(preempt_schedule_notrace, __preempt_schedule_notrace_func);
< EXPORT_STATIC_CALL_TRAMP(preempt_schedule_notrace);
< #endif
< 
< #endif /* CONFIG_PREEMPTION */
< 
< #ifdef CONFIG_PREEMPT_DYNAMIC
< 
< #include <linux/entry-common.h>
< 
< /*
<  * SC:cond_resched
<  * SC:might_resched
<  * SC:preempt_schedule
<  * SC:preempt_schedule_notrace
<  * SC:irqentry_exit_cond_resched
<  *
<  *
<  * NONE:
<  *   cond_resched               <- __cond_resched
<  *   might_resched              <- RET0
<  *   preempt_schedule           <- NOP
<  *   preempt_schedule_notrace   <- NOP
<  *   irqentry_exit_cond_resched <- NOP
<  *
<  * VOLUNTARY:
<  *   cond_resched               <- __cond_resched
<  *   might_resched              <- __cond_resched
<  *   preempt_schedule           <- NOP
<  *   preempt_schedule_notrace   <- NOP
<  *   irqentry_exit_cond_resched <- NOP
<  *
<  * FULL:
<  *   cond_resched               <- RET0
<  *   might_resched              <- RET0
<  *   preempt_schedule           <- preempt_schedule
<  *   preempt_schedule_notrace   <- preempt_schedule_notrace
<  *   irqentry_exit_cond_resched <- irqentry_exit_cond_resched
<  */
< 
< enum {
< 	preempt_dynamic_none = 0,
< 	preempt_dynamic_voluntary,
< 	preempt_dynamic_full,
< };
< 
< int preempt_dynamic_mode = preempt_dynamic_full;
< 
< int sched_dynamic_mode(const char *str)
< {
< 	if (!strcmp(str, "none"))
< 		return preempt_dynamic_none;
< 
< 	if (!strcmp(str, "voluntary"))
< 		return preempt_dynamic_voluntary;
< 
< 	if (!strcmp(str, "full"))
< 		return preempt_dynamic_full;
< 
< 	return -EINVAL;
< }
< 
< void sched_dynamic_update(int mode)
< {
< 	/*
< 	 * Avoid {NONE,VOLUNTARY} -> FULL transitions from ever ending up in
< 	 * the ZERO state, which is invalid.
< 	 */
< 	static_call_update(cond_resched, __cond_resched);
< 	static_call_update(might_resched, __cond_resched);
< 	static_call_update(preempt_schedule, __preempt_schedule_func);
< 	static_call_update(preempt_schedule_notrace, __preempt_schedule_notrace_func);
< 	static_call_update(irqentry_exit_cond_resched, irqentry_exit_cond_resched);
< 
< 	switch (mode) {
< 	case preempt_dynamic_none:
< 		static_call_update(cond_resched, __cond_resched);
< 		static_call_update(might_resched, (void *)&__static_call_return0);
< 		static_call_update(preempt_schedule, NULL);
< 		static_call_update(preempt_schedule_notrace, NULL);
< 		static_call_update(irqentry_exit_cond_resched, NULL);
< 		pr_info("Dynamic Preempt: none\n");
< 		break;
< 
< 	case preempt_dynamic_voluntary:
< 		static_call_update(cond_resched, __cond_resched);
< 		static_call_update(might_resched, __cond_resched);
< 		static_call_update(preempt_schedule, NULL);
< 		static_call_update(preempt_schedule_notrace, NULL);
< 		static_call_update(irqentry_exit_cond_resched, NULL);
< 		pr_info("Dynamic Preempt: voluntary\n");
< 		break;
< 
< 	case preempt_dynamic_full:
< 		static_call_update(cond_resched, (void *)&__static_call_return0);
< 		static_call_update(might_resched, (void *)&__static_call_return0);
< 		static_call_update(preempt_schedule, __preempt_schedule_func);
< 		static_call_update(preempt_schedule_notrace, __preempt_schedule_notrace_func);
< 		static_call_update(irqentry_exit_cond_resched, irqentry_exit_cond_resched);
< 		pr_info("Dynamic Preempt: full\n");
< 		break;
< 	}
< 
< 	preempt_dynamic_mode = mode;
< }
< 
< static int __init setup_preempt_mode(char *str)
< {
< 	int mode = sched_dynamic_mode(str);
< 	if (mode < 0) {
< 		pr_warn("Dynamic Preempt: unsupported mode: %s\n", str);
< 		return 1;
< 	}
< 
< 	sched_dynamic_update(mode);
< 	return 0;
< }
< __setup("preempt=", setup_preempt_mode);
< 
< #endif /* CONFIG_PREEMPT_DYNAMIC */
---
> #endif /* CONFIG_PREEMPT */
6670c3600
<  * This is the entry point to schedule() from kernel preemption
---
>  * this is the entry point to schedule() from kernel preemption
6687c3617
< 		__schedule(SM_PREEMPT);
---
> 		__schedule(true);
6698d3627
< 	WARN_ON_ONCE(IS_ENABLED(CONFIG_SCHED_DEBUG) && wake_flags & ~WF_SYNC);
6703,6714d3631
< static void __setscheduler_prio(struct task_struct *p, int prio)
< {
< 	if (dl_prio(prio))
< 		p->sched_class = &dl_sched_class;
< 	else if (rt_prio(prio))
< 		p->sched_class = &rt_sched_class;
< 	else
< 		p->sched_class = &fair_sched_class;
< 
< 	p->prio = prio;
< }
< 
6770c3687
< 	 * points to a blocked task -- which guarantees the task is present.
---
> 	 * points to a blocked task -- which guaratees the task is present.
6823,6825c3740,3741
< 		    (pi_task && dl_prio(pi_task->prio) &&
< 		     dl_entity_preempt(&pi_task->dl, &p->dl))) {
< 			p->dl.pi_se = pi_task->dl.pi_se;
---
> 		    (pi_task && dl_entity_preempt(&pi_task->dl, &p->dl))) {
> 			p->dl.dl_boosted = 1;
6827,6829c3743,3745
< 		} else {
< 			p->dl.pi_se = &p->dl;
< 		}
---
> 		} else
> 			p->dl.dl_boosted = 0;
> 		p->sched_class = &dl_sched_class;
6832c3748
< 			p->dl.pi_se = &p->dl;
---
> 			p->dl.dl_boosted = 0;
6834a3751
> 		p->sched_class = &rt_sched_class;
6837c3754
< 			p->dl.pi_se = &p->dl;
---
> 			p->dl.dl_boosted = 0;
6839a3757
> 		p->sched_class = &fair_sched_class;
6842c3760
< 	__setscheduler_prio(p, prio);
---
> 	p->prio = prio;
6847c3765
< 		set_next_task(rq, p);
---
> 		set_curr_task(rq, p);
6852a3771
> 	__task_rq_unlock(rq, &rf);
6854,6857c3773
< 	rq_unpin_lock(rq, &rf);
< 	__balance_callbacks(rq);
< 	raw_spin_rq_unlock(rq);
< 
---
> 	balance_callback(rq);
6870c3786
< 	int old_prio;
---
> 	int old_prio, delta;
6886c3802
< 	 * it won't have any effect on scheduling until the task is
---
> 	 * it wont have any effect on scheduling until the task is
6903a3820
> 	delta = p->prio - old_prio;
6905c3822
< 	if (queued)
---
> 	if (queued) {
6906a3824,3830
> 		/*
> 		 * If the task increased its priority or is running and
> 		 * lowered its priority, then reschedule its CPU:
> 		 */
> 		if (delta < 0 || (delta > 0 && task_running(rq, p)))
> 			resched_curr(rq);
> 	}
6908,6915c3832
< 		set_next_task(rq, p);
< 
< 	/*
< 	 * If the task increased its priority or is running and
< 	 * lowered its priority, then reschedule its CPU:
< 	 */
< 	p->sched_class->prio_changed(rq, p, old_prio);
< 
---
> 		set_curr_task(rq, p);
6975,6980c3892,3893
<  *
<  * sched policy         return value   kernel prio    user prio/nice
<  *
<  * normal, batch, idle     [0 ... 39]  [100 ... 139]          0/[-20 ... 19]
<  * fifo, rr             [-2 ... -100]     [98 ... 0]  [1 ... 99]
<  * deadline                     -101             -1           0
---
>  * RT tasks are offset by -200. Normal tasks are centered
>  * around 0, value goes from -16 to +15.
7004c3917
< 	if (rq->ttwu_pending)
---
> 	if (!llist_empty(&rq->wake_list))
7012,7028d3924
<  * available_idle_cpu - is a given CPU idle for enqueuing work.
<  * @cpu: the CPU in question.
<  *
<  * Return: 1 if the CPU is currently idle. 0 otherwise.
<  */
< int available_idle_cpu(int cpu)
< {
< 	if (!idle_cpu(cpu))
< 		return 0;
< 
< 	if (vcpu_is_preempted(cpu))
< 		return 0;
< 
< 	return 1;
< }
< 
< /**
7039,7152d3934
< #ifdef CONFIG_SMP
< /*
<  * This function computes an effective utilization for the given CPU, to be
<  * used for frequency selection given the linear relation: f = u * f_max.
<  *
<  * The scheduler tracks the following metrics:
<  *
<  *   cpu_util_{cfs,rt,dl,irq}()
<  *   cpu_bw_dl()
<  *
<  * Where the cfs,rt and dl util numbers are tracked with the same metric and
<  * synchronized windows and are thus directly comparable.
<  *
<  * The cfs,rt,dl utilization are the running times measured with rq->clock_task
<  * which excludes things like IRQ and steal-time. These latter are then accrued
<  * in the irq utilization.
<  *
<  * The DL bandwidth number otoh is not a measured metric but a value computed
<  * based on the task model parameters and gives the minimal utilization
<  * required to meet deadlines.
<  */
< unsigned long effective_cpu_util(int cpu, unsigned long util_cfs,
< 				 unsigned long max, enum cpu_util_type type,
< 				 struct task_struct *p)
< {
< 	unsigned long dl_util, util, irq;
< 	struct rq *rq = cpu_rq(cpu);
< 
< 	if (!uclamp_is_used() &&
< 	    type == FREQUENCY_UTIL && rt_rq_is_runnable(&rq->rt)) {
< 		return max;
< 	}
< 
< 	/*
< 	 * Early check to see if IRQ/steal time saturates the CPU, can be
< 	 * because of inaccuracies in how we track these -- see
< 	 * update_irq_load_avg().
< 	 */
< 	irq = cpu_util_irq(rq);
< 	if (unlikely(irq >= max))
< 		return max;
< 
< 	/*
< 	 * Because the time spend on RT/DL tasks is visible as 'lost' time to
< 	 * CFS tasks and we use the same metric to track the effective
< 	 * utilization (PELT windows are synchronized) we can directly add them
< 	 * to obtain the CPU's actual utilization.
< 	 *
< 	 * CFS and RT utilization can be boosted or capped, depending on
< 	 * utilization clamp constraints requested by currently RUNNABLE
< 	 * tasks.
< 	 * When there are no CFS RUNNABLE tasks, clamps are released and
< 	 * frequency will be gracefully reduced with the utilization decay.
< 	 */
< 	util = util_cfs + cpu_util_rt(rq);
< 	if (type == FREQUENCY_UTIL)
< 		util = uclamp_rq_util_with(rq, util, p);
< 
< 	dl_util = cpu_util_dl(rq);
< 
< 	/*
< 	 * For frequency selection we do not make cpu_util_dl() a permanent part
< 	 * of this sum because we want to use cpu_bw_dl() later on, but we need
< 	 * to check if the CFS+RT+DL sum is saturated (ie. no idle time) such
< 	 * that we select f_max when there is no idle time.
< 	 *
< 	 * NOTE: numerical errors or stop class might cause us to not quite hit
< 	 * saturation when we should -- something for later.
< 	 */
< 	if (util + dl_util >= max)
< 		return max;
< 
< 	/*
< 	 * OTOH, for energy computation we need the estimated running time, so
< 	 * include util_dl and ignore dl_bw.
< 	 */
< 	if (type == ENERGY_UTIL)
< 		util += dl_util;
< 
< 	/*
< 	 * There is still idle time; further improve the number by using the
< 	 * irq metric. Because IRQ/steal time is hidden from the task clock we
< 	 * need to scale the task numbers:
< 	 *
< 	 *              max - irq
< 	 *   U' = irq + --------- * U
< 	 *                 max
< 	 */
< 	util = scale_irq_capacity(util, irq, max);
< 	util += irq;
< 
< 	/*
< 	 * Bandwidth required by DEADLINE must always be granted while, for
< 	 * FAIR and RT, we use blocked utilization of IDLE CPUs as a mechanism
< 	 * to gracefully reduce the frequency when no tasks show up for longer
< 	 * periods of time.
< 	 *
< 	 * Ideally we would like to set bw_dl as min/guaranteed freq and util +
< 	 * bw_dl as requested freq. However, cpufreq is not yet ready for such
< 	 * an interface. So, we only do the latter for now.
< 	 */
< 	if (type == FREQUENCY_UTIL)
< 		util += cpu_bw_dl(rq);
< 
< 	return min(max, util);
< }
< 
< unsigned long sched_cpu_util(int cpu, unsigned long max)
< {
< 	return effective_cpu_util(cpu, cpu_util_cfs(cpu_rq(cpu)), max,
< 				  ENERGY_UTIL, NULL);
< }
< #endif /* CONFIG_SMP */
< 
7194a3977,3998
> /* Actually do priority change: must hold pi & rq lock. */
> static void __setscheduler(struct rq *rq, struct task_struct *p,
> 			   const struct sched_attr *attr, bool keep_boost)
> {
> 	__setscheduler_params(p, attr);
> 
> 	/*
> 	 * Keep a potential priority boosting if called from
> 	 * sched_setscheduler().
> 	 */
> 	p->prio = normal_prio(p);
> 	if (keep_boost)
> 		p->prio = rt_effective_prio(p, p->prio);
> 
> 	if (dl_prio(p->prio))
> 		p->sched_class = &dl_sched_class;
> 	else if (rt_prio(p->prio))
> 		p->sched_class = &rt_sched_class;
> 	else
> 		p->sched_class = &fair_sched_class;
> }
> 
7215,7216c4019,4022
< 	int oldpolicy = -1, policy = attr->sched_policy;
< 	int retval, oldprio, newprio, queued, running;
---
> 	int newprio = dl_policy(attr->sched_policy) ? MAX_DL_PRIO - 1 :
> 		      MAX_RT_PRIO - 1 - attr->sched_priority;
> 	int retval, oldprio, oldpolicy = -1, queued, running;
> 	int new_effective_prio, policy = attr->sched_policy;
7218d4023
< 	struct callback_head *head;
7238c4043,4044
< 	if (attr->sched_flags & ~(SCHED_FLAG_ALL | SCHED_FLAG_SUGOV))
---
> 	if (attr->sched_flags &
> 		~(SCHED_FLAG_RESET_ON_FORK | SCHED_FLAG_RECLAIM))
7243c4049
< 	 * 1..MAX_RT_PRIO-1, valid priority for SCHED_NORMAL,
---
> 	 * 1..MAX_USER_RT_PRIO-1, valid priority for SCHED_NORMAL,
7246c4052,4053
< 	if (attr->sched_priority > MAX_RT_PRIO-1)
---
> 	if ((p->mm && attr->sched_priority > MAX_USER_RT_PRIO-1) ||
> 	    (!p->mm && attr->sched_priority > MAX_RT_PRIO-1))
7289c4096
< 		if (task_has_idle_policy(p) && !idle_policy(policy)) {
---
> 		if (idle_policy(p->policy) && !idle_policy(policy)) {
7304,7306d4110
< 		if (attr->sched_flags & SCHED_FLAG_SUGOV)
< 			return -EINVAL;
< 
7312,7321d4115
< 	/* Update task specific "requested" clamps */
< 	if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP) {
< 		retval = uclamp_validate(p, attr);
< 		if (retval)
< 			return retval;
< 	}
< 
< 	if (pi)
< 		cpuset_read_lock();
< 
7336,7337c4130,4131
< 		retval = -EINVAL;
< 		goto unlock;
---
> 		task_rq_unlock(rq, p, &rf);
> 		return -EINVAL;
7351,7352d4144
< 		if (attr->sched_flags & SCHED_FLAG_UTIL_CLAMP)
< 			goto change;
7355,7356c4147,4148
< 		retval = 0;
< 		goto unlock;
---
> 		task_rq_unlock(rq, p, &rf);
> 		return 0;
7369,7370c4161,4162
< 			retval = -EPERM;
< 			goto unlock;
---
> 			task_rq_unlock(rq, p, &rf);
> 			return -EPERM;
7374,7375c4166
< 		if (dl_bandwidth_enabled() && dl_policy(policy) &&
< 				!(attr->sched_flags & SCHED_FLAG_SUGOV)) {
---
> 		if (dl_bandwidth_enabled() && dl_policy(policy)) {
7383c4174
< 			if (!cpumask_subset(span, p->cpus_ptr) ||
---
> 			if (!cpumask_subset(span, &p->cpus_allowed) ||
7385,7386c4176,4177
< 				retval = -EPERM;
< 				goto unlock;
---
> 				task_rq_unlock(rq, p, &rf);
> 				return -EPERM;
7396,7397d4186
< 		if (pi)
< 			cpuset_read_unlock();
7407,7408c4196,4197
< 		retval = -EBUSY;
< 		goto unlock;
---
> 		task_rq_unlock(rq, p, &rf);
> 		return -EBUSY;
7414d4202
< 	newprio = __normal_prio(policy, attr->sched_priority, attr->sched_nice);
7423,7424c4211,4212
< 		newprio = rt_effective_prio(p, newprio);
< 		if (newprio == oldprio)
---
> 		new_effective_prio = rt_effective_prio(p, newprio);
> 		if (new_effective_prio == oldprio)
7436,7441c4224
< 
< 	if (!(attr->sched_flags & SCHED_FLAG_KEEP_PARAMS)) {
< 		__setscheduler_params(p, attr);
< 		__setscheduler_prio(p, newprio);
< 	}
< 	__setscheduler_uclamp(p, attr);
---
> 	__setscheduler(rq, p, attr, pi);
7454c4237
< 		set_next_task(rq, p);
---
> 		set_curr_task(rq, p);
7460d4242
< 	head = splice_balance_callbacks(rq);
7463,7464c4245
< 	if (pi) {
< 		cpuset_read_unlock();
---
> 	if (pi)
7466d4246
< 	}
7469c4249
< 	balance_callbacks(rq, head);
---
> 	balance_callback(rq);
7473,7478d4252
< 
< unlock:
< 	task_rq_unlock(rq, p, &rf);
< 	if (pi)
< 		cpuset_read_unlock();
< 	return retval;
7505,7506d4278
<  * Use sched_set_fifo(), read its comment.
<  *
7515a4288
> EXPORT_SYMBOL_GPL(sched_setscheduler);
7521,7526c4294
< 
< int sched_setattr_nocheck(struct task_struct *p, const struct sched_attr *attr)
< {
< 	return __sched_setscheduler(p, attr, false, true);
< }
< EXPORT_SYMBOL_GPL(sched_setattr_nocheck);
---
> EXPORT_SYMBOL_GPL(sched_setattr);
7546,7590c4314
< 
< /*
<  * SCHED_FIFO is a broken scheduler model; that is, it is fundamentally
<  * incapable of resource management, which is the one thing an OS really should
<  * be doing.
<  *
<  * This is of course the reason it is limited to privileged users only.
<  *
<  * Worse still; it is fundamentally impossible to compose static priority
<  * workloads. You cannot take two correctly working static prio workloads
<  * and smash them together and still expect them to work.
<  *
<  * For this reason 'all' FIFO tasks the kernel creates are basically at:
<  *
<  *   MAX_RT_PRIO / 2
<  *
<  * The administrator _MUST_ configure the system, the kernel simply doesn't
<  * know enough information to make a sensible choice.
<  */
< void sched_set_fifo(struct task_struct *p)
< {
< 	struct sched_param sp = { .sched_priority = MAX_RT_PRIO / 2 };
< 	WARN_ON_ONCE(sched_setscheduler_nocheck(p, SCHED_FIFO, &sp) != 0);
< }
< EXPORT_SYMBOL_GPL(sched_set_fifo);
< 
< /*
<  * For when you don't much care about FIFO, but want to be above SCHED_NORMAL.
<  */
< void sched_set_fifo_low(struct task_struct *p)
< {
< 	struct sched_param sp = { .sched_priority = 1 };
< 	WARN_ON_ONCE(sched_setscheduler_nocheck(p, SCHED_FIFO, &sp) != 0);
< }
< EXPORT_SYMBOL_GPL(sched_set_fifo_low);
< 
< void sched_set_normal(struct task_struct *p, int nice)
< {
< 	struct sched_attr attr = {
< 		.sched_policy = SCHED_NORMAL,
< 		.sched_nice = nice,
< 	};
< 	WARN_ON_ONCE(sched_setattr_nocheck(p, &attr) != 0);
< }
< EXPORT_SYMBOL_GPL(sched_set_normal);
---
> EXPORT_SYMBOL_GPL(sched_setscheduler_nocheck);
7607,7611c4331
< 	if (likely(p))
< 		get_task_struct(p);
< 	rcu_read_unlock();
< 
< 	if (likely(p)) {
---
> 	if (p != NULL)
7613,7614c4333
< 		put_task_struct(p);
< 	}
---
> 	rcu_read_unlock();
7626a4346,4348
> 	if (!access_ok(VERIFY_WRITE, uattr, SCHED_ATTR_SIZE_VER0))
> 		return -EFAULT;
> 
7633a4356,4359
> 	/* Bail out on silly large: */
> 	if (size > PAGE_SIZE)
> 		goto err_size;
> 
7637c4363,4364
< 	if (size < SCHED_ATTR_SIZE_VER0 || size > PAGE_SIZE)
---
> 
> 	if (size < SCHED_ATTR_SIZE_VER0)
7640,7644c4367,4388
< 	ret = copy_struct_from_user(attr, sizeof(*attr), uattr, size);
< 	if (ret) {
< 		if (ret == -E2BIG)
< 			goto err_size;
< 		return ret;
---
> 	/*
> 	 * If we're handed a bigger struct than we know of,
> 	 * ensure all the unknown bits are 0 - i.e. new
> 	 * user-space does not rely on any kernel feature
> 	 * extensions we dont know about yet.
> 	 */
> 	if (size > sizeof(*attr)) {
> 		unsigned char __user *addr;
> 		unsigned char __user *end;
> 		unsigned char val;
> 
> 		addr = (void __user *)uattr + sizeof(*attr);
> 		end  = (void __user *)uattr + size;
> 
> 		for (; addr < end; addr++) {
> 			ret = get_user(val, addr);
> 			if (ret)
> 				return ret;
> 			if (val)
> 				goto err_size;
> 		}
> 		size = sizeof(*attr);
7647,7649c4391,4393
< 	if ((attr->sched_flags & SCHED_FLAG_UTIL_CLAMP) &&
< 	    size < SCHED_ATTR_SIZE_VER1)
< 		return -EINVAL;
---
> 	ret = copy_from_user(attr, uattr, size);
> 	if (ret)
> 		return -EFAULT;
7664,7673d4407
< static void get_params(struct task_struct *p, struct sched_attr *attr)
< {
< 	if (task_has_dl_policy(p))
< 		__getparam_dl(p, attr);
< 	else if (task_has_rt_policy(p))
< 		attr->sched_priority = p->rt_priority;
< 	else
< 		attr->sched_nice = task_nice(p);
< }
< 
7724,7725d4457
< 	if (attr.sched_flags & SCHED_FLAG_KEEP_POLICY)
< 		attr.sched_policy = SETPARAM_POLICY;
7730,7736c4462
< 	if (likely(p))
< 		get_task_struct(p);
< 	rcu_read_unlock();
< 
< 	if (likely(p)) {
< 		if (attr.sched_flags & SCHED_FLAG_KEEP_PARAMS)
< 			get_params(p, &attr);
---
> 	if (p != NULL)
7738,7739c4464
< 		put_task_struct(p);
< 	}
---
> 	rcu_read_unlock();
7815,7826c4540,4542
< /*
<  * Copy the kernel size attribute structure (which might be larger
<  * than what user-space knows about) to user-space.
<  *
<  * Note that all cases are valid: user-space buffer can be larger or
<  * smaller than the kernel-space buffer. The usual case is that both
<  * have the same size.
<  */
< static int
< sched_attr_copy_to_user(struct sched_attr __user *uattr,
< 			struct sched_attr *kattr,
< 			unsigned int usize)
---
> static int sched_read_attr(struct sched_attr __user *uattr,
> 			   struct sched_attr *attr,
> 			   unsigned int usize)
7828c4544
< 	unsigned int ksize = sizeof(*kattr);
---
> 	int ret;
7830c4546
< 	if (!access_ok(uattr, usize))
---
> 	if (!access_ok(VERIFY_WRITE, uattr, usize))
7834,7844c4550,4552
< 	 * sched_getattr() ABI forwards and backwards compatibility:
< 	 *
< 	 * If usize == ksize then we just copy everything to user-space and all is good.
< 	 *
< 	 * If usize < ksize then we only copy as much as user-space has space for,
< 	 * this keeps ABI compatibility as well. We skip the rest.
< 	 *
< 	 * If usize > ksize then user-space is using a newer version of the ABI,
< 	 * which part the kernel doesn't know about. Just ignore it - tooling can
< 	 * detect the kernel's knowledge of attributes from the attr->size value
< 	 * which is set to ksize in this case.
---
> 	 * If we're handed a smaller struct than we know of,
> 	 * ensure all the unknown bits are 0 - i.e. old
> 	 * user-space does not get uncomplete information.
7846c4554,4564
< 	kattr->size = min(usize, ksize);
---
> 	if (usize < sizeof(*attr)) {
> 		unsigned char *addr;
> 		unsigned char *end;
> 
> 		addr = (void *)attr + usize;
> 		end  = (void *)attr + sizeof(*attr);
> 
> 		for (; addr < end; addr++) {
> 			if (*addr)
> 				return -EFBIG;
> 		}
7848c4566,4570
< 	if (copy_to_user(uattr, kattr, kattr->size))
---
> 		attr->size = usize;
> 	}
> 
> 	ret = copy_to_user(uattr, attr, attr->size);
> 	if (ret)
7858c4580
<  * @usize: sizeof(attr) for fwd/bwd comp.
---
>  * @size: sizeof(attr) for fwd/bwd comp.
7862c4584
< 		unsigned int, usize, unsigned int, flags)
---
> 		unsigned int, size, unsigned int, flags)
7864c4586,4588
< 	struct sched_attr kattr = { };
---
> 	struct sched_attr attr = {
> 		.size = sizeof(struct sched_attr),
> 	};
7868,7869c4592,4593
< 	if (!uattr || pid < 0 || usize > PAGE_SIZE ||
< 	    usize < SCHED_ATTR_SIZE_VER0 || flags)
---
> 	if (!uattr || pid < 0 || size > PAGE_SIZE ||
> 	    size < SCHED_ATTR_SIZE_VER0 || flags)
7882c4606
< 	kattr.sched_policy = p->policy;
---
> 	attr.sched_policy = p->policy;
7884,7896c4608,4614
< 		kattr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
< 	get_params(p, &kattr);
< 	kattr.sched_flags &= SCHED_FLAG_ALL;
< 
< #ifdef CONFIG_UCLAMP_TASK
< 	/*
< 	 * This could race with another potential updater, but this is fine
< 	 * because it'll correctly read the old or the new value. We don't need
< 	 * to guarantee who wins the race as long as it doesn't return garbage.
< 	 */
< 	kattr.sched_util_min = p->uclamp_req[UCLAMP_MIN].value;
< 	kattr.sched_util_max = p->uclamp_req[UCLAMP_MAX].value;
< #endif
---
> 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
> 	if (task_has_dl_policy(p))
> 		__getparam_dl(p, &attr);
> 	else if (task_has_rt_policy(p))
> 		attr.sched_priority = p->rt_priority;
> 	else
> 		attr.sched_nice = task_nice(p);
7900,7903c4618
< 	return sched_attr_copy_to_user(uattr, &kattr, usize);
< 
< out_unlock:
< 	rcu_read_unlock();
---
> 	retval = sched_read_attr(uattr, &attr, size);
7905,7917d4619
< }
< 
< #ifdef CONFIG_SMP
< int dl_task_check_affinity(struct task_struct *p, const struct cpumask *mask)
< {
< 	int ret = 0;
< 
< 	/*
< 	 * If the task isn't a deadline task or admission control is
< 	 * disabled then we don't care about affinity changes.
< 	 */
< 	if (!task_has_dl_policy(p) || !dl_bandwidth_enabled())
< 		return 0;
7919,7927c4621
< 	/*
< 	 * Since bandwidth control happens on root_domain basis,
< 	 * if admission test is enabled, we only admit -deadline
< 	 * tasks allowed to run on all the CPUs in the task's
< 	 * root_domain.
< 	 */
< 	rcu_read_lock();
< 	if (!cpumask_subset(task_rq(p)->rd->span, mask))
< 		ret = -EBUSY;
---
> out_unlock:
7929,7971d4622
< 	return ret;
< }
< #endif
< 
< static int
< __sched_setaffinity(struct task_struct *p, const struct cpumask *mask)
< {
< 	int retval;
< 	cpumask_var_t cpus_allowed, new_mask;
< 
< 	if (!alloc_cpumask_var(&cpus_allowed, GFP_KERNEL))
< 		return -ENOMEM;
< 
< 	if (!alloc_cpumask_var(&new_mask, GFP_KERNEL)) {
< 		retval = -ENOMEM;
< 		goto out_free_cpus_allowed;
< 	}
< 
< 	cpuset_cpus_allowed(p, cpus_allowed);
< 	cpumask_and(new_mask, mask, cpus_allowed);
< 
< 	retval = dl_task_check_affinity(p, new_mask);
< 	if (retval)
< 		goto out_free_new_mask;
< again:
< 	retval = __set_cpus_allowed_ptr(p, new_mask, SCA_CHECK | SCA_USER);
< 	if (retval)
< 		goto out_free_new_mask;
< 
< 	cpuset_cpus_allowed(p, cpus_allowed);
< 	if (!cpumask_subset(new_mask, cpus_allowed)) {
< 		/*
< 		 * We must have raced with a concurrent cpuset update.
< 		 * Just reset the cpumask to the cpuset's cpus_allowed.
< 		 */
< 		cpumask_copy(new_mask, cpus_allowed);
< 		goto again;
< 	}
< 
< out_free_new_mask:
< 	free_cpumask_var(new_mask);
< out_free_cpus_allowed:
< 	free_cpumask_var(cpus_allowed);
7976a4628
> 	cpumask_var_t cpus_allowed, new_mask;
7996c4648,4656
< 
---
> 	if (!alloc_cpumask_var(&cpus_allowed, GFP_KERNEL)) {
> 		retval = -ENOMEM;
> 		goto out_put_task;
> 	}
> 	if (!alloc_cpumask_var(&new_mask, GFP_KERNEL)) {
> 		retval = -ENOMEM;
> 		goto out_free_cpus_allowed;
> 	}
> 	retval = -EPERM;
8001,8002c4661
< 			retval = -EPERM;
< 			goto out_put_task;
---
> 			goto out_free_new_mask;
8009c4668,4692
< 		goto out_put_task;
---
> 		goto out_free_new_mask;
> 
> 
> 	cpuset_cpus_allowed(p, cpus_allowed);
> 	cpumask_and(new_mask, in_mask, cpus_allowed);
> 
> 	/*
> 	 * Since bandwidth control happens on root_domain basis,
> 	 * if admission test is enabled, we only admit -deadline
> 	 * tasks allowed to run on all the CPUs in the task's
> 	 * root_domain.
> 	 */
> #ifdef CONFIG_SMP
> 	if (task_has_dl_policy(p) && dl_bandwidth_enabled()) {
> 		rcu_read_lock();
> 		if (!cpumask_subset(task_rq(p)->rd->span, new_mask)) {
> 			retval = -EBUSY;
> 			rcu_read_unlock();
> 			goto out_free_new_mask;
> 		}
> 		rcu_read_unlock();
> 	}
> #endif
> again:
> 	retval = __set_cpus_allowed_ptr(p, new_mask, true);
8011c4694,4709
< 	retval = __sched_setaffinity(p, in_mask);
---
> 	if (!retval) {
> 		cpuset_cpus_allowed(p, cpus_allowed);
> 		if (!cpumask_subset(new_mask, cpus_allowed)) {
> 			/*
> 			 * We must have raced with a concurrent cpuset
> 			 * update. Just reset the cpus_allowed to the
> 			 * cpuset's cpus_allowed
> 			 */
> 			cpumask_copy(new_mask, cpus_allowed);
> 			goto again;
> 		}
> 	}
> out_free_new_mask:
> 	free_cpumask_var(new_mask);
> out_free_cpus_allowed:
> 	free_cpumask_var(cpus_allowed);
8070c4768
< 	cpumask_and(mask, &p->cpus_mask, cpu_active_mask);
---
> 	cpumask_and(mask, &p->cpus_allowed, cpu_active_mask);
8104c4802
< 		unsigned int retlen = min(len, cpumask_size());
---
> 		size_t retlen = min_t(size_t, len, cpumask_size());
8116c4814,4822
< static void do_sched_yield(void)
---
> /**
>  * sys_sched_yield - yield the current processor to other threads.
>  *
>  * This function yields the current CPU to other tasks. If there are no
>  * other threads running on this CPU then this function will return.
>  *
>  * Return: 0.
>  */
> SYSCALL_DEFINE0(sched_yield)
8121c4827,4829
< 	rq = this_rq_lock_irq(&rf);
---
> 	local_irq_disable();
> 	rq = this_rq();
> 	rq_lock(rq, &rf);
8125a4834,4837
> 	/*
> 	 * Since we are going to call schedule() anyway, there's
> 	 * no need to preempt or enable interrupts:
> 	 */
8127c4839
< 	rq_unlock_irq(rq, &rf);
---
> 	rq_unlock(rq, &rf);
8131d4842
< }
8133,8143d4843
< /**
<  * sys_sched_yield - yield the current processor to other threads.
<  *
<  * This function yields the current CPU to other tasks. If there are no
<  * other threads running on this CPU then this function will return.
<  *
<  * Return: 0.
<  */
< SYSCALL_DEFINE0(sched_yield)
< {
< 	do_sched_yield();
8147,8148c4847,4848
< #if !defined(CONFIG_PREEMPTION) || defined(CONFIG_PREEMPT_DYNAMIC)
< int __sched __cond_resched(void)
---
> #ifndef CONFIG_PREEMPT
> int __sched _cond_resched(void)
8154,8165d4853
< 	/*
< 	 * In preemptible kernels, ->rcu_read_lock_nesting tells the tick
< 	 * whether the current CPU is in an RCU read-side critical section,
< 	 * so the tick can report quiescent states even for CPUs looping
< 	 * in kernel context.  In contrast, in non-preemptible kernels,
< 	 * RCU readers leave no in-memory hints, which means that CPU-bound
< 	 * processes executing in kernel context might never report an
< 	 * RCU quiescent state.  Therefore, the following code causes
< 	 * cond_resched() to report a quiescent state, but only when RCU
< 	 * is in urgent need of one.
< 	 */
< #ifndef CONFIG_PREEMPT_RCU
8167d4854
< #endif
8170,8178c4857
< EXPORT_SYMBOL(__cond_resched);
< #endif
< 
< #ifdef CONFIG_PREEMPT_DYNAMIC
< DEFINE_STATIC_CALL_RET0(cond_resched, __cond_resched);
< EXPORT_STATIC_CALL_TRAMP(cond_resched);
< 
< DEFINE_STATIC_CALL_RET0(might_resched, __cond_resched);
< EXPORT_STATIC_CALL_TRAMP(might_resched);
---
> EXPORT_SYMBOL(_cond_resched);
8185c4864
<  * This works OK both with and without CONFIG_PREEMPTION. We do strange low-level
---
>  * This works OK both with and without CONFIG_PREEMPT. We do strange low-level
8209,8229c4888
< int __cond_resched_rwlock_read(rwlock_t *lock)
< {
< 	int resched = should_resched(PREEMPT_LOCK_OFFSET);
< 	int ret = 0;
< 
< 	lockdep_assert_held_read(lock);
< 
< 	if (rwlock_needbreak(lock) || resched) {
< 		read_unlock(lock);
< 		if (resched)
< 			preempt_schedule_common();
< 		else
< 			cpu_relax();
< 		ret = 1;
< 		read_lock(lock);
< 	}
< 	return ret;
< }
< EXPORT_SYMBOL(__cond_resched_rwlock_read);
< 
< int __cond_resched_rwlock_write(rwlock_t *lock)
---
> int __sched __cond_resched_softirq(void)
8231,8234c4890
< 	int resched = should_resched(PREEMPT_LOCK_OFFSET);
< 	int ret = 0;
< 
< 	lockdep_assert_held_write(lock);
---
> 	BUG_ON(!in_softirq());
8236,8243c4892,4896
< 	if (rwlock_needbreak(lock) || resched) {
< 		write_unlock(lock);
< 		if (resched)
< 			preempt_schedule_common();
< 		else
< 			cpu_relax();
< 		ret = 1;
< 		write_lock(lock);
---
> 	if (should_resched(SOFTIRQ_DISABLE_OFFSET)) {
> 		local_bh_enable();
> 		preempt_schedule_common();
> 		local_bh_disable();
> 		return 1;
8245c4898
< 	return ret;
---
> 	return 0;
8247c4900
< EXPORT_SYMBOL(__cond_resched_rwlock_write);
---
> EXPORT_SYMBOL(__cond_resched_softirq);
8256c4909
<  * it, it's already broken.
---
>  * it, its already broken.
8274c4927
< 	do_sched_yield();
---
> 	sys_sched_yield();
8326c4979
< 	if (task_running(p_rq, p) || !task_is_running(p))
---
> 	if (task_running(p_rq, p) || p->state)
8329c4982
< 	yielded = curr->sched_class->yield_to_task(rq, p);
---
> 	yielded = curr->sched_class->yield_to_task(rq, p, preempt);
8384c5037
< void __sched io_schedule(void)
---
> void io_schedule(void)
8409c5062
< 		ret = MAX_RT_PRIO-1;
---
> 		ret = MAX_USER_RT_PRIO-1;
8495c5148
< 		struct __kernel_timespec __user *, interval)
---
> 		struct timespec __user *, interval)
8506,8508c5159,5162
< #ifdef CONFIG_COMPAT_32BIT_TIME
< SYSCALL_DEFINE2(sched_rr_get_interval_time32, pid_t, pid,
< 		struct old_timespec32 __user *, interval)
---
> #ifdef CONFIG_COMPAT
> COMPAT_SYSCALL_DEFINE2(sched_rr_get_interval,
> 		       compat_pid_t, pid,
> 		       struct compat_timespec __user *, interval)
8514c5168
< 		retval = put_old_timespec32(&t, interval);
---
> 		retval = compat_put_timespec64(&t, interval);
8527c5181
< 	pr_info("task:%-15.15s state:%c", p->comm, task_state_to_char(p));
---
> 	printk(KERN_INFO "%-15.15s %c", p->comm, task_state_to_char(p));
8529,8530c5183,5184
< 	if (task_is_running(p))
< 		pr_cont("  running task    ");
---
> 	if (p->state == TASK_RUNNING)
> 		printk(KERN_CONT "  running task    ");
8539,8540c5193,5194
< 	pr_cont(" stack:%5lu pid:%5d ppid:%6d flags:0x%08lx\n",
< 		free, task_pid_nr(p), ppid,
---
> 	printk(KERN_CONT "%5lu %5d %6d 0x%08lx\n", free,
> 		task_pid_nr(p), ppid,
8544,8545c5198
< 	print_stop_info(KERN_INFO, p);
< 	show_stack(p, NULL, KERN_INFO);
---
> 	show_stack(p, NULL);
8553,8554d5205
< 	unsigned int state = READ_ONCE(p->__state);
< 
8560c5211
< 	if (!(state & state_filter))
---
> 	if (!(p->state & state_filter))
8567c5218
< 	if (state_filter == TASK_UNINTERRUPTIBLE && state == TASK_IDLE)
---
> 	if (state_filter == TASK_UNINTERRUPTIBLE && p->state == TASK_IDLE)
8574c5225
< void show_state_filter(unsigned int state_filter)
---
> void show_state_filter(unsigned long state_filter)
8577a5229,5235
> #if BITS_PER_LONG == 32
> 	printk(KERN_INFO
> 		"  task                PC stack   pid father\n");
> #else
> 	printk(KERN_INFO
> 		"  task                        PC stack   pid father\n");
> #endif
8613c5271
< void __init init_idle(struct task_struct *idle, int cpu)
---
> void init_idle(struct task_struct *idle, int cpu)
8618,8627d5275
< 	__sched_fork(0, idle);
< 
< 	/*
< 	 * The idle task doesn't need the kthread struct to function, but it
< 	 * is dressed up as a per-CPU kthread and thus needs to play the part
< 	 * if we want to avoid special-casing it in code that deals with per-CPU
< 	 * kthreads.
< 	 */
< 	set_kthread_struct(idle);
< 
8629c5277
< 	raw_spin_rq_lock(rq);
---
> 	raw_spin_lock(&rq->lock);
8631c5279,5280
< 	idle->__state = TASK_RUNNING;
---
> 	__sched_fork(0, idle);
> 	idle->state = TASK_RUNNING;
8633,8638c5282
< 	/*
< 	 * PF_KTHREAD should already be set at this point; regardless, make it
< 	 * look like a proper per-CPU kthread.
< 	 */
< 	idle->flags |= PF_IDLE | PF_KTHREAD | PF_NO_SETAFFINITY;
< 	kthread_set_per_cpu(idle, cpu);
---
> 	idle->flags |= PF_IDLE;
8640d5283
< 	scs_task_reset(idle);
8645c5288
< 	 * It's possible that init_idle() gets called multiple times on a task,
---
> 	 * Its possible that init_idle() gets called multiple times on a task,
8650c5293
< 	set_cpus_allowed_common(idle, cpumask_of(cpu), 0);
---
> 	set_cpus_allowed_common(idle, cpumask_of(cpu));
8666,8667c5309
< 	rq->idle = idle;
< 	rcu_assign_pointer(rq->curr, idle);
---
> 	rq->curr = rq->idle = idle;
8672c5314
< 	raw_spin_rq_unlock(rq);
---
> 	raw_spin_unlock(&rq->lock);
8716c5358
< 	 * before cpus_mask may be changed.
---
> 	 * before cpus_allowed may be changed.
8743c5385
< 	if (!cpumask_test_cpu(target_cpu, p->cpus_ptr))
---
> 	if (!cpumask_test_cpu(target_cpu, &p->cpus_allowed))
8776c5418
< 		set_next_task(rq, p);
---
> 		set_curr_task(rq, p);
8791d5432
< 	BUG_ON(current != this_rq()->idle);
8797,8824c5438
< 
< 	scs_task_reset(current);
< 	/* finish_cpu(), as ran on the BP, will clean up the active_mm state */
< }
< 
< static int __balance_push_cpu_stop(void *arg)
< {
< 	struct task_struct *p = arg;
< 	struct rq *rq = this_rq();
< 	struct rq_flags rf;
< 	int cpu;
< 
< 	raw_spin_lock_irq(&p->pi_lock);
< 	rq_lock(rq, &rf);
< 
< 	update_rq_clock(rq);
< 
< 	if (task_rq(p) == rq && task_on_rq_queued(p)) {
< 		cpu = select_fallback_rq(rq->cpu, p);
< 		rq = __migrate_task(rq, &rf, p, cpu);
< 	}
< 
< 	rq_unlock(rq, &rf);
< 	raw_spin_unlock_irq(&p->pi_lock);
< 
< 	put_task_struct(p);
< 
< 	return 0;
---
> 	mmdrop(mm);
8827,8828d5440
< static DEFINE_PER_CPU(struct cpu_stop_work, push_work);
< 
8830c5442,5446
<  * Ensure we only run per-cpu kthreads once the CPU goes !active.
---
>  * Since this CPU is going 'away' for a while, fold any nr_active delta
>  * we might have. Assumes we're called after migrate_tasks() so that the
>  * nr_active count is stable. We need to take the teardown thread which
>  * is calling this into account, so we hand in adjust = 1 to the load
>  * calculation.
8832,8833c5448
<  * This is enabled below SCHED_AP_ACTIVE; when !cpu_active(), but only
<  * effective when the hotplug motion is down.
---
>  * Also see the comment "Global load-average calculations".
8835c5450
< static void balance_push(struct rq *rq)
---
> static void calc_load_migrate(struct rq *rq)
8837,8839c5452,5455
< 	struct task_struct *push_task = rq->curr;
< 
< 	lockdep_assert_rq_held(rq);
---
> 	long delta = calc_load_fold_active(rq, 1);
> 	if (delta)
> 		atomic_long_add(delta, &calc_load_tasks);
> }
8841,8844c5457,5459
< 	/*
< 	 * Ensure the thing is persistent until balance_push_set(.on = false);
< 	 */
< 	rq->balance_callback = &balance_push_callback;
---
> static void put_prev_task_fake(struct rq *rq, struct task_struct *prev)
> {
> }
8846,8851c5461,5463
< 	/*
< 	 * Only active while going offline and when invoked on the outgoing
< 	 * CPU.
< 	 */
< 	if (!cpu_dying(rq->cpu) || rq != this_rq())
< 		return;
---
> static const struct sched_class fake_sched_class = {
> 	.put_prev_task = put_prev_task_fake,
> };
8852a5465
> static struct task_struct fake_task = {
8854,8855c5467
< 	 * Both the cpu-hotplug and stop task are in this case and are
< 	 * required to complete the hotplug process.
---
> 	 * Avoid pull_{rt,dl}_task()
8857,8858c5469,5471
< 	if (kthread_is_per_cpu(push_task) ||
< 	    is_migration_disabled(push_task)) {
---
> 	.prio = MAX_PRIO + 1,
> 	.sched_class = &fake_sched_class,
> };
8860,8878c5473,5486
< 		/*
< 		 * If this is the idle task on the outgoing CPU try to wake
< 		 * up the hotplug control thread which might wait for the
< 		 * last task to vanish. The rcuwait_active() check is
< 		 * accurate here because the waiter is pinned on this CPU
< 		 * and can't obviously be running in parallel.
< 		 *
< 		 * On RT kernels this also has to check whether there are
< 		 * pinned and scheduled out tasks on the runqueue. They
< 		 * need to leave the migrate disabled section first.
< 		 */
< 		if (!rq->nr_running && !rq_has_pinned_tasks(rq) &&
< 		    rcuwait_active(&rq->hotplug_wait)) {
< 			raw_spin_rq_unlock(rq);
< 			rcuwait_wake_up(&rq->hotplug_wait);
< 			raw_spin_rq_lock(rq);
< 		}
< 		return;
< 	}
---
> /*
>  * Migrate all tasks from the rq, sleeping tasks will be migrated by
>  * try_to_wake_up()->select_task_rq().
>  *
>  * Called with rq->lock held even though we'er in stop_machine() and
>  * there's no concurrency possible, we hold the required locks anyway
>  * because of lock validation efforts.
>  */
> static void migrate_tasks(struct rq *dead_rq, struct rq_flags *rf)
> {
> 	struct rq *rq = dead_rq;
> 	struct task_struct *next, *stop = rq->stop;
> 	struct rq_flags orf = *rf;
> 	int dest_cpu;
8880d5487
< 	get_task_struct(push_task);
8882,8883c5489,5495
< 	 * Temporarily drop rq->lock such that we can wake-up the stop task.
< 	 * Both preemption and IRQs are still disabled.
---
> 	 * Fudge the rq selection such that the below task selection loop
> 	 * doesn't get stuck on the currently eligible stop task.
> 	 *
> 	 * We're currently inside stop_machine() and the rq is either stuck
> 	 * in the stop_machine_cpu_stop() loop, or we're executing this code,
> 	 * either way we should never end up calling schedule() until we're
> 	 * done here.
8885,8887c5497,5498
< 	raw_spin_rq_unlock(rq);
< 	stop_one_cpu_nowait(rq->cpu, __balance_push_cpu_stop, push_task,
< 			    this_cpu_ptr(&push_work));
---
> 	rq->stop = NULL;
> 
8889,8891c5500,5502
< 	 * At this point need_resched() is true and we'll take the loop in
< 	 * schedule(). The next pick is obviously going to be the stop task
< 	 * which kthread_is_per_cpu() and will push this task away.
---
> 	 * put_prev_task() and pick_next_task() sched
> 	 * class method both need to have an up-to-date
> 	 * value of rq->clock[_task]
8893,8909c5504
< 	raw_spin_rq_lock(rq);
< }
< 
< static void balance_push_set(int cpu, bool on)
< {
< 	struct rq *rq = cpu_rq(cpu);
< 	struct rq_flags rf;
< 
< 	rq_lock_irqsave(rq, &rf);
< 	if (on) {
< 		WARN_ON_ONCE(rq->balance_callback);
< 		rq->balance_callback = &balance_push_callback;
< 	} else if (rq->balance_callback == &balance_push_callback) {
< 		rq->balance_callback = NULL;
< 	}
< 	rq_unlock_irqrestore(rq, &rf);
< }
---
> 	update_rq_clock(rq);
8911,8919c5506,5512
< /*
<  * Invoked from a CPUs hotplug control thread after the CPU has been marked
<  * inactive. All tasks which are not per CPU kernel threads are either
<  * pushed off this CPU now via balance_push() or placed on a different CPU
<  * during wakeup. Wait until the CPU is quiescent.
<  */
< static void balance_hotplug_wait(void)
< {
< 	struct rq *rq = this_rq();
---
> 	for (;;) {
> 		/*
> 		 * There's this thread running, bail when that's the only
> 		 * remaining thread:
> 		 */
> 		if (rq->nr_running == 1)
> 			break;
8921,8924c5514,5519
< 	rcuwait_wait_event(&rq->hotplug_wait,
< 			   rq->nr_running == 1 && !rq_has_pinned_tasks(rq),
< 			   TASK_UNINTERRUPTIBLE);
< }
---
> 		/*
> 		 * pick_next_task() assumes pinned rq->lock:
> 		 */
> 		next = pick_next_task(rq, &fake_task, rf);
> 		BUG_ON(!next);
> 		put_prev_task(rq, next);
8926c5521,5532
< #else
---
> 		/*
> 		 * Rules for changing task_struct::cpus_allowed are holding
> 		 * both pi_lock and rq->lock, such that holding either
> 		 * stabilizes the mask.
> 		 *
> 		 * Drop rq->lock is not quite as disastrous as it usually is
> 		 * because !cpu_active at this point, which means load-balance
> 		 * will not interfere. Also, stop-machine.
> 		 */
> 		rq_unlock(rq, rf);
> 		raw_spin_lock(&next->pi_lock);
> 		rq_relock(rq, rf);
8928,8930c5534,5542
< static inline void balance_push(struct rq *rq)
< {
< }
---
> 		/*
> 		 * Since we're inside stop-machine, _nothing_ should have
> 		 * changed the task, WARN if weird stuff happened, because in
> 		 * that case the above rq->lock drop is a fail too.
> 		 */
> 		if (WARN_ON(task_rq(next) != rq || !task_on_rq_queued(next))) {
> 			raw_spin_unlock(&next->pi_lock);
> 			continue;
> 		}
8932,8934c5544,5554
< static inline void balance_push_set(int cpu, bool on)
< {
< }
---
> 		/* Find suitable destination for @next, with force if needed. */
> 		dest_cpu = select_fallback_rq(dead_rq->cpu, next);
> 		rq = __migrate_task(rq, rf, next, dest_cpu);
> 		if (rq != dead_rq) {
> 			rq_unlock(rq, rf);
> 			rq = dead_rq;
> 			*rf = orf;
> 			rq_relock(rq, rf);
> 		}
> 		raw_spin_unlock(&next->pi_lock);
> 	}
8936,8937c5556
< static inline void balance_hotplug_wait(void)
< {
---
> 	rq->stop = stop;
8939d5557
< 
8971a5590,5596
> static void set_cpu_rq_start_time(unsigned int cpu)
> {
> 	struct rq *rq = cpu_rq(cpu);
> 
> 	rq->age_stamp = sched_clock_cpu(cpu);
> }
> 
9025,9037d5649
< 	/*
< 	 * Clear the balance_push callback and prepare to schedule
< 	 * regular tasks.
< 	 */
< 	balance_push_set(cpu, false);
< 
< #ifdef CONFIG_SCHED_SMT
< 	/*
< 	 * When going up, increment the number of cores with SMT present.
< 	 */
< 	if (cpumask_weight(cpu_smt_mask(cpu)) == 2)
< 		static_branch_inc_cpuslocked(&sched_smt_present);
< #endif
9060a5673,5674
> 	update_max_interval();
> 
9066,9067d5679
< 	struct rq *rq = cpu_rq(cpu);
< 	struct rq_flags rf;
9070,9075d5681
< 	/*
< 	 * Remove CPU from nohz.idle_cpus_mask to prevent participating in
< 	 * load balancing when not active
< 	 */
< 	nohz_balance_exit_idle(rq);
< 
9077,9085d5682
< 
< 	/*
< 	 * From this point forward, this CPU will refuse to run any task that
< 	 * is not: migrate_disable() or KTHREAD_IS_PER_CPU, and will actively
< 	 * push those tasks away until this gets cleared, see
< 	 * sched_cpu_dying().
< 	 */
< 	balance_push_set(cpu, true);
< 
9087,9092c5684,5686
< 	 * We've cleared cpu_active_mask / set balance_push, wait for all
< 	 * preempt-disabled and RCU users of this state to go away such that
< 	 * all new such users will observe it.
< 	 *
< 	 * Specifically, we rely on ttwu to no longer target this CPU, see
< 	 * ttwu_queue_cond() and is_cpu_allowed().
---
> 	 * We've cleared cpu_active_mask, wait for all preempt-disabled and RCU
> 	 * users of this state to go away such that all new such users will
> 	 * observe it.
9096,9114c5690
< 	synchronize_rcu();
< 
< 	rq_lock_irqsave(rq, &rf);
< 	if (rq->rd) {
< 		update_rq_clock(rq);
< 		BUG_ON(!cpumask_test_cpu(cpu, rq->rd->span));
< 		set_rq_offline(rq);
< 	}
< 	rq_unlock_irqrestore(rq, &rf);
< 
< #ifdef CONFIG_SCHED_SMT
< 	/*
< 	 * When going down, decrement the number of cores with SMT present.
< 	 */
< 	if (cpumask_weight(cpu_smt_mask(cpu)) == 2)
< 		static_branch_dec_cpuslocked(&sched_smt_present);
< 
< 	sched_core_cpu_deactivate(cpu);
< #endif
---
> 	synchronize_rcu_mult(call_rcu, call_rcu_sched);
9121d5696
< 		balance_push_set(cpu, false);
9139c5714
< 	sched_core_cpu_starting(cpu);
---
> 	set_cpu_rq_start_time(cpu);
9141d5715
< 	sched_tick_start(cpu);
9146,9199d5719
< 
< /*
<  * Invoked immediately before the stopper thread is invoked to bring the
<  * CPU down completely. At this point all per CPU kthreads except the
<  * hotplug thread (current) and the stopper thread (inactive) have been
<  * either parked or have been unbound from the outgoing CPU. Ensure that
<  * any of those which might be on the way out are gone.
<  *
<  * If after this point a bound task is being woken on this CPU then the
<  * responsible hotplug callback has failed to do it's job.
<  * sched_cpu_dying() will catch it with the appropriate fireworks.
<  */
< int sched_cpu_wait_empty(unsigned int cpu)
< {
< 	balance_hotplug_wait();
< 	return 0;
< }
< 
< /*
<  * Since this CPU is going 'away' for a while, fold any nr_active delta we
<  * might have. Called from the CPU stopper task after ensuring that the
<  * stopper is the last running task on the CPU, so nr_active count is
<  * stable. We need to take the teardown thread which is calling this into
<  * account, so we hand in adjust = 1 to the load calculation.
<  *
<  * Also see the comment "Global load-average calculations".
<  */
< static void calc_load_migrate(struct rq *rq)
< {
< 	long delta = calc_load_fold_active(rq, 1);
< 
< 	if (delta)
< 		atomic_long_add(delta, &calc_load_tasks);
< }
< 
< static void dump_rq_tasks(struct rq *rq, const char *loglvl)
< {
< 	struct task_struct *g, *p;
< 	int cpu = cpu_of(rq);
< 
< 	lockdep_assert_rq_held(rq);
< 
< 	printk("%sCPU%d enqueued tasks (%u total):\n", loglvl, cpu, rq->nr_running);
< 	for_each_process_thread(g, p) {
< 		if (task_cpu(p) != cpu)
< 			continue;
< 
< 		if (!task_on_rq_queued(p))
< 			continue;
< 
< 		printk("%s\tpid: %d, name: %s\n", loglvl, p->pid, p->comm);
< 	}
< }
< 
9206c5726
< 	sched_tick_stop(cpu);
---
> 	sched_ttwu_pending();
9209,9211c5729,5731
< 	if (rq->nr_running != 1 || rq_has_pinned_tasks(rq)) {
< 		WARN(true, "Dying CPU not properly vacated!");
< 		dump_rq_tasks(rq, KERN_WARNING);
---
> 	if (rq->rd) {
> 		BUG_ON(!cpumask_test_cpu(cpu, rq->rd->span));
> 		set_rq_offline(rq);
9212a5733,5734
> 	migrate_tasks(rq, &rf);
> 	BUG_ON(rq->nr_running != 1);
9216a5739
> 	nohz_balance_exit_idle(cpu);
9218d5740
< 	sched_core_cpu_dying(cpu);
9222a5745,5760
> #ifdef CONFIG_SCHED_SMT
> DEFINE_STATIC_KEY_FALSE(sched_smt_present);
> 
> static void sched_init_smt(void)
> {
> 	/*
> 	 * We've enumerated all CPUs and will assume that if any CPU
> 	 * has SMT siblings, CPU0 will too.
> 	 */
> 	if (cpumask_weight(cpu_smt_mask(0)) > 1)
> 		static_branch_enable(&sched_smt_present);
> }
> #else
> static inline void sched_init_smt(void) { }
> #endif
> 
9239d5776
< 	current->flags &= ~PF_NO_SETAFFINITY;
9244a5782,5783
> 	sched_init_smt();
> 
9250c5789
< 	sched_cpu_starting(smp_processor_id());
---
> 	sched_rq_cpu_starting(smp_processor_id());
9286,9295c5825,5826
< 	unsigned long ptr = 0;
< 	int i;
< 
< 	/* Make sure the linker didn't screw up */
< 	BUG_ON(&idle_sched_class + 1 != &fair_sched_class ||
< 	       &fair_sched_class + 1 != &rt_sched_class ||
< 	       &rt_sched_class + 1   != &dl_sched_class);
< #ifdef CONFIG_SMP
< 	BUG_ON(&dl_sched_class + 1 != &stop_sched_class);
< #endif
---
> 	int i, j;
> 	unsigned long alloc_size = 0, ptr;
9296a5828
> 	sched_clock_init();
9300c5832
< 	ptr += 2 * nr_cpu_ids * sizeof(void **);
---
> 	alloc_size += 2 * nr_cpu_ids * sizeof(void **);
9303c5835
< 	ptr += 2 * nr_cpu_ids * sizeof(void **);
---
> 	alloc_size += 2 * nr_cpu_ids * sizeof(void **);
9305,9306c5837,5838
< 	if (ptr) {
< 		ptr = (unsigned long)kzalloc(ptr, GFP_NOWAIT);
---
> 	if (alloc_size) {
> 		ptr = (unsigned long)kzalloc(alloc_size, GFP_NOWAIT);
9315,9316d5846
< 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
< 		init_cfs_bandwidth(&root_task_group.cfs_bandwidth);
9361c5891
< 		raw_spin_lock_init(&rq->__lock);
---
> 		raw_spin_lock_init(&rq->lock);
9368a5899
> 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
9389a5921
> 		init_cfs_bandwidth(&root_task_group.cfs_bandwidth);
9396a5929,5932
> 
> 		for (j = 0; j < CPU_LOAD_IDX_MAX; j++)
> 			rq->cpu_load[j] = 0;
> 
9401c5937
< 		rq->balance_callback = &balance_push_callback;
---
> 		rq->balance_callback = NULL;
9409,9410d5944
< 		rq->wake_stamp = jiffies;
< 		rq->wake_avg_idle = rq->avg_idle;
9417,9420c5951,5952
< 		rq->last_blocked_load_update_tick = jiffies;
< 		atomic_set(&rq->nohz_flags, 0);
< 
< 		INIT_CSD(&rq->nohz_csd, nohz_csd_func, rq);
---
> 		rq->last_load_update_tick = jiffies;
> 		rq->nohz_flags = 0;
9422,9423c5954,5955
< #ifdef CONFIG_HOTPLUG_CPU
< 		rcuwait_init(&rq->hotplug_wait);
---
> #ifdef CONFIG_NO_HZ_FULL
> 		rq->last_sched_tick = 0;
9426c5958
< 		hrtick_rq_init(rq);
---
> 		init_rq_hrtick(rq);
9428,9437d5959
< 
< #ifdef CONFIG_SCHED_CORE
< 		rq->core = rq;
< 		rq->core_pick = NULL;
< 		rq->core_enabled = 0;
< 		rq->core_tree = RB_ROOT;
< 		rq->core_forceidle = false;
< 
< 		rq->core_cookie = 0UL;
< #endif
9460c5982
< 	balance_push_set(smp_processor_id(), false);
---
> 	set_cpu_rq_start_time(smp_processor_id());
9464,9466c5986
< 	psi_init();
< 
< 	init_uclamp();
---
> 	init_schedstats();
9481d6000
< 	unsigned int state = get_current_state();
9487c6006
< 	WARN_ONCE(state != TASK_RUNNING && current->task_state_change,
---
> 	WARN_ONCE(current->state != TASK_RUNNING && current->task_state_change,
9489c6008,6009
< 			"state=%x set at [<%p>] %pS\n", state,
---
> 			"state=%lx set at [<%p>] %pS\n",
> 			current->state,
9508c6028
< 	     !is_idle_task(current) && !current->non_block_count) ||
---
> 	     !is_idle_task(current)) ||
9524,9525c6044,6045
< 		"in_atomic(): %d, irqs_disabled(): %d, non_block: %d, pid: %d, name: %s\n",
< 			in_atomic(), irqs_disabled(), current->non_block_count,
---
> 		"in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\n",
> 			in_atomic(), irqs_disabled(),
9537c6057,6058
< 		print_ip_sym(KERN_ERR, preempt_disable_ip);
---
> 		print_ip_sym(preempt_disable_ip);
> 		pr_cont("\n");
9543,9603d6063
< 
< void __cant_sleep(const char *file, int line, int preempt_offset)
< {
< 	static unsigned long prev_jiffy;
< 
< 	if (irqs_disabled())
< 		return;
< 
< 	if (!IS_ENABLED(CONFIG_PREEMPT_COUNT))
< 		return;
< 
< 	if (preempt_count() > preempt_offset)
< 		return;
< 
< 	if (time_before(jiffies, prev_jiffy + HZ) && prev_jiffy)
< 		return;
< 	prev_jiffy = jiffies;
< 
< 	printk(KERN_ERR "BUG: assuming atomic context at %s:%d\n", file, line);
< 	printk(KERN_ERR "in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\n",
< 			in_atomic(), irqs_disabled(),
< 			current->pid, current->comm);
< 
< 	debug_show_held_locks(current);
< 	dump_stack();
< 	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
< }
< EXPORT_SYMBOL_GPL(__cant_sleep);
< 
< #ifdef CONFIG_SMP
< void __cant_migrate(const char *file, int line)
< {
< 	static unsigned long prev_jiffy;
< 
< 	if (irqs_disabled())
< 		return;
< 
< 	if (is_migration_disabled(current))
< 		return;
< 
< 	if (!IS_ENABLED(CONFIG_PREEMPT_COUNT))
< 		return;
< 
< 	if (preempt_count() > 0)
< 		return;
< 
< 	if (time_before(jiffies, prev_jiffy + HZ) && prev_jiffy)
< 		return;
< 	prev_jiffy = jiffies;
< 
< 	pr_err("BUG: assuming non migratable context at %s:%d\n", file, line);
< 	pr_err("in_atomic(): %d, irqs_disabled(): %d, migration_disabled() %u pid: %d, name: %s\n",
< 	       in_atomic(), irqs_disabled(), is_migration_disabled(current),
< 	       current->pid, current->comm);
< 
< 	debug_show_held_locks(current);
< 	dump_stack();
< 	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
< }
< EXPORT_SYMBOL_GPL(__cant_migrate);
< #endif
9672c6132
<  * ia64_set_curr_task - set the current task for a given CPU.
---
>  * set_curr_task - set the current task for a given CPU.
9697,9710d6156
< static inline void alloc_uclamp_sched_group(struct task_group *tg,
< 					    struct task_group *parent)
< {
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	enum uclamp_id clamp_id;
< 
< 	for_each_clamp_id(clamp_id) {
< 		uclamp_se_set(&tg->uclamp_req[clamp_id],
< 			      uclamp_none(clamp_id), false);
< 		tg->uclamp[clamp_id] = parent->uclamp[clamp_id];
< 	}
< #endif
< }
< 
9734,9735d6179
< 	alloc_uclamp_sched_group(tg, parent);
< 
9838,9846c6282,6283
< 	if (running) {
< 		set_next_task(rq, tsk);
< 		/*
< 		 * After changing group, the running task may have joined a
< 		 * throttled one but it's still the running task. Trigger a
< 		 * resched to make sure that task can still run.
< 		 */
< 		resched_curr(rq);
< 	}
---
> 	if (running)
> 		set_curr_task(rq, tsk);
9882,9891d6318
< 
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	/* Propagate the effective uclamp value for the new group */
< 	mutex_lock(&uclamp_mutex);
< 	rcu_read_lock();
< 	cpu_util_update_eff(css);
< 	rcu_read_unlock();
< 	mutex_unlock(&uclamp_mutex);
< #endif
< 
9938a6366,6369
> #else
> 		/* We don't support RT-tasks being in separate groups */
> 		if (task->sched_class != &fair_sched_class)
> 			return -EINVAL;
9941c6372
< 		 * Serialize against wake_up_new_task() such that if it's
---
> 		 * Serialize against wake_up_new_task() such that if its
9950c6381
< 		if (READ_ONCE(task->__state) == TASK_NEW)
---
> 		if (task->state == TASK_NEW)
9969,10145d6399
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< static void cpu_util_update_eff(struct cgroup_subsys_state *css)
< {
< 	struct cgroup_subsys_state *top_css = css;
< 	struct uclamp_se *uc_parent = NULL;
< 	struct uclamp_se *uc_se = NULL;
< 	unsigned int eff[UCLAMP_CNT];
< 	enum uclamp_id clamp_id;
< 	unsigned int clamps;
< 
< 	lockdep_assert_held(&uclamp_mutex);
< 	SCHED_WARN_ON(!rcu_read_lock_held());
< 
< 	css_for_each_descendant_pre(css, top_css) {
< 		uc_parent = css_tg(css)->parent
< 			? css_tg(css)->parent->uclamp : NULL;
< 
< 		for_each_clamp_id(clamp_id) {
< 			/* Assume effective clamps matches requested clamps */
< 			eff[clamp_id] = css_tg(css)->uclamp_req[clamp_id].value;
< 			/* Cap effective clamps with parent's effective clamps */
< 			if (uc_parent &&
< 			    eff[clamp_id] > uc_parent[clamp_id].value) {
< 				eff[clamp_id] = uc_parent[clamp_id].value;
< 			}
< 		}
< 		/* Ensure protection is always capped by limit */
< 		eff[UCLAMP_MIN] = min(eff[UCLAMP_MIN], eff[UCLAMP_MAX]);
< 
< 		/* Propagate most restrictive effective clamps */
< 		clamps = 0x0;
< 		uc_se = css_tg(css)->uclamp;
< 		for_each_clamp_id(clamp_id) {
< 			if (eff[clamp_id] == uc_se[clamp_id].value)
< 				continue;
< 			uc_se[clamp_id].value = eff[clamp_id];
< 			uc_se[clamp_id].bucket_id = uclamp_bucket_id(eff[clamp_id]);
< 			clamps |= (0x1 << clamp_id);
< 		}
< 		if (!clamps) {
< 			css = css_rightmost_descendant(css);
< 			continue;
< 		}
< 
< 		/* Immediately update descendants RUNNABLE tasks */
< 		uclamp_update_active_tasks(css);
< 	}
< }
< 
< /*
<  * Integer 10^N with a given N exponent by casting to integer the literal "1eN"
<  * C expression. Since there is no way to convert a macro argument (N) into a
<  * character constant, use two levels of macros.
<  */
< #define _POW10(exp) ((unsigned int)1e##exp)
< #define POW10(exp) _POW10(exp)
< 
< struct uclamp_request {
< #define UCLAMP_PERCENT_SHIFT	2
< #define UCLAMP_PERCENT_SCALE	(100 * POW10(UCLAMP_PERCENT_SHIFT))
< 	s64 percent;
< 	u64 util;
< 	int ret;
< };
< 
< static inline struct uclamp_request
< capacity_from_percent(char *buf)
< {
< 	struct uclamp_request req = {
< 		.percent = UCLAMP_PERCENT_SCALE,
< 		.util = SCHED_CAPACITY_SCALE,
< 		.ret = 0,
< 	};
< 
< 	buf = strim(buf);
< 	if (strcmp(buf, "max")) {
< 		req.ret = cgroup_parse_float(buf, UCLAMP_PERCENT_SHIFT,
< 					     &req.percent);
< 		if (req.ret)
< 			return req;
< 		if ((u64)req.percent > UCLAMP_PERCENT_SCALE) {
< 			req.ret = -ERANGE;
< 			return req;
< 		}
< 
< 		req.util = req.percent << SCHED_CAPACITY_SHIFT;
< 		req.util = DIV_ROUND_CLOSEST_ULL(req.util, UCLAMP_PERCENT_SCALE);
< 	}
< 
< 	return req;
< }
< 
< static ssize_t cpu_uclamp_write(struct kernfs_open_file *of, char *buf,
< 				size_t nbytes, loff_t off,
< 				enum uclamp_id clamp_id)
< {
< 	struct uclamp_request req;
< 	struct task_group *tg;
< 
< 	req = capacity_from_percent(buf);
< 	if (req.ret)
< 		return req.ret;
< 
< 	static_branch_enable(&sched_uclamp_used);
< 
< 	mutex_lock(&uclamp_mutex);
< 	rcu_read_lock();
< 
< 	tg = css_tg(of_css(of));
< 	if (tg->uclamp_req[clamp_id].value != req.util)
< 		uclamp_se_set(&tg->uclamp_req[clamp_id], req.util, false);
< 
< 	/*
< 	 * Because of not recoverable conversion rounding we keep track of the
< 	 * exact requested value
< 	 */
< 	tg->uclamp_pct[clamp_id] = req.percent;
< 
< 	/* Update effective clamps to track the most restrictive value */
< 	cpu_util_update_eff(of_css(of));
< 
< 	rcu_read_unlock();
< 	mutex_unlock(&uclamp_mutex);
< 
< 	return nbytes;
< }
< 
< static ssize_t cpu_uclamp_min_write(struct kernfs_open_file *of,
< 				    char *buf, size_t nbytes,
< 				    loff_t off)
< {
< 	return cpu_uclamp_write(of, buf, nbytes, off, UCLAMP_MIN);
< }
< 
< static ssize_t cpu_uclamp_max_write(struct kernfs_open_file *of,
< 				    char *buf, size_t nbytes,
< 				    loff_t off)
< {
< 	return cpu_uclamp_write(of, buf, nbytes, off, UCLAMP_MAX);
< }
< 
< static inline void cpu_uclamp_print(struct seq_file *sf,
< 				    enum uclamp_id clamp_id)
< {
< 	struct task_group *tg;
< 	u64 util_clamp;
< 	u64 percent;
< 	u32 rem;
< 
< 	rcu_read_lock();
< 	tg = css_tg(seq_css(sf));
< 	util_clamp = tg->uclamp_req[clamp_id].value;
< 	rcu_read_unlock();
< 
< 	if (util_clamp == SCHED_CAPACITY_SCALE) {
< 		seq_puts(sf, "max\n");
< 		return;
< 	}
< 
< 	percent = tg->uclamp_pct[clamp_id];
< 	percent = div_u64_rem(percent, POW10(UCLAMP_PERCENT_SHIFT), &rem);
< 	seq_printf(sf, "%llu.%0*u\n", percent, UCLAMP_PERCENT_SHIFT, rem);
< }
< 
< static int cpu_uclamp_min_show(struct seq_file *sf, void *v)
< {
< 	cpu_uclamp_print(sf, UCLAMP_MIN);
< 	return 0;
< }
< 
< static int cpu_uclamp_max_show(struct seq_file *sf, void *v)
< {
< 	cpu_uclamp_print(sf, UCLAMP_MAX);
< 	return 0;
< }
< #endif /* CONFIG_UCLAMP_TASK_GROUP */
< 
10150,10151d6403
< 	if (shareval > scale_load_down(ULONG_MAX))
< 		shareval = MAX_SHARES;
10167,10169c6419
< static const u64 min_cfs_quota_period = 1 * NSEC_PER_MSEC; /* 1ms */
< /* More than 203 days if BW_SHIFT equals 20. */
< static const u64 max_cfs_runtime = MAX_BW * NSEC_PER_USEC;
---
> const u64 min_cfs_quota_period = 1 * NSEC_PER_MSEC; /* 1ms */
10173,10174c6423
< static int tg_set_cfs_bandwidth(struct task_group *tg, u64 period, u64 quota,
< 				u64 burst)
---
> static int tg_set_cfs_bandwidth(struct task_group *tg, u64 period, u64 quota)
10191c6440
< 	 * Likewise, bound things on the other side by preventing insane quota
---
> 	 * Likewise, bound things on the otherside by preventing insane quota
10199,10208d6447
< 	 * Bound quota to defend quota against overflow during bandwidth shift.
< 	 */
< 	if (quota != RUNTIME_INF && quota > max_cfs_runtime)
< 		return -EINVAL;
< 
< 	if (quota != RUNTIME_INF && (burst > quota ||
< 				     burst + quota > max_cfs_runtime))
< 		return -EINVAL;
< 
< 	/*
10212c6451
< 	cpus_read_lock();
---
> 	get_online_cpus();
10229d6467
< 	cfs_b->burst = burst;
10256c6494
< 	cpus_read_unlock();
---
> 	put_online_cpus();
10261c6499
< static int tg_set_cfs_quota(struct task_group *tg, long cfs_quota_us)
---
> int tg_set_cfs_quota(struct task_group *tg, long cfs_quota_us)
10263c6501
< 	u64 quota, period, burst;
---
> 	u64 quota, period;
10266d6503
< 	burst = tg->cfs_bandwidth.burst;
10269,10270d6505
< 	else if ((u64)cfs_quota_us <= U64_MAX / NSEC_PER_USEC)
< 		quota = (u64)cfs_quota_us * NSEC_PER_USEC;
10272c6507
< 		return -EINVAL;
---
> 		quota = (u64)cfs_quota_us * NSEC_PER_USEC;
10274c6509
< 	return tg_set_cfs_bandwidth(tg, period, quota, burst);
---
> 	return tg_set_cfs_bandwidth(tg, period, quota);
10277c6512
< static long tg_get_cfs_quota(struct task_group *tg)
---
> long tg_get_cfs_quota(struct task_group *tg)
10290c6525
< static int tg_set_cfs_period(struct task_group *tg, long cfs_period_us)
---
> int tg_set_cfs_period(struct task_group *tg, long cfs_period_us)
10292,10295c6527
< 	u64 quota, period, burst;
< 
< 	if ((u64)cfs_period_us > U64_MAX / NSEC_PER_USEC)
< 		return -EINVAL;
---
> 	u64 quota, period;
10299d6530
< 	burst = tg->cfs_bandwidth.burst;
10301c6532
< 	return tg_set_cfs_bandwidth(tg, period, quota, burst);
---
> 	return tg_set_cfs_bandwidth(tg, period, quota);
10304c6535
< static long tg_get_cfs_period(struct task_group *tg)
---
> long tg_get_cfs_period(struct task_group *tg)
10314,10337d6544
< static int tg_set_cfs_burst(struct task_group *tg, long cfs_burst_us)
< {
< 	u64 quota, period, burst;
< 
< 	if ((u64)cfs_burst_us > U64_MAX / NSEC_PER_USEC)
< 		return -EINVAL;
< 
< 	burst = (u64)cfs_burst_us * NSEC_PER_USEC;
< 	period = ktime_to_ns(tg->cfs_bandwidth.period);
< 	quota = tg->cfs_bandwidth.quota;
< 
< 	return tg_set_cfs_bandwidth(tg, period, quota, burst);
< }
< 
< static long tg_get_cfs_burst(struct task_group *tg)
< {
< 	u64 burst_us;
< 
< 	burst_us = tg->cfs_bandwidth.burst;
< 	do_div(burst_us, NSEC_PER_USEC);
< 
< 	return burst_us;
< }
< 
10362,10373d6568
< static u64 cpu_cfs_burst_read_u64(struct cgroup_subsys_state *css,
< 				  struct cftype *cft)
< {
< 	return tg_get_cfs_burst(css_tg(css));
< }
< 
< static int cpu_cfs_burst_write_u64(struct cgroup_subsys_state *css,
< 				   struct cftype *cftype, u64 cfs_burst_us)
< {
< 	return tg_set_cfs_burst(css_tg(css), cfs_burst_us);
< }
< 
10418,10419c6613
< 		 * Ensure max(child_quota) <= parent_quota.  On cgroup2,
< 		 * always take the min.  On cgroup1, only inherit when no
---
> 		 * Ensure max(child_quota) <= parent_quota, inherit when no
10422,10429c6616,6619
< 		if (cgroup_subsys_on_dfl(cpu_cgrp_subsys)) {
< 			quota = min(quota, parent_quota);
< 		} else {
< 			if (quota == RUNTIME_INF)
< 				quota = parent_quota;
< 			else if (parent_quota != RUNTIME_INF && quota > parent_quota)
< 				return -EINVAL;
< 		}
---
> 		if (quota == RUNTIME_INF)
> 			quota = parent_quota;
> 		else if (parent_quota != RUNTIME_INF && quota > parent_quota)
> 			return -EINVAL;
10466,10475d6655
< 	if (schedstat_enabled() && tg != &root_task_group) {
< 		u64 ws = 0;
< 		int i;
< 
< 		for_each_possible_cpu(i)
< 			ws += schedstat_val(tg->se[i]->statistics.wait_sum);
< 
< 		seq_printf(sf, "wait_sum %llu\n", ws);
< 	}
< 
10507,10520d6686
< #ifdef CONFIG_FAIR_GROUP_SCHED
< static s64 cpu_idle_read_s64(struct cgroup_subsys_state *css,
< 			       struct cftype *cft)
< {
< 	return css_tg(css)->idle;
< }
< 
< static int cpu_idle_write_s64(struct cgroup_subsys_state *css,
< 				struct cftype *cft, s64 idle)
< {
< 	return sched_group_set_idle(css_tg(css), idle);
< }
< #endif
< 
10528,10532d6693
< 	{
< 		.name = "idle",
< 		.read_s64 = cpu_idle_read_s64,
< 		.write_s64 = cpu_idle_write_s64,
< 	},
10546,10550d6706
< 		.name = "cfs_burst_us",
< 		.read_u64 = cpu_cfs_burst_read_u64,
< 		.write_u64 = cpu_cfs_burst_write_u64,
< 	},
< 	{
10567,10580d6722
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	{
< 		.name = "uclamp.min",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.seq_show = cpu_uclamp_min_show,
< 		.write = cpu_uclamp_min_write,
< 	},
< 	{
< 		.name = "uclamp.max",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.seq_show = cpu_uclamp_max_show,
< 		.write = cpu_uclamp_max_write,
< 	},
< #endif
10656d6797
< 	int idx;
10661,10664c6802
< 	idx = NICE_TO_PRIO(nice) - MAX_RT_PRIO;
< 	idx = array_index_nospec(idx, 40);
< 	weight = sched_prio_to_weight[idx];
< 
---
> 	weight = sched_prio_to_weight[NICE_TO_PRIO(nice) - MAX_RT_PRIO];
10686c6824
< 	if (sscanf(buf, "%20s %llu", tok, periodp) < 1)
---
> 	if (!sscanf(buf, "%s %llu", tok, periodp))
10715d6852
< 	u64 burst = tg_get_cfs_burst(tg);
10721c6858
< 		ret = tg_set_cfs_bandwidth(tg, period, quota, burst);
---
> 		ret = tg_set_cfs_bandwidth(tg, period, quota);
10740,10745d6876
< 	{
< 		.name = "idle",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.read_s64 = cpu_idle_read_s64,
< 		.write_s64 = cpu_idle_write_s64,
< 	},
10754,10773d6884
< 	{
< 		.name = "max.burst",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.read_u64 = cpu_cfs_burst_read_u64,
< 		.write_u64 = cpu_cfs_burst_write_u64,
< 	},
< #endif
< #ifdef CONFIG_UCLAMP_TASK_GROUP
< 	{
< 		.name = "uclamp.min",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.seq_show = cpu_uclamp_min_show,
< 		.write = cpu_uclamp_min_write,
< 	},
< 	{
< 		.name = "uclamp.max",
< 		.flags = CFTYPE_NOT_ON_ROOT,
< 		.seq_show = cpu_uclamp_max_show,
< 		.write = cpu_uclamp_max_write,
< 	},
10841,10845d6951
< 
< void call_trace_sched_update_nr_running(struct rq *rq, int count)
< {
<         trace_sched_update_nr_running_tp(rq, count);
< }
